// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBLogistics.proto

#include "PBLogistics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBAccessory_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBAirTransport_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBApparel_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBAppliance_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBClothing_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBConsumable_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDecor_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDigital_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDrink_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBElectronics_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBFlora_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBFood_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBFurniture_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBGames_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBLandTransport_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBPackage_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBPhysical_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBPlants_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBProduct_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBSeaTransport_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBSeeds_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PBShipment_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBStock_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_PBStockItem_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBStorage_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBTech_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBTransport_PBLogistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PBTransportItem_PBLogistics_2eproto;
class PBPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBPackage> _instance;
} _PBPackage_default_instance_;
class PBProductDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBProduct> _instance;
} _PBProduct_default_instance_;
class PBApparelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBApparel> _instance;
} _PBApparel_default_instance_;
class PBAccessoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBAccessory> _instance;
} _PBAccessory_default_instance_;
class PBClothingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBClothing> _instance;
} _PBClothing_default_instance_;
class PBConsumableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBConsumable> _instance;
} _PBConsumable_default_instance_;
class PBFoodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBFood> _instance;
} _PBFood_default_instance_;
class PBDrinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBDrink> _instance;
} _PBDrink_default_instance_;
class PBElectronicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBElectronics> _instance;
} _PBElectronics_default_instance_;
class PBTechDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBTech> _instance;
} _PBTech_default_instance_;
class PBApplianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBAppliance> _instance;
} _PBAppliance_default_instance_;
class PBFurnitureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBFurniture> _instance;
} _PBFurniture_default_instance_;
class PBDecorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBDecor> _instance;
} _PBDecor_default_instance_;
class PBStorageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBStorage> _instance;
} _PBStorage_default_instance_;
class PBGamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBGames> _instance;
} _PBGames_default_instance_;
class PBDigitalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBDigital> _instance;
} _PBDigital_default_instance_;
class PBPhysicalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBPhysical> _instance;
} _PBPhysical_default_instance_;
class PBFloraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBFlora> _instance;
} _PBFlora_default_instance_;
class PBPlantsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBPlants> _instance;
} _PBPlants_default_instance_;
class PBSeedsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBSeeds> _instance;
} _PBSeeds_default_instance_;
class PBStockItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBStockItem> _instance;
  const ::PBAccessory* accessory_;
  const ::PBClothing* clothing_;
  const ::PBFood* food_;
  const ::PBDrink* drink_;
  const ::PBAppliance* appliance_;
  const ::PBTech* tech_;
  const ::PBDecor* decor_;
  const ::PBStorage* storage_;
  const ::PBDigital* digital_;
  const ::PBPhysical* physical_;
  const ::PBPlants* plants_;
  const ::PBSeeds* seeds_;
} _PBStockItem_default_instance_;
class PBStockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBStock> _instance;
} _PBStock_default_instance_;
class PBTransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBTransport> _instance;
} _PBTransport_default_instance_;
class PBAirTransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBAirTransport> _instance;
} _PBAirTransport_default_instance_;
class PBLandTransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBLandTransport> _instance;
} _PBLandTransport_default_instance_;
class PBSeaTransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBSeaTransport> _instance;
} _PBSeaTransport_default_instance_;
class PBTransportItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBTransportItem> _instance;
  const ::PBAirTransport* airtransport_;
  const ::PBLandTransport* landtransport_;
  const ::PBSeaTransport* seatransport_;
} _PBTransportItem_default_instance_;
class PBTransportListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBTransportList> _instance;
} _PBTransportList_default_instance_;
class PBShipmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBShipment> _instance;
} _PBShipment_default_instance_;
class PBShipmentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBShipmentList> _instance;
} _PBShipmentList_default_instance_;
static void InitDefaultsscc_info_PBAccessory_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBAccessory_default_instance_;
    new (ptr) ::PBAccessory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBAccessory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBAccessory_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBAccessory_PBLogistics_2eproto}, {
      &scc_info_PBApparel_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBAirTransport_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBAirTransport_default_instance_;
    new (ptr) ::PBAirTransport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBAirTransport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBAirTransport_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBAirTransport_PBLogistics_2eproto}, {
      &scc_info_PBTransport_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBApparel_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBApparel_default_instance_;
    new (ptr) ::PBApparel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBApparel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBApparel_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBApparel_PBLogistics_2eproto}, {
      &scc_info_PBProduct_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBAppliance_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBAppliance_default_instance_;
    new (ptr) ::PBAppliance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBAppliance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBAppliance_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBAppliance_PBLogistics_2eproto}, {
      &scc_info_PBElectronics_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBClothing_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBClothing_default_instance_;
    new (ptr) ::PBClothing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBClothing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBClothing_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBClothing_PBLogistics_2eproto}, {
      &scc_info_PBApparel_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBConsumable_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBConsumable_default_instance_;
    new (ptr) ::PBConsumable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBConsumable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBConsumable_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBConsumable_PBLogistics_2eproto}, {
      &scc_info_PBProduct_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBDecor_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBDecor_default_instance_;
    new (ptr) ::PBDecor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBDecor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDecor_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBDecor_PBLogistics_2eproto}, {
      &scc_info_PBFurniture_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBDigital_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBDigital_default_instance_;
    new (ptr) ::PBDigital();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBDigital::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDigital_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBDigital_PBLogistics_2eproto}, {
      &scc_info_PBGames_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBDrink_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBDrink_default_instance_;
    new (ptr) ::PBDrink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBDrink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDrink_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBDrink_PBLogistics_2eproto}, {
      &scc_info_PBConsumable_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBElectronics_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBElectronics_default_instance_;
    new (ptr) ::PBElectronics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBElectronics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBElectronics_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBElectronics_PBLogistics_2eproto}, {
      &scc_info_PBProduct_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBFlora_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBFlora_default_instance_;
    new (ptr) ::PBFlora();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBFlora::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBFlora_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBFlora_PBLogistics_2eproto}, {
      &scc_info_PBProduct_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBFood_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBFood_default_instance_;
    new (ptr) ::PBFood();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBFood::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBFood_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBFood_PBLogistics_2eproto}, {
      &scc_info_PBConsumable_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBFurniture_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBFurniture_default_instance_;
    new (ptr) ::PBFurniture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBFurniture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBFurniture_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBFurniture_PBLogistics_2eproto}, {
      &scc_info_PBProduct_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBGames_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBGames_default_instance_;
    new (ptr) ::PBGames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBGames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBGames_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBGames_PBLogistics_2eproto}, {
      &scc_info_PBProduct_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBLandTransport_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBLandTransport_default_instance_;
    new (ptr) ::PBLandTransport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBLandTransport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBLandTransport_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBLandTransport_PBLogistics_2eproto}, {
      &scc_info_PBTransport_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBPackage_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBPackage_default_instance_;
    new (ptr) ::PBPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBPackage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBPackage_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PBPackage_PBLogistics_2eproto}, {}};

static void InitDefaultsscc_info_PBPhysical_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBPhysical_default_instance_;
    new (ptr) ::PBPhysical();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBPhysical::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBPhysical_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBPhysical_PBLogistics_2eproto}, {
      &scc_info_PBGames_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBPlants_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBPlants_default_instance_;
    new (ptr) ::PBPlants();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBPlants::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBPlants_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBPlants_PBLogistics_2eproto}, {
      &scc_info_PBFlora_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBProduct_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBProduct_default_instance_;
    new (ptr) ::PBProduct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBProduct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBProduct_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBProduct_PBLogistics_2eproto}, {
      &scc_info_PBPackage_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBSeaTransport_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBSeaTransport_default_instance_;
    new (ptr) ::PBSeaTransport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBSeaTransport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBSeaTransport_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBSeaTransport_PBLogistics_2eproto}, {
      &scc_info_PBTransport_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBSeeds_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBSeeds_default_instance_;
    new (ptr) ::PBSeeds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBSeeds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBSeeds_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBSeeds_PBLogistics_2eproto}, {
      &scc_info_PBFlora_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBShipment_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBShipment_default_instance_;
    new (ptr) ::PBShipment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShipment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PBShipment_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PBShipment_PBLogistics_2eproto}, {
      &scc_info_PBStock_PBLogistics_2eproto.base,
      &scc_info_PBTransportItem_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBShipmentList_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBShipmentList_default_instance_;
    new (ptr) ::PBShipmentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShipmentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBShipmentList_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBShipmentList_PBLogistics_2eproto}, {
      &scc_info_PBShipment_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBStock_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBStock_default_instance_;
    new (ptr) ::PBStock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBStock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBStock_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBStock_PBLogistics_2eproto}, {
      &scc_info_PBStockItem_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBStockItem_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBStockItem_default_instance_;
    new (ptr) ::PBStockItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBStockItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_PBStockItem_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_PBStockItem_PBLogistics_2eproto}, {
      &scc_info_PBAccessory_PBLogistics_2eproto.base,
      &scc_info_PBClothing_PBLogistics_2eproto.base,
      &scc_info_PBFood_PBLogistics_2eproto.base,
      &scc_info_PBDrink_PBLogistics_2eproto.base,
      &scc_info_PBAppliance_PBLogistics_2eproto.base,
      &scc_info_PBTech_PBLogistics_2eproto.base,
      &scc_info_PBDecor_PBLogistics_2eproto.base,
      &scc_info_PBStorage_PBLogistics_2eproto.base,
      &scc_info_PBDigital_PBLogistics_2eproto.base,
      &scc_info_PBPhysical_PBLogistics_2eproto.base,
      &scc_info_PBPlants_PBLogistics_2eproto.base,
      &scc_info_PBSeeds_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBStorage_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBStorage_default_instance_;
    new (ptr) ::PBStorage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBStorage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBStorage_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBStorage_PBLogistics_2eproto}, {
      &scc_info_PBFurniture_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBTech_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBTech_default_instance_;
    new (ptr) ::PBTech();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBTech::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBTech_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBTech_PBLogistics_2eproto}, {
      &scc_info_PBElectronics_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBTransport_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBTransport_default_instance_;
    new (ptr) ::PBTransport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBTransport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBTransport_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PBTransport_PBLogistics_2eproto}, {}};

static void InitDefaultsscc_info_PBTransportItem_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBTransportItem_default_instance_;
    new (ptr) ::PBTransportItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBTransportItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PBTransportItem_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PBTransportItem_PBLogistics_2eproto}, {
      &scc_info_PBAirTransport_PBLogistics_2eproto.base,
      &scc_info_PBLandTransport_PBLogistics_2eproto.base,
      &scc_info_PBSeaTransport_PBLogistics_2eproto.base,}};

static void InitDefaultsscc_info_PBTransportList_PBLogistics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBTransportList_default_instance_;
    new (ptr) ::PBTransportList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBTransportList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBTransportList_PBLogistics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PBTransportList_PBLogistics_2eproto}, {
      &scc_info_PBTransportItem_PBLogistics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PBLogistics_2eproto[30];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PBLogistics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PBLogistics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PBLogistics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBPackage, units_),
  PROTOBUF_FIELD_OFFSET(::PBPackage, costperunit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBProduct, cost_),
  PROTOBUF_FIELD_OFFSET(::PBProduct, name_),
  PROTOBUF_FIELD_OFFSET(::PBProduct, supplier_),
  PROTOBUF_FIELD_OFFSET(::PBProduct, discountamount_),
  PROTOBUF_FIELD_OFFSET(::PBProduct, packaging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBApparel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBApparel, material_),
  PROTOBUF_FIELD_OFFSET(::PBApparel, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBAccessory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBAccessory, brand_),
  PROTOBUF_FIELD_OFFSET(::PBAccessory, apparel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBClothing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBClothing, style_),
  PROTOBUF_FIELD_OFFSET(::PBClothing, apparel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBConsumable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBConsumable, calories_),
  PROTOBUF_FIELD_OFFSET(::PBConsumable, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBFood, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBFood, iscanned_),
  PROTOBUF_FIELD_OFFSET(::PBFood, consumable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBDrink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBDrink, iscarbonated_),
  PROTOBUF_FIELD_OFFSET(::PBDrink, consumable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBElectronics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBElectronics, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::PBElectronics, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBTech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBTech, type_),
  PROTOBUF_FIELD_OFFSET(::PBTech, electronics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBAppliance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBAppliance, size_),
  PROTOBUF_FIELD_OFFSET(::PBAppliance, electronics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBFurniture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBFurniture, material_),
  PROTOBUF_FIELD_OFFSET(::PBFurniture, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBDecor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBDecor, style_),
  PROTOBUF_FIELD_OFFSET(::PBDecor, furniture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBStorage, capacity_),
  PROTOBUF_FIELD_OFFSET(::PBStorage, furniture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBGames, genre_),
  PROTOBUF_FIELD_OFFSET(::PBGames, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBDigital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBDigital, developer_),
  PROTOBUF_FIELD_OFFSET(::PBDigital, games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBPhysical, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBPhysical, numberofplayers_),
  PROTOBUF_FIELD_OFFSET(::PBPhysical, games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBFlora, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBFlora, iscultivated_),
  PROTOBUF_FIELD_OFFSET(::PBFlora, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBPlants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBPlants, bearsfruit_),
  PROTOBUF_FIELD_OFFSET(::PBPlants, flora_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBSeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBSeeds, expirationdays_),
  PROTOBUF_FIELD_OFFSET(::PBSeeds, flora_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBStockItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PBStockItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBStockItem, quantity_),
  offsetof(::PBStockItemDefaultTypeInternal, accessory_),
  offsetof(::PBStockItemDefaultTypeInternal, clothing_),
  offsetof(::PBStockItemDefaultTypeInternal, food_),
  offsetof(::PBStockItemDefaultTypeInternal, drink_),
  offsetof(::PBStockItemDefaultTypeInternal, appliance_),
  offsetof(::PBStockItemDefaultTypeInternal, tech_),
  offsetof(::PBStockItemDefaultTypeInternal, decor_),
  offsetof(::PBStockItemDefaultTypeInternal, storage_),
  offsetof(::PBStockItemDefaultTypeInternal, digital_),
  offsetof(::PBStockItemDefaultTypeInternal, physical_),
  offsetof(::PBStockItemDefaultTypeInternal, plants_),
  offsetof(::PBStockItemDefaultTypeInternal, seeds_),
  PROTOBUF_FIELD_OFFSET(::PBStockItem, product_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBStock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBStock, stock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBTransport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBTransport, code_),
  PROTOBUF_FIELD_OFFSET(::PBTransport, speed_),
  PROTOBUF_FIELD_OFFSET(::PBTransport, costpermeter_),
  PROTOBUF_FIELD_OFFSET(::PBTransport, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBAirTransport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBAirTransport, model_),
  PROTOBUF_FIELD_OFFSET(::PBAirTransport, transport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBLandTransport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBLandTransport, type_),
  PROTOBUF_FIELD_OFFSET(::PBLandTransport, transport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBSeaTransport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBSeaTransport, shipname_),
  PROTOBUF_FIELD_OFFSET(::PBSeaTransport, transport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBTransportItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PBTransportItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::PBTransportItemDefaultTypeInternal, airtransport_),
  offsetof(::PBTransportItemDefaultTypeInternal, landtransport_),
  offsetof(::PBTransportItemDefaultTypeInternal, seatransport_),
  PROTOBUF_FIELD_OFFSET(::PBTransportItem, product_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBTransportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBTransportList, transportlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBShipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShipment, id_),
  PROTOBUF_FIELD_OFFSET(::PBShipment, customer_),
  PROTOBUF_FIELD_OFFSET(::PBShipment, distance_),
  PROTOBUF_FIELD_OFFSET(::PBShipment, cost_),
  PROTOBUF_FIELD_OFFSET(::PBShipment, dispatched_),
  PROTOBUF_FIELD_OFFSET(::PBShipment, productlist_),
  PROTOBUF_FIELD_OFFSET(::PBShipment, transport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBShipmentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShipmentList, shipmentlist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PBPackage)},
  { 7, -1, sizeof(::PBProduct)},
  { 17, -1, sizeof(::PBApparel)},
  { 24, -1, sizeof(::PBAccessory)},
  { 31, -1, sizeof(::PBClothing)},
  { 38, -1, sizeof(::PBConsumable)},
  { 45, -1, sizeof(::PBFood)},
  { 52, -1, sizeof(::PBDrink)},
  { 59, -1, sizeof(::PBElectronics)},
  { 66, -1, sizeof(::PBTech)},
  { 73, -1, sizeof(::PBAppliance)},
  { 80, -1, sizeof(::PBFurniture)},
  { 87, -1, sizeof(::PBDecor)},
  { 94, -1, sizeof(::PBStorage)},
  { 101, -1, sizeof(::PBGames)},
  { 108, -1, sizeof(::PBDigital)},
  { 115, -1, sizeof(::PBPhysical)},
  { 122, -1, sizeof(::PBFlora)},
  { 129, -1, sizeof(::PBPlants)},
  { 136, -1, sizeof(::PBSeeds)},
  { 143, -1, sizeof(::PBStockItem)},
  { 162, -1, sizeof(::PBStock)},
  { 168, -1, sizeof(::PBTransport)},
  { 177, -1, sizeof(::PBAirTransport)},
  { 184, -1, sizeof(::PBLandTransport)},
  { 191, -1, sizeof(::PBSeaTransport)},
  { 198, -1, sizeof(::PBTransportItem)},
  { 207, -1, sizeof(::PBTransportList)},
  { 213, -1, sizeof(::PBShipment)},
  { 225, -1, sizeof(::PBShipmentList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBProduct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBApparel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBAccessory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBClothing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBConsumable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBFood_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBDrink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBElectronics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBTech_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBAppliance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBFurniture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBDecor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBDigital_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBPhysical_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBFlora_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBPlants_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBSeeds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBStockItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBStock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBTransport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBAirTransport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBLandTransport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBSeaTransport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBTransportItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBTransportList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBShipment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBShipmentList_default_instance_),
};

const char descriptor_table_protodef_PBLogistics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021PBLogistics.proto\"/\n\tPBPackage\022\r\n\005unit"
  "s\030\001 \001(\005\022\023\n\013costPerUnit\030\002 \001(\002\"p\n\tPBProduc"
  "t\022\014\n\004cost\030\001 \001(\002\022\014\n\004name\030\002 \001(\t\022\020\n\010supplie"
  "r\030\003 \001(\t\022\026\n\016discountAmount\030\004 \001(\002\022\035\n\tpacka"
  "ging\030\005 \001(\0132\n.PBPackage\":\n\tPBApparel\022\020\n\010m"
  "aterial\030\001 \001(\t\022\033\n\007product\030\002 \001(\0132\n.PBProdu"
  "ct\"9\n\013PBAccessory\022\r\n\005brand\030\001 \001(\t\022\033\n\007appa"
  "rel\030\002 \001(\0132\n.PBApparel\"8\n\nPBClothing\022\r\n\005s"
  "tyle\030\001 \001(\t\022\033\n\007apparel\030\002 \001(\0132\n.PBApparel\""
  "=\n\014PBConsumable\022\020\n\010calories\030\001 \001(\005\022\033\n\007pro"
  "duct\030\002 \001(\0132\n.PBProduct\"=\n\006PBFood\022\020\n\010isCa"
  "nned\030\001 \001(\010\022!\n\nconsumable\030\002 \001(\0132\r.PBConsu"
  "mable\"B\n\007PBDrink\022\024\n\014isCarbonated\030\001 \001(\010\022!"
  "\n\nconsumable\030\002 \001(\0132\r.PBConsumable\"B\n\rPBE"
  "lectronics\022\024\n\014manufacturer\030\001 \001(\t\022\033\n\007prod"
  "uct\030\002 \001(\0132\n.PBProduct\";\n\006PBTech\022\014\n\004type\030"
  "\001 \001(\t\022#\n\013electronics\030\002 \001(\0132\016.PBElectroni"
  "cs\"@\n\013PBAppliance\022\014\n\004size\030\001 \001(\t\022#\n\013elect"
  "ronics\030\002 \001(\0132\016.PBElectronics\"<\n\013PBFurnit"
  "ure\022\020\n\010material\030\001 \001(\t\022\033\n\007product\030\002 \001(\0132\n"
  ".PBProduct\"9\n\007PBDecor\022\r\n\005style\030\001 \001(\t\022\037\n\t"
  "furniture\030\002 \001(\0132\014.PBFurniture\">\n\tPBStora"
  "ge\022\020\n\010capacity\030\001 \001(\005\022\037\n\tfurniture\030\002 \001(\0132"
  "\014.PBFurniture\"5\n\007PBGames\022\r\n\005genre\030\001 \001(\t\022"
  "\033\n\007product\030\002 \001(\0132\n.PBProduct\"7\n\tPBDigita"
  "l\022\021\n\tdeveloper\030\001 \001(\t\022\027\n\005games\030\002 \001(\0132\010.PB"
  "Games\">\n\nPBPhysical\022\027\n\017numberOfPlayers\030\001"
  " \001(\005\022\027\n\005games\030\002 \001(\0132\010.PBGames\"<\n\007PBFlora"
  "\022\024\n\014iscultivated\030\001 \001(\010\022\033\n\007product\030\002 \001(\0132"
  "\n.PBProduct\"7\n\010PBPlants\022\022\n\nbearsFruit\030\001 "
  "\001(\010\022\027\n\005flora\030\002 \001(\0132\010.PBFlora\":\n\007PBSeeds\022"
  "\026\n\016expirationDays\030\001 \001(\005\022\027\n\005flora\030\002 \001(\0132\010"
  ".PBFlora\"\225\003\n\013PBStockItem\022\020\n\010quantity\030\001 \001"
  "(\005\022!\n\taccessory\030\002 \001(\0132\014.PBAccessoryH\000\022\037\n"
  "\010clothing\030\003 \001(\0132\013.PBClothingH\000\022\027\n\004food\030\004"
  " \001(\0132\007.PBFoodH\000\022\031\n\005drink\030\005 \001(\0132\010.PBDrink"
  "H\000\022!\n\tappliance\030\006 \001(\0132\014.PBApplianceH\000\022\027\n"
  "\004tech\030\007 \001(\0132\007.PBTechH\000\022\031\n\005decor\030\010 \001(\0132\010."
  "PBDecorH\000\022\035\n\007storage\030\t \001(\0132\n.PBStorageH\000"
  "\022\035\n\007digital\030\n \001(\0132\n.PBDigitalH\000\022\037\n\010physi"
  "cal\030\013 \001(\0132\013.PBPhysicalH\000\022\033\n\006plants\030\014 \001(\013"
  "2\t.PBPlantsH\000\022\031\n\005seeds\030\r \001(\0132\010.PBSeedsH\000"
  "B\016\n\014product_type\"&\n\007PBStock\022\033\n\005stock\030\001 \003"
  "(\0132\014.PBStockItem\"O\n\013PBTransport\022\014\n\004code\030"
  "\001 \001(\005\022\r\n\005speed\030\002 \001(\002\022\024\n\014costPerMeter\030\003 \001"
  "(\002\022\r\n\005route\030\004 \001(\t\"@\n\016PBAirTransport\022\r\n\005m"
  "odel\030\001 \001(\t\022\037\n\ttransport\030\002 \001(\0132\014.PBTransp"
  "ort\"@\n\017PBLandTransport\022\014\n\004type\030\001 \001(\t\022\037\n\t"
  "transport\030\002 \001(\0132\014.PBTransport\"C\n\016PBSeaTr"
  "ansport\022\020\n\010shipname\030\001 \001(\t\022\037\n\ttransport\030\002"
  " \001(\0132\014.PBTransport\"\236\001\n\017PBTransportItem\022\'"
  "\n\014airTransport\030\001 \001(\0132\017.PBAirTransportH\000\022"
  ")\n\rlandTransport\030\002 \001(\0132\020.PBLandTransport"
  "H\000\022\'\n\014seaTransport\030\003 \001(\0132\017.PBSeaTranspor"
  "tH\000B\016\n\014product_type\":\n\017PBTransportList\022\'"
  "\n\rtransportList\030\001 \003(\0132\020.PBTransportItem\""
  "\242\001\n\nPBShipment\022\n\n\002ID\030\001 \001(\005\022\020\n\010customer\030\002"
  " \001(\t\022\020\n\010distance\030\003 \001(\002\022\014\n\004cost\030\004 \001(\002\022\022\n\n"
  "dispatched\030\005 \001(\010\022\035\n\013productlist\030\006 \001(\0132\010."
  "PBStock\022#\n\ttransport\030\007 \001(\0132\020.PBTransport"
  "Item\"3\n\016PBShipmentList\022!\n\014shipmentList\030\001"
  " \003(\0132\013.PBShipmentb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PBLogistics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PBLogistics_2eproto_sccs[30] = {
  &scc_info_PBAccessory_PBLogistics_2eproto.base,
  &scc_info_PBAirTransport_PBLogistics_2eproto.base,
  &scc_info_PBApparel_PBLogistics_2eproto.base,
  &scc_info_PBAppliance_PBLogistics_2eproto.base,
  &scc_info_PBClothing_PBLogistics_2eproto.base,
  &scc_info_PBConsumable_PBLogistics_2eproto.base,
  &scc_info_PBDecor_PBLogistics_2eproto.base,
  &scc_info_PBDigital_PBLogistics_2eproto.base,
  &scc_info_PBDrink_PBLogistics_2eproto.base,
  &scc_info_PBElectronics_PBLogistics_2eproto.base,
  &scc_info_PBFlora_PBLogistics_2eproto.base,
  &scc_info_PBFood_PBLogistics_2eproto.base,
  &scc_info_PBFurniture_PBLogistics_2eproto.base,
  &scc_info_PBGames_PBLogistics_2eproto.base,
  &scc_info_PBLandTransport_PBLogistics_2eproto.base,
  &scc_info_PBPackage_PBLogistics_2eproto.base,
  &scc_info_PBPhysical_PBLogistics_2eproto.base,
  &scc_info_PBPlants_PBLogistics_2eproto.base,
  &scc_info_PBProduct_PBLogistics_2eproto.base,
  &scc_info_PBSeaTransport_PBLogistics_2eproto.base,
  &scc_info_PBSeeds_PBLogistics_2eproto.base,
  &scc_info_PBShipment_PBLogistics_2eproto.base,
  &scc_info_PBShipmentList_PBLogistics_2eproto.base,
  &scc_info_PBStock_PBLogistics_2eproto.base,
  &scc_info_PBStockItem_PBLogistics_2eproto.base,
  &scc_info_PBStorage_PBLogistics_2eproto.base,
  &scc_info_PBTech_PBLogistics_2eproto.base,
  &scc_info_PBTransport_PBLogistics_2eproto.base,
  &scc_info_PBTransportItem_PBLogistics_2eproto.base,
  &scc_info_PBTransportList_PBLogistics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PBLogistics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PBLogistics_2eproto = {
  false, false, descriptor_table_protodef_PBLogistics_2eproto, "PBLogistics.proto", 2465,
  &descriptor_table_PBLogistics_2eproto_once, descriptor_table_PBLogistics_2eproto_sccs, descriptor_table_PBLogistics_2eproto_deps, 30, 0,
  schemas, file_default_instances, TableStruct_PBLogistics_2eproto::offsets,
  file_level_metadata_PBLogistics_2eproto, 30, file_level_enum_descriptors_PBLogistics_2eproto, file_level_service_descriptors_PBLogistics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PBLogistics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PBLogistics_2eproto)), true);

// ===================================================================

void PBPackage::InitAsDefaultInstance() {
}
class PBPackage::_Internal {
 public:
};

PBPackage::PBPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBPackage)
}
PBPackage::PBPackage(const PBPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&units_, &from.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&costperunit_) -
    reinterpret_cast<char*>(&units_)) + sizeof(costperunit_));
  // @@protoc_insertion_point(copy_constructor:PBPackage)
}

void PBPackage::SharedCtor() {
  ::memset(&units_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costperunit_) -
      reinterpret_cast<char*>(&units_)) + sizeof(costperunit_));
}

PBPackage::~PBPackage() {
  // @@protoc_insertion_point(destructor:PBPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBPackage::ArenaDtor(void* object) {
  PBPackage* _this = reinterpret_cast< PBPackage* >(object);
  (void)_this;
}
void PBPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBPackage& PBPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBPackage_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:PBPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&units_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costperunit_) -
      reinterpret_cast<char*>(&units_)) + sizeof(costperunit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float costPerUnit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          costperunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 units = 1;
  if (this->units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // float costPerUnit = 2;
  if (!(this->costperunit() <= 0 && this->costperunit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_costperunit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBPackage)
  return target;
}

size_t PBPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 units = 1;
  if (this->units() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_units());
  }

  // float costPerUnit = 2;
  if (!(this->costperunit() <= 0 && this->costperunit() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const PBPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBPackage)
    MergeFrom(*source);
  }
}

void PBPackage::MergeFrom(const PBPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.units() != 0) {
    _internal_set_units(from._internal_units());
  }
  if (!(from.costperunit() <= 0 && from.costperunit() >= 0)) {
    _internal_set_costperunit(from._internal_costperunit());
  }
}

void PBPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPackage::CopyFrom(const PBPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPackage::IsInitialized() const {
  return true;
}

void PBPackage::InternalSwap(PBPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBPackage, costperunit_)
      + sizeof(PBPackage::costperunit_)
      - PROTOBUF_FIELD_OFFSET(PBPackage, units_)>(
          reinterpret_cast<char*>(&units_),
          reinterpret_cast<char*>(&other->units_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBProduct::InitAsDefaultInstance() {
  ::_PBProduct_default_instance_._instance.get_mutable()->packaging_ = const_cast< ::PBPackage*>(
      ::PBPackage::internal_default_instance());
}
class PBProduct::_Internal {
 public:
  static const ::PBPackage& packaging(const PBProduct* msg);
};

const ::PBPackage&
PBProduct::_Internal::packaging(const PBProduct* msg) {
  return *msg->packaging_;
}
PBProduct::PBProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBProduct)
}
PBProduct::PBProduct(const PBProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  supplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_supplier().empty()) {
    supplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_supplier(),
      GetArena());
  }
  if (from._internal_has_packaging()) {
    packaging_ = new ::PBPackage(*from.packaging_);
  } else {
    packaging_ = nullptr;
  }
  ::memcpy(&cost_, &from.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&discountamount_) -
    reinterpret_cast<char*>(&cost_)) + sizeof(discountamount_));
  // @@protoc_insertion_point(copy_constructor:PBProduct)
}

void PBProduct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBProduct_PBLogistics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packaging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discountamount_) -
      reinterpret_cast<char*>(&packaging_)) + sizeof(discountamount_));
}

PBProduct::~PBProduct() {
  // @@protoc_insertion_point(destructor:PBProduct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supplier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete packaging_;
}

void PBProduct::ArenaDtor(void* object) {
  PBProduct* _this = reinterpret_cast< PBProduct* >(object);
  (void)_this;
}
void PBProduct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBProduct& PBProduct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBProduct_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:PBProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  supplier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && packaging_ != nullptr) {
    delete packaging_;
  }
  packaging_ = nullptr;
  ::memset(&cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discountamount_) -
      reinterpret_cast<char*>(&cost_)) + sizeof(discountamount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBProduct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBProduct.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string supplier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_supplier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBProduct.supplier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float discountAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          discountamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .PBPackage packaging = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_packaging(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBProduct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float cost = 1;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_cost(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBProduct.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string supplier = 3;
  if (this->supplier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_supplier().data(), static_cast<int>(this->_internal_supplier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBProduct.supplier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_supplier(), target);
  }

  // float discountAmount = 4;
  if (!(this->discountamount() <= 0 && this->discountamount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_discountamount(), target);
  }

  // .PBPackage packaging = 5;
  if (this->has_packaging()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::packaging(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBProduct)
  return target;
}

size_t PBProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBProduct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string supplier = 3;
  if (this->supplier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supplier());
  }

  // .PBPackage packaging = 5;
  if (this->has_packaging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packaging_);
  }

  // float cost = 1;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float discountAmount = 4;
  if (!(this->discountamount() <= 0 && this->discountamount() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBProduct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const PBProduct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBProduct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBProduct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBProduct)
    MergeFrom(*source);
  }
}

void PBProduct::MergeFrom(const PBProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.supplier().size() > 0) {
    _internal_set_supplier(from._internal_supplier());
  }
  if (from.has_packaging()) {
    _internal_mutable_packaging()->::PBPackage::MergeFrom(from._internal_packaging());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    _internal_set_cost(from._internal_cost());
  }
  if (!(from.discountamount() <= 0 && from.discountamount() >= 0)) {
    _internal_set_discountamount(from._internal_discountamount());
  }
}

void PBProduct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduct::CopyFrom(const PBProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBProduct::IsInitialized() const {
  return true;
}

void PBProduct::InternalSwap(PBProduct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  supplier_.Swap(&other->supplier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBProduct, discountamount_)
      + sizeof(PBProduct::discountamount_)
      - PROTOBUF_FIELD_OFFSET(PBProduct, packaging_)>(
          reinterpret_cast<char*>(&packaging_),
          reinterpret_cast<char*>(&other->packaging_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBProduct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBApparel::InitAsDefaultInstance() {
  ::_PBApparel_default_instance_._instance.get_mutable()->product_ = const_cast< ::PBProduct*>(
      ::PBProduct::internal_default_instance());
}
class PBApparel::_Internal {
 public:
  static const ::PBProduct& product(const PBApparel* msg);
};

const ::PBProduct&
PBApparel::_Internal::product(const PBApparel* msg) {
  return *msg->product_;
}
PBApparel::PBApparel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBApparel)
}
PBApparel::PBApparel(const PBApparel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_material().empty()) {
    material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material(),
      GetArena());
  }
  if (from._internal_has_product()) {
    product_ = new ::PBProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBApparel)
}

void PBApparel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBApparel_PBLogistics_2eproto.base);
  material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_ = nullptr;
}

PBApparel::~PBApparel() {
  // @@protoc_insertion_point(destructor:PBApparel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBApparel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete product_;
}

void PBApparel::ArenaDtor(void* object) {
  PBApparel* _this = reinterpret_cast< PBApparel* >(object);
  (void)_this;
}
void PBApparel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBApparel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBApparel& PBApparel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBApparel_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBApparel::Clear() {
// @@protoc_insertion_point(message_clear_start:PBApparel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBApparel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string material = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_material();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBApparel.material"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBApparel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBApparel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string material = 1;
  if (this->material().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBApparel.material");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_material(), target);
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBApparel)
  return target;
}

size_t PBApparel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBApparel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string material = 1;
  if (this->material().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material());
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBApparel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBApparel)
  GOOGLE_DCHECK_NE(&from, this);
  const PBApparel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBApparel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBApparel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBApparel)
    MergeFrom(*source);
  }
}

void PBApparel::MergeFrom(const PBApparel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBApparel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.material().size() > 0) {
    _internal_set_material(from._internal_material());
  }
  if (from.has_product()) {
    _internal_mutable_product()->::PBProduct::MergeFrom(from._internal_product());
  }
}

void PBApparel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBApparel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApparel::CopyFrom(const PBApparel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBApparel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBApparel::IsInitialized() const {
  return true;
}

void PBApparel::InternalSwap(PBApparel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(product_, other->product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBApparel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBAccessory::InitAsDefaultInstance() {
  ::_PBAccessory_default_instance_._instance.get_mutable()->apparel_ = const_cast< ::PBApparel*>(
      ::PBApparel::internal_default_instance());
}
class PBAccessory::_Internal {
 public:
  static const ::PBApparel& apparel(const PBAccessory* msg);
};

const ::PBApparel&
PBAccessory::_Internal::apparel(const PBAccessory* msg) {
  return *msg->apparel_;
}
PBAccessory::PBAccessory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBAccessory)
}
PBAccessory::PBAccessory(const PBAccessory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brand().empty()) {
    brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_brand(),
      GetArena());
  }
  if (from._internal_has_apparel()) {
    apparel_ = new ::PBApparel(*from.apparel_);
  } else {
    apparel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBAccessory)
}

void PBAccessory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBAccessory_PBLogistics_2eproto.base);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apparel_ = nullptr;
}

PBAccessory::~PBAccessory() {
  // @@protoc_insertion_point(destructor:PBAccessory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBAccessory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete apparel_;
}

void PBAccessory::ArenaDtor(void* object) {
  PBAccessory* _this = reinterpret_cast< PBAccessory* >(object);
  (void)_this;
}
void PBAccessory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBAccessory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBAccessory& PBAccessory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBAccessory_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBAccessory::Clear() {
// @@protoc_insertion_point(message_clear_start:PBAccessory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brand_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && apparel_ != nullptr) {
    delete apparel_;
  }
  apparel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBAccessory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brand();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBAccessory.brand"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBApparel apparel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_apparel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBAccessory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBAccessory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string brand = 1;
  if (this->brand().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBAccessory.brand");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brand(), target);
  }

  // .PBApparel apparel = 2;
  if (this->has_apparel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::apparel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBAccessory)
  return target;
}

size_t PBAccessory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBAccessory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string brand = 1;
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brand());
  }

  // .PBApparel apparel = 2;
  if (this->has_apparel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apparel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBAccessory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBAccessory)
  GOOGLE_DCHECK_NE(&from, this);
  const PBAccessory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBAccessory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBAccessory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBAccessory)
    MergeFrom(*source);
  }
}

void PBAccessory::MergeFrom(const PBAccessory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBAccessory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brand().size() > 0) {
    _internal_set_brand(from._internal_brand());
  }
  if (from.has_apparel()) {
    _internal_mutable_apparel()->::PBApparel::MergeFrom(from._internal_apparel());
  }
}

void PBAccessory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBAccessory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccessory::CopyFrom(const PBAccessory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBAccessory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAccessory::IsInitialized() const {
  return true;
}

void PBAccessory::InternalSwap(PBAccessory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brand_.Swap(&other->brand_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(apparel_, other->apparel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBAccessory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBClothing::InitAsDefaultInstance() {
  ::_PBClothing_default_instance_._instance.get_mutable()->apparel_ = const_cast< ::PBApparel*>(
      ::PBApparel::internal_default_instance());
}
class PBClothing::_Internal {
 public:
  static const ::PBApparel& apparel(const PBClothing* msg);
};

const ::PBApparel&
PBClothing::_Internal::apparel(const PBClothing* msg) {
  return *msg->apparel_;
}
PBClothing::PBClothing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBClothing)
}
PBClothing::PBClothing(const PBClothing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_style().empty()) {
    style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_style(),
      GetArena());
  }
  if (from._internal_has_apparel()) {
    apparel_ = new ::PBApparel(*from.apparel_);
  } else {
    apparel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBClothing)
}

void PBClothing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBClothing_PBLogistics_2eproto.base);
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apparel_ = nullptr;
}

PBClothing::~PBClothing() {
  // @@protoc_insertion_point(destructor:PBClothing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBClothing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete apparel_;
}

void PBClothing::ArenaDtor(void* object) {
  PBClothing* _this = reinterpret_cast< PBClothing* >(object);
  (void)_this;
}
void PBClothing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBClothing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBClothing& PBClothing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBClothing_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBClothing::Clear() {
// @@protoc_insertion_point(message_clear_start:PBClothing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && apparel_ != nullptr) {
    delete apparel_;
  }
  apparel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBClothing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBClothing.style"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBApparel apparel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_apparel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBClothing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBClothing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string style = 1;
  if (this->style().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_style().data(), static_cast<int>(this->_internal_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBClothing.style");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_style(), target);
  }

  // .PBApparel apparel = 2;
  if (this->has_apparel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::apparel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBClothing)
  return target;
}

size_t PBClothing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBClothing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string style = 1;
  if (this->style().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  // .PBApparel apparel = 2;
  if (this->has_apparel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apparel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBClothing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBClothing)
  GOOGLE_DCHECK_NE(&from, this);
  const PBClothing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBClothing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBClothing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBClothing)
    MergeFrom(*source);
  }
}

void PBClothing::MergeFrom(const PBClothing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBClothing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.style().size() > 0) {
    _internal_set_style(from._internal_style());
  }
  if (from.has_apparel()) {
    _internal_mutable_apparel()->::PBApparel::MergeFrom(from._internal_apparel());
  }
}

void PBClothing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBClothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClothing::CopyFrom(const PBClothing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBClothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClothing::IsInitialized() const {
  return true;
}

void PBClothing::InternalSwap(PBClothing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  style_.Swap(&other->style_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(apparel_, other->apparel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBClothing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBConsumable::InitAsDefaultInstance() {
  ::_PBConsumable_default_instance_._instance.get_mutable()->product_ = const_cast< ::PBProduct*>(
      ::PBProduct::internal_default_instance());
}
class PBConsumable::_Internal {
 public:
  static const ::PBProduct& product(const PBConsumable* msg);
};

const ::PBProduct&
PBConsumable::_Internal::product(const PBConsumable* msg) {
  return *msg->product_;
}
PBConsumable::PBConsumable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBConsumable)
}
PBConsumable::PBConsumable(const PBConsumable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_product()) {
    product_ = new ::PBProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  calories_ = from.calories_;
  // @@protoc_insertion_point(copy_constructor:PBConsumable)
}

void PBConsumable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBConsumable_PBLogistics_2eproto.base);
  ::memset(&product_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calories_) -
      reinterpret_cast<char*>(&product_)) + sizeof(calories_));
}

PBConsumable::~PBConsumable() {
  // @@protoc_insertion_point(destructor:PBConsumable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBConsumable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete product_;
}

void PBConsumable::ArenaDtor(void* object) {
  PBConsumable* _this = reinterpret_cast< PBConsumable* >(object);
  (void)_this;
}
void PBConsumable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBConsumable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBConsumable& PBConsumable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBConsumable_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBConsumable::Clear() {
// @@protoc_insertion_point(message_clear_start:PBConsumable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  calories_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBConsumable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 calories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          calories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBConsumable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBConsumable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 calories = 1;
  if (this->calories() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_calories(), target);
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBConsumable)
  return target;
}

size_t PBConsumable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBConsumable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBProduct product = 2;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  // int32 calories = 1;
  if (this->calories() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_calories());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBConsumable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBConsumable)
  GOOGLE_DCHECK_NE(&from, this);
  const PBConsumable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBConsumable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBConsumable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBConsumable)
    MergeFrom(*source);
  }
}

void PBConsumable::MergeFrom(const PBConsumable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBConsumable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_product()) {
    _internal_mutable_product()->::PBProduct::MergeFrom(from._internal_product());
  }
  if (from.calories() != 0) {
    _internal_set_calories(from._internal_calories());
  }
}

void PBConsumable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBConsumable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBConsumable::CopyFrom(const PBConsumable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBConsumable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBConsumable::IsInitialized() const {
  return true;
}

void PBConsumable::InternalSwap(PBConsumable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBConsumable, calories_)
      + sizeof(PBConsumable::calories_)
      - PROTOBUF_FIELD_OFFSET(PBConsumable, product_)>(
          reinterpret_cast<char*>(&product_),
          reinterpret_cast<char*>(&other->product_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBConsumable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBFood::InitAsDefaultInstance() {
  ::_PBFood_default_instance_._instance.get_mutable()->consumable_ = const_cast< ::PBConsumable*>(
      ::PBConsumable::internal_default_instance());
}
class PBFood::_Internal {
 public:
  static const ::PBConsumable& consumable(const PBFood* msg);
};

const ::PBConsumable&
PBFood::_Internal::consumable(const PBFood* msg) {
  return *msg->consumable_;
}
PBFood::PBFood(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBFood)
}
PBFood::PBFood(const PBFood& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consumable()) {
    consumable_ = new ::PBConsumable(*from.consumable_);
  } else {
    consumable_ = nullptr;
  }
  iscanned_ = from.iscanned_;
  // @@protoc_insertion_point(copy_constructor:PBFood)
}

void PBFood::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBFood_PBLogistics_2eproto.base);
  ::memset(&consumable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscanned_) -
      reinterpret_cast<char*>(&consumable_)) + sizeof(iscanned_));
}

PBFood::~PBFood() {
  // @@protoc_insertion_point(destructor:PBFood)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBFood::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete consumable_;
}

void PBFood::ArenaDtor(void* object) {
  PBFood* _this = reinterpret_cast< PBFood* >(object);
  (void)_this;
}
void PBFood::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBFood::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBFood& PBFood::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBFood_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBFood::Clear() {
// @@protoc_insertion_point(message_clear_start:PBFood)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && consumable_ != nullptr) {
    delete consumable_;
  }
  consumable_ = nullptr;
  iscanned_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBFood::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isCanned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iscanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBConsumable consumable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consumable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBFood::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBFood)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCanned = 1;
  if (this->iscanned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iscanned(), target);
  }

  // .PBConsumable consumable = 2;
  if (this->has_consumable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::consumable(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBFood)
  return target;
}

size_t PBFood::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBFood)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBConsumable consumable = 2;
  if (this->has_consumable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consumable_);
  }

  // bool isCanned = 1;
  if (this->iscanned() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBFood::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBFood)
  GOOGLE_DCHECK_NE(&from, this);
  const PBFood* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBFood>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBFood)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBFood)
    MergeFrom(*source);
  }
}

void PBFood::MergeFrom(const PBFood& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBFood)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_consumable()) {
    _internal_mutable_consumable()->::PBConsumable::MergeFrom(from._internal_consumable());
  }
  if (from.iscanned() != 0) {
    _internal_set_iscanned(from._internal_iscanned());
  }
}

void PBFood::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBFood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFood::CopyFrom(const PBFood& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBFood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFood::IsInitialized() const {
  return true;
}

void PBFood::InternalSwap(PBFood* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBFood, iscanned_)
      + sizeof(PBFood::iscanned_)
      - PROTOBUF_FIELD_OFFSET(PBFood, consumable_)>(
          reinterpret_cast<char*>(&consumable_),
          reinterpret_cast<char*>(&other->consumable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBFood::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBDrink::InitAsDefaultInstance() {
  ::_PBDrink_default_instance_._instance.get_mutable()->consumable_ = const_cast< ::PBConsumable*>(
      ::PBConsumable::internal_default_instance());
}
class PBDrink::_Internal {
 public:
  static const ::PBConsumable& consumable(const PBDrink* msg);
};

const ::PBConsumable&
PBDrink::_Internal::consumable(const PBDrink* msg) {
  return *msg->consumable_;
}
PBDrink::PBDrink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBDrink)
}
PBDrink::PBDrink(const PBDrink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consumable()) {
    consumable_ = new ::PBConsumable(*from.consumable_);
  } else {
    consumable_ = nullptr;
  }
  iscarbonated_ = from.iscarbonated_;
  // @@protoc_insertion_point(copy_constructor:PBDrink)
}

void PBDrink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBDrink_PBLogistics_2eproto.base);
  ::memset(&consumable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscarbonated_) -
      reinterpret_cast<char*>(&consumable_)) + sizeof(iscarbonated_));
}

PBDrink::~PBDrink() {
  // @@protoc_insertion_point(destructor:PBDrink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBDrink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete consumable_;
}

void PBDrink::ArenaDtor(void* object) {
  PBDrink* _this = reinterpret_cast< PBDrink* >(object);
  (void)_this;
}
void PBDrink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBDrink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBDrink& PBDrink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBDrink_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBDrink::Clear() {
// @@protoc_insertion_point(message_clear_start:PBDrink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && consumable_ != nullptr) {
    delete consumable_;
  }
  consumable_ = nullptr;
  iscarbonated_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBDrink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isCarbonated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iscarbonated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBConsumable consumable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consumable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBDrink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDrink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCarbonated = 1;
  if (this->iscarbonated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iscarbonated(), target);
  }

  // .PBConsumable consumable = 2;
  if (this->has_consumable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::consumable(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDrink)
  return target;
}

size_t PBDrink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBDrink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBConsumable consumable = 2;
  if (this->has_consumable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consumable_);
  }

  // bool isCarbonated = 1;
  if (this->iscarbonated() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBDrink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBDrink)
  GOOGLE_DCHECK_NE(&from, this);
  const PBDrink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBDrink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBDrink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBDrink)
    MergeFrom(*source);
  }
}

void PBDrink::MergeFrom(const PBDrink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBDrink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_consumable()) {
    _internal_mutable_consumable()->::PBConsumable::MergeFrom(from._internal_consumable());
  }
  if (from.iscarbonated() != 0) {
    _internal_set_iscarbonated(from._internal_iscarbonated());
  }
}

void PBDrink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBDrink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDrink::CopyFrom(const PBDrink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBDrink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDrink::IsInitialized() const {
  return true;
}

void PBDrink::InternalSwap(PBDrink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBDrink, iscarbonated_)
      + sizeof(PBDrink::iscarbonated_)
      - PROTOBUF_FIELD_OFFSET(PBDrink, consumable_)>(
          reinterpret_cast<char*>(&consumable_),
          reinterpret_cast<char*>(&other->consumable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBDrink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBElectronics::InitAsDefaultInstance() {
  ::_PBElectronics_default_instance_._instance.get_mutable()->product_ = const_cast< ::PBProduct*>(
      ::PBProduct::internal_default_instance());
}
class PBElectronics::_Internal {
 public:
  static const ::PBProduct& product(const PBElectronics* msg);
};

const ::PBProduct&
PBElectronics::_Internal::product(const PBElectronics* msg) {
  return *msg->product_;
}
PBElectronics::PBElectronics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBElectronics)
}
PBElectronics::PBElectronics(const PBElectronics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_manufacturer(),
      GetArena());
  }
  if (from._internal_has_product()) {
    product_ = new ::PBProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBElectronics)
}

void PBElectronics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBElectronics_PBLogistics_2eproto.base);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_ = nullptr;
}

PBElectronics::~PBElectronics() {
  // @@protoc_insertion_point(destructor:PBElectronics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBElectronics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete product_;
}

void PBElectronics::ArenaDtor(void* object) {
  PBElectronics* _this = reinterpret_cast< PBElectronics* >(object);
  (void)_this;
}
void PBElectronics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBElectronics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBElectronics& PBElectronics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBElectronics_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBElectronics::Clear() {
// @@protoc_insertion_point(message_clear_start:PBElectronics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBElectronics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBElectronics.manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBElectronics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBElectronics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBElectronics.manufacturer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manufacturer(), target);
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBElectronics)
  return target;
}

size_t PBElectronics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBElectronics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBElectronics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBElectronics)
  GOOGLE_DCHECK_NE(&from, this);
  const PBElectronics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBElectronics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBElectronics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBElectronics)
    MergeFrom(*source);
  }
}

void PBElectronics::MergeFrom(const PBElectronics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBElectronics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (from.has_product()) {
    _internal_mutable_product()->::PBProduct::MergeFrom(from._internal_product());
  }
}

void PBElectronics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBElectronics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBElectronics::CopyFrom(const PBElectronics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBElectronics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBElectronics::IsInitialized() const {
  return true;
}

void PBElectronics::InternalSwap(PBElectronics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(product_, other->product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBElectronics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBTech::InitAsDefaultInstance() {
  ::_PBTech_default_instance_._instance.get_mutable()->electronics_ = const_cast< ::PBElectronics*>(
      ::PBElectronics::internal_default_instance());
}
class PBTech::_Internal {
 public:
  static const ::PBElectronics& electronics(const PBTech* msg);
};

const ::PBElectronics&
PBTech::_Internal::electronics(const PBTech* msg) {
  return *msg->electronics_;
}
PBTech::PBTech(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBTech)
}
PBTech::PBTech(const PBTech& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  if (from._internal_has_electronics()) {
    electronics_ = new ::PBElectronics(*from.electronics_);
  } else {
    electronics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBTech)
}

void PBTech::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBTech_PBLogistics_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  electronics_ = nullptr;
}

PBTech::~PBTech() {
  // @@protoc_insertion_point(destructor:PBTech)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBTech::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete electronics_;
}

void PBTech::ArenaDtor(void* object) {
  PBTech* _this = reinterpret_cast< PBTech* >(object);
  (void)_this;
}
void PBTech::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBTech::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBTech& PBTech::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBTech_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBTech::Clear() {
// @@protoc_insertion_point(message_clear_start:PBTech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && electronics_ != nullptr) {
    delete electronics_;
  }
  electronics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBTech::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBTech.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBElectronics electronics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_electronics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBTech::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBTech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBTech.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // .PBElectronics electronics = 2;
  if (this->has_electronics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::electronics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBTech)
  return target;
}

size_t PBTech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBTech)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .PBElectronics electronics = 2;
  if (this->has_electronics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *electronics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBTech::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBTech)
  GOOGLE_DCHECK_NE(&from, this);
  const PBTech* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBTech>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBTech)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBTech)
    MergeFrom(*source);
  }
}

void PBTech::MergeFrom(const PBTech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBTech)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_electronics()) {
    _internal_mutable_electronics()->::PBElectronics::MergeFrom(from._internal_electronics());
  }
}

void PBTech::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBTech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTech::CopyFrom(const PBTech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBTech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTech::IsInitialized() const {
  return true;
}

void PBTech::InternalSwap(PBTech* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(electronics_, other->electronics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBTech::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBAppliance::InitAsDefaultInstance() {
  ::_PBAppliance_default_instance_._instance.get_mutable()->electronics_ = const_cast< ::PBElectronics*>(
      ::PBElectronics::internal_default_instance());
}
class PBAppliance::_Internal {
 public:
  static const ::PBElectronics& electronics(const PBAppliance* msg);
};

const ::PBElectronics&
PBAppliance::_Internal::electronics(const PBAppliance* msg) {
  return *msg->electronics_;
}
PBAppliance::PBAppliance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBAppliance)
}
PBAppliance::PBAppliance(const PBAppliance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_size().empty()) {
    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_size(),
      GetArena());
  }
  if (from._internal_has_electronics()) {
    electronics_ = new ::PBElectronics(*from.electronics_);
  } else {
    electronics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBAppliance)
}

void PBAppliance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBAppliance_PBLogistics_2eproto.base);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  electronics_ = nullptr;
}

PBAppliance::~PBAppliance() {
  // @@protoc_insertion_point(destructor:PBAppliance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBAppliance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete electronics_;
}

void PBAppliance::ArenaDtor(void* object) {
  PBAppliance* _this = reinterpret_cast< PBAppliance* >(object);
  (void)_this;
}
void PBAppliance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBAppliance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBAppliance& PBAppliance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBAppliance_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBAppliance::Clear() {
// @@protoc_insertion_point(message_clear_start:PBAppliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && electronics_ != nullptr) {
    delete electronics_;
  }
  electronics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBAppliance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBAppliance.size"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBElectronics electronics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_electronics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBAppliance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBAppliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string size = 1;
  if (this->size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBAppliance.size");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_size(), target);
  }

  // .PBElectronics electronics = 2;
  if (this->has_electronics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::electronics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBAppliance)
  return target;
}

size_t PBAppliance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBAppliance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string size = 1;
  if (this->size().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  // .PBElectronics electronics = 2;
  if (this->has_electronics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *electronics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBAppliance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBAppliance)
  GOOGLE_DCHECK_NE(&from, this);
  const PBAppliance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBAppliance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBAppliance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBAppliance)
    MergeFrom(*source);
  }
}

void PBAppliance::MergeFrom(const PBAppliance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBAppliance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size().size() > 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.has_electronics()) {
    _internal_mutable_electronics()->::PBElectronics::MergeFrom(from._internal_electronics());
  }
}

void PBAppliance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBAppliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAppliance::CopyFrom(const PBAppliance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBAppliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAppliance::IsInitialized() const {
  return true;
}

void PBAppliance::InternalSwap(PBAppliance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  size_.Swap(&other->size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(electronics_, other->electronics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBAppliance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBFurniture::InitAsDefaultInstance() {
  ::_PBFurniture_default_instance_._instance.get_mutable()->product_ = const_cast< ::PBProduct*>(
      ::PBProduct::internal_default_instance());
}
class PBFurniture::_Internal {
 public:
  static const ::PBProduct& product(const PBFurniture* msg);
};

const ::PBProduct&
PBFurniture::_Internal::product(const PBFurniture* msg) {
  return *msg->product_;
}
PBFurniture::PBFurniture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBFurniture)
}
PBFurniture::PBFurniture(const PBFurniture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_material().empty()) {
    material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material(),
      GetArena());
  }
  if (from._internal_has_product()) {
    product_ = new ::PBProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBFurniture)
}

void PBFurniture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBFurniture_PBLogistics_2eproto.base);
  material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_ = nullptr;
}

PBFurniture::~PBFurniture() {
  // @@protoc_insertion_point(destructor:PBFurniture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBFurniture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete product_;
}

void PBFurniture::ArenaDtor(void* object) {
  PBFurniture* _this = reinterpret_cast< PBFurniture* >(object);
  (void)_this;
}
void PBFurniture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBFurniture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBFurniture& PBFurniture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBFurniture_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBFurniture::Clear() {
// @@protoc_insertion_point(message_clear_start:PBFurniture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBFurniture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string material = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_material();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBFurniture.material"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBFurniture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBFurniture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string material = 1;
  if (this->material().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBFurniture.material");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_material(), target);
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBFurniture)
  return target;
}

size_t PBFurniture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBFurniture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string material = 1;
  if (this->material().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material());
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBFurniture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBFurniture)
  GOOGLE_DCHECK_NE(&from, this);
  const PBFurniture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBFurniture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBFurniture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBFurniture)
    MergeFrom(*source);
  }
}

void PBFurniture::MergeFrom(const PBFurniture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBFurniture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.material().size() > 0) {
    _internal_set_material(from._internal_material());
  }
  if (from.has_product()) {
    _internal_mutable_product()->::PBProduct::MergeFrom(from._internal_product());
  }
}

void PBFurniture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBFurniture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFurniture::CopyFrom(const PBFurniture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBFurniture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFurniture::IsInitialized() const {
  return true;
}

void PBFurniture::InternalSwap(PBFurniture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(product_, other->product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBFurniture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBDecor::InitAsDefaultInstance() {
  ::_PBDecor_default_instance_._instance.get_mutable()->furniture_ = const_cast< ::PBFurniture*>(
      ::PBFurniture::internal_default_instance());
}
class PBDecor::_Internal {
 public:
  static const ::PBFurniture& furniture(const PBDecor* msg);
};

const ::PBFurniture&
PBDecor::_Internal::furniture(const PBDecor* msg) {
  return *msg->furniture_;
}
PBDecor::PBDecor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBDecor)
}
PBDecor::PBDecor(const PBDecor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_style().empty()) {
    style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_style(),
      GetArena());
  }
  if (from._internal_has_furniture()) {
    furniture_ = new ::PBFurniture(*from.furniture_);
  } else {
    furniture_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBDecor)
}

void PBDecor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBDecor_PBLogistics_2eproto.base);
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  furniture_ = nullptr;
}

PBDecor::~PBDecor() {
  // @@protoc_insertion_point(destructor:PBDecor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBDecor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete furniture_;
}

void PBDecor::ArenaDtor(void* object) {
  PBDecor* _this = reinterpret_cast< PBDecor* >(object);
  (void)_this;
}
void PBDecor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBDecor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBDecor& PBDecor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBDecor_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBDecor::Clear() {
// @@protoc_insertion_point(message_clear_start:PBDecor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && furniture_ != nullptr) {
    delete furniture_;
  }
  furniture_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBDecor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBDecor.style"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBFurniture furniture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_furniture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBDecor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDecor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string style = 1;
  if (this->style().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_style().data(), static_cast<int>(this->_internal_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBDecor.style");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_style(), target);
  }

  // .PBFurniture furniture = 2;
  if (this->has_furniture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::furniture(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDecor)
  return target;
}

size_t PBDecor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBDecor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string style = 1;
  if (this->style().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  // .PBFurniture furniture = 2;
  if (this->has_furniture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *furniture_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBDecor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBDecor)
  GOOGLE_DCHECK_NE(&from, this);
  const PBDecor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBDecor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBDecor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBDecor)
    MergeFrom(*source);
  }
}

void PBDecor::MergeFrom(const PBDecor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBDecor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.style().size() > 0) {
    _internal_set_style(from._internal_style());
  }
  if (from.has_furniture()) {
    _internal_mutable_furniture()->::PBFurniture::MergeFrom(from._internal_furniture());
  }
}

void PBDecor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBDecor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDecor::CopyFrom(const PBDecor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBDecor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDecor::IsInitialized() const {
  return true;
}

void PBDecor::InternalSwap(PBDecor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  style_.Swap(&other->style_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(furniture_, other->furniture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBDecor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBStorage::InitAsDefaultInstance() {
  ::_PBStorage_default_instance_._instance.get_mutable()->furniture_ = const_cast< ::PBFurniture*>(
      ::PBFurniture::internal_default_instance());
}
class PBStorage::_Internal {
 public:
  static const ::PBFurniture& furniture(const PBStorage* msg);
};

const ::PBFurniture&
PBStorage::_Internal::furniture(const PBStorage* msg) {
  return *msg->furniture_;
}
PBStorage::PBStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBStorage)
}
PBStorage::PBStorage(const PBStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_furniture()) {
    furniture_ = new ::PBFurniture(*from.furniture_);
  } else {
    furniture_ = nullptr;
  }
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:PBStorage)
}

void PBStorage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBStorage_PBLogistics_2eproto.base);
  ::memset(&furniture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&furniture_)) + sizeof(capacity_));
}

PBStorage::~PBStorage() {
  // @@protoc_insertion_point(destructor:PBStorage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete furniture_;
}

void PBStorage::ArenaDtor(void* object) {
  PBStorage* _this = reinterpret_cast< PBStorage* >(object);
  (void)_this;
}
void PBStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBStorage& PBStorage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBStorage_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:PBStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && furniture_ != nullptr) {
    delete furniture_;
  }
  furniture_ = nullptr;
  capacity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBFurniture furniture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_furniture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_capacity(), target);
  }

  // .PBFurniture furniture = 2;
  if (this->has_furniture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::furniture(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBStorage)
  return target;
}

size_t PBStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBStorage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBFurniture furniture = 2;
  if (this->has_furniture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *furniture_);
  }

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBStorage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const PBStorage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBStorage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBStorage)
    MergeFrom(*source);
  }
}

void PBStorage::MergeFrom(const PBStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_furniture()) {
    _internal_mutable_furniture()->::PBFurniture::MergeFrom(from._internal_furniture());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void PBStorage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStorage::CopyFrom(const PBStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStorage::IsInitialized() const {
  return true;
}

void PBStorage::InternalSwap(PBStorage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBStorage, capacity_)
      + sizeof(PBStorage::capacity_)
      - PROTOBUF_FIELD_OFFSET(PBStorage, furniture_)>(
          reinterpret_cast<char*>(&furniture_),
          reinterpret_cast<char*>(&other->furniture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBStorage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBGames::InitAsDefaultInstance() {
  ::_PBGames_default_instance_._instance.get_mutable()->product_ = const_cast< ::PBProduct*>(
      ::PBProduct::internal_default_instance());
}
class PBGames::_Internal {
 public:
  static const ::PBProduct& product(const PBGames* msg);
};

const ::PBProduct&
PBGames::_Internal::product(const PBGames* msg) {
  return *msg->product_;
}
PBGames::PBGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBGames)
}
PBGames::PBGames(const PBGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  genre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_genre().empty()) {
    genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_genre(),
      GetArena());
  }
  if (from._internal_has_product()) {
    product_ = new ::PBProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBGames)
}

void PBGames::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBGames_PBLogistics_2eproto.base);
  genre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_ = nullptr;
}

PBGames::~PBGames() {
  // @@protoc_insertion_point(destructor:PBGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  genre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete product_;
}

void PBGames::ArenaDtor(void* object) {
  PBGames* _this = reinterpret_cast< PBGames* >(object);
  (void)_this;
}
void PBGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBGames& PBGames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBGames_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBGames::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genre_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string genre = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_genre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBGames.genre"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string genre = 1;
  if (this->genre().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_genre().data(), static_cast<int>(this->_internal_genre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBGames.genre");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_genre(), target);
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGames)
  return target;
}

size_t PBGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string genre = 1;
  if (this->genre().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_genre());
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGames)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGames)
    MergeFrom(*source);
  }
}

void PBGames::MergeFrom(const PBGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.genre().size() > 0) {
    _internal_set_genre(from._internal_genre());
  }
  if (from.has_product()) {
    _internal_mutable_product()->::PBProduct::MergeFrom(from._internal_product());
  }
}

void PBGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGames::CopyFrom(const PBGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGames::IsInitialized() const {
  return true;
}

void PBGames::InternalSwap(PBGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  genre_.Swap(&other->genre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(product_, other->product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBDigital::InitAsDefaultInstance() {
  ::_PBDigital_default_instance_._instance.get_mutable()->games_ = const_cast< ::PBGames*>(
      ::PBGames::internal_default_instance());
}
class PBDigital::_Internal {
 public:
  static const ::PBGames& games(const PBDigital* msg);
};

const ::PBGames&
PBDigital::_Internal::games(const PBDigital* msg) {
  return *msg->games_;
}
PBDigital::PBDigital(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBDigital)
}
PBDigital::PBDigital(const PBDigital& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  developer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_developer().empty()) {
    developer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_developer(),
      GetArena());
  }
  if (from._internal_has_games()) {
    games_ = new ::PBGames(*from.games_);
  } else {
    games_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBDigital)
}

void PBDigital::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBDigital_PBLogistics_2eproto.base);
  developer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  games_ = nullptr;
}

PBDigital::~PBDigital() {
  // @@protoc_insertion_point(destructor:PBDigital)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBDigital::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  developer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete games_;
}

void PBDigital::ArenaDtor(void* object) {
  PBDigital* _this = reinterpret_cast< PBDigital* >(object);
  (void)_this;
}
void PBDigital::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBDigital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBDigital& PBDigital::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBDigital_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBDigital::Clear() {
// @@protoc_insertion_point(message_clear_start:PBDigital)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  developer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && games_ != nullptr) {
    delete games_;
  }
  games_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBDigital::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string developer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_developer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBDigital.developer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBGames games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_games(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBDigital::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDigital)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string developer = 1;
  if (this->developer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_developer().data(), static_cast<int>(this->_internal_developer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBDigital.developer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_developer(), target);
  }

  // .PBGames games = 2;
  if (this->has_games()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::games(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDigital)
  return target;
}

size_t PBDigital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBDigital)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string developer = 1;
  if (this->developer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_developer());
  }

  // .PBGames games = 2;
  if (this->has_games()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *games_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBDigital::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBDigital)
  GOOGLE_DCHECK_NE(&from, this);
  const PBDigital* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBDigital>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBDigital)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBDigital)
    MergeFrom(*source);
  }
}

void PBDigital::MergeFrom(const PBDigital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBDigital)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.developer().size() > 0) {
    _internal_set_developer(from._internal_developer());
  }
  if (from.has_games()) {
    _internal_mutable_games()->::PBGames::MergeFrom(from._internal_games());
  }
}

void PBDigital::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBDigital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDigital::CopyFrom(const PBDigital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBDigital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDigital::IsInitialized() const {
  return true;
}

void PBDigital::InternalSwap(PBDigital* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  developer_.Swap(&other->developer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(games_, other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBDigital::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBPhysical::InitAsDefaultInstance() {
  ::_PBPhysical_default_instance_._instance.get_mutable()->games_ = const_cast< ::PBGames*>(
      ::PBGames::internal_default_instance());
}
class PBPhysical::_Internal {
 public:
  static const ::PBGames& games(const PBPhysical* msg);
};

const ::PBGames&
PBPhysical::_Internal::games(const PBPhysical* msg) {
  return *msg->games_;
}
PBPhysical::PBPhysical(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBPhysical)
}
PBPhysical::PBPhysical(const PBPhysical& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_games()) {
    games_ = new ::PBGames(*from.games_);
  } else {
    games_ = nullptr;
  }
  numberofplayers_ = from.numberofplayers_;
  // @@protoc_insertion_point(copy_constructor:PBPhysical)
}

void PBPhysical::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBPhysical_PBLogistics_2eproto.base);
  ::memset(&games_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofplayers_) -
      reinterpret_cast<char*>(&games_)) + sizeof(numberofplayers_));
}

PBPhysical::~PBPhysical() {
  // @@protoc_insertion_point(destructor:PBPhysical)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBPhysical::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete games_;
}

void PBPhysical::ArenaDtor(void* object) {
  PBPhysical* _this = reinterpret_cast< PBPhysical* >(object);
  (void)_this;
}
void PBPhysical::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBPhysical::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBPhysical& PBPhysical::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBPhysical_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBPhysical::Clear() {
// @@protoc_insertion_point(message_clear_start:PBPhysical)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && games_ != nullptr) {
    delete games_;
  }
  games_ = nullptr;
  numberofplayers_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBPhysical::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 numberOfPlayers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          numberofplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBGames games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_games(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBPhysical::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBPhysical)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 numberOfPlayers = 1;
  if (this->numberofplayers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_numberofplayers(), target);
  }

  // .PBGames games = 2;
  if (this->has_games()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::games(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBPhysical)
  return target;
}

size_t PBPhysical::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBPhysical)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBGames games = 2;
  if (this->has_games()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *games_);
  }

  // int32 numberOfPlayers = 1;
  if (this->numberofplayers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofplayers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBPhysical::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBPhysical)
  GOOGLE_DCHECK_NE(&from, this);
  const PBPhysical* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBPhysical>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBPhysical)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBPhysical)
    MergeFrom(*source);
  }
}

void PBPhysical::MergeFrom(const PBPhysical& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBPhysical)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_games()) {
    _internal_mutable_games()->::PBGames::MergeFrom(from._internal_games());
  }
  if (from.numberofplayers() != 0) {
    _internal_set_numberofplayers(from._internal_numberofplayers());
  }
}

void PBPhysical::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBPhysical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPhysical::CopyFrom(const PBPhysical& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBPhysical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPhysical::IsInitialized() const {
  return true;
}

void PBPhysical::InternalSwap(PBPhysical* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBPhysical, numberofplayers_)
      + sizeof(PBPhysical::numberofplayers_)
      - PROTOBUF_FIELD_OFFSET(PBPhysical, games_)>(
          reinterpret_cast<char*>(&games_),
          reinterpret_cast<char*>(&other->games_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBPhysical::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBFlora::InitAsDefaultInstance() {
  ::_PBFlora_default_instance_._instance.get_mutable()->product_ = const_cast< ::PBProduct*>(
      ::PBProduct::internal_default_instance());
}
class PBFlora::_Internal {
 public:
  static const ::PBProduct& product(const PBFlora* msg);
};

const ::PBProduct&
PBFlora::_Internal::product(const PBFlora* msg) {
  return *msg->product_;
}
PBFlora::PBFlora(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBFlora)
}
PBFlora::PBFlora(const PBFlora& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_product()) {
    product_ = new ::PBProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  iscultivated_ = from.iscultivated_;
  // @@protoc_insertion_point(copy_constructor:PBFlora)
}

void PBFlora::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBFlora_PBLogistics_2eproto.base);
  ::memset(&product_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscultivated_) -
      reinterpret_cast<char*>(&product_)) + sizeof(iscultivated_));
}

PBFlora::~PBFlora() {
  // @@protoc_insertion_point(destructor:PBFlora)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBFlora::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete product_;
}

void PBFlora::ArenaDtor(void* object) {
  PBFlora* _this = reinterpret_cast< PBFlora* >(object);
  (void)_this;
}
void PBFlora::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBFlora::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBFlora& PBFlora::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBFlora_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBFlora::Clear() {
// @@protoc_insertion_point(message_clear_start:PBFlora)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  iscultivated_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBFlora::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool iscultivated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iscultivated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBFlora::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBFlora)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool iscultivated = 1;
  if (this->iscultivated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iscultivated(), target);
  }

  // .PBProduct product = 2;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBFlora)
  return target;
}

size_t PBFlora::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBFlora)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBProduct product = 2;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  // bool iscultivated = 1;
  if (this->iscultivated() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBFlora::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBFlora)
  GOOGLE_DCHECK_NE(&from, this);
  const PBFlora* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBFlora>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBFlora)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBFlora)
    MergeFrom(*source);
  }
}

void PBFlora::MergeFrom(const PBFlora& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBFlora)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_product()) {
    _internal_mutable_product()->::PBProduct::MergeFrom(from._internal_product());
  }
  if (from.iscultivated() != 0) {
    _internal_set_iscultivated(from._internal_iscultivated());
  }
}

void PBFlora::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBFlora)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFlora::CopyFrom(const PBFlora& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBFlora)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFlora::IsInitialized() const {
  return true;
}

void PBFlora::InternalSwap(PBFlora* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBFlora, iscultivated_)
      + sizeof(PBFlora::iscultivated_)
      - PROTOBUF_FIELD_OFFSET(PBFlora, product_)>(
          reinterpret_cast<char*>(&product_),
          reinterpret_cast<char*>(&other->product_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBFlora::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBPlants::InitAsDefaultInstance() {
  ::_PBPlants_default_instance_._instance.get_mutable()->flora_ = const_cast< ::PBFlora*>(
      ::PBFlora::internal_default_instance());
}
class PBPlants::_Internal {
 public:
  static const ::PBFlora& flora(const PBPlants* msg);
};

const ::PBFlora&
PBPlants::_Internal::flora(const PBPlants* msg) {
  return *msg->flora_;
}
PBPlants::PBPlants(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBPlants)
}
PBPlants::PBPlants(const PBPlants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flora()) {
    flora_ = new ::PBFlora(*from.flora_);
  } else {
    flora_ = nullptr;
  }
  bearsfruit_ = from.bearsfruit_;
  // @@protoc_insertion_point(copy_constructor:PBPlants)
}

void PBPlants::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBPlants_PBLogistics_2eproto.base);
  ::memset(&flora_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bearsfruit_) -
      reinterpret_cast<char*>(&flora_)) + sizeof(bearsfruit_));
}

PBPlants::~PBPlants() {
  // @@protoc_insertion_point(destructor:PBPlants)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBPlants::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flora_;
}

void PBPlants::ArenaDtor(void* object) {
  PBPlants* _this = reinterpret_cast< PBPlants* >(object);
  (void)_this;
}
void PBPlants::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBPlants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBPlants& PBPlants::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBPlants_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBPlants::Clear() {
// @@protoc_insertion_point(message_clear_start:PBPlants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flora_ != nullptr) {
    delete flora_;
  }
  flora_ = nullptr;
  bearsfruit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBPlants::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool bearsFruit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bearsfruit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBFlora flora = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flora(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBPlants::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBPlants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bearsFruit = 1;
  if (this->bearsfruit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bearsfruit(), target);
  }

  // .PBFlora flora = 2;
  if (this->has_flora()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flora(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBPlants)
  return target;
}

size_t PBPlants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBPlants)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBFlora flora = 2;
  if (this->has_flora()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flora_);
  }

  // bool bearsFruit = 1;
  if (this->bearsfruit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBPlants::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBPlants)
  GOOGLE_DCHECK_NE(&from, this);
  const PBPlants* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBPlants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBPlants)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBPlants)
    MergeFrom(*source);
  }
}

void PBPlants::MergeFrom(const PBPlants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBPlants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flora()) {
    _internal_mutable_flora()->::PBFlora::MergeFrom(from._internal_flora());
  }
  if (from.bearsfruit() != 0) {
    _internal_set_bearsfruit(from._internal_bearsfruit());
  }
}

void PBPlants::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBPlants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlants::CopyFrom(const PBPlants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBPlants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlants::IsInitialized() const {
  return true;
}

void PBPlants::InternalSwap(PBPlants* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBPlants, bearsfruit_)
      + sizeof(PBPlants::bearsfruit_)
      - PROTOBUF_FIELD_OFFSET(PBPlants, flora_)>(
          reinterpret_cast<char*>(&flora_),
          reinterpret_cast<char*>(&other->flora_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBPlants::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBSeeds::InitAsDefaultInstance() {
  ::_PBSeeds_default_instance_._instance.get_mutable()->flora_ = const_cast< ::PBFlora*>(
      ::PBFlora::internal_default_instance());
}
class PBSeeds::_Internal {
 public:
  static const ::PBFlora& flora(const PBSeeds* msg);
};

const ::PBFlora&
PBSeeds::_Internal::flora(const PBSeeds* msg) {
  return *msg->flora_;
}
PBSeeds::PBSeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBSeeds)
}
PBSeeds::PBSeeds(const PBSeeds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flora()) {
    flora_ = new ::PBFlora(*from.flora_);
  } else {
    flora_ = nullptr;
  }
  expirationdays_ = from.expirationdays_;
  // @@protoc_insertion_point(copy_constructor:PBSeeds)
}

void PBSeeds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBSeeds_PBLogistics_2eproto.base);
  ::memset(&flora_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expirationdays_) -
      reinterpret_cast<char*>(&flora_)) + sizeof(expirationdays_));
}

PBSeeds::~PBSeeds() {
  // @@protoc_insertion_point(destructor:PBSeeds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBSeeds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flora_;
}

void PBSeeds::ArenaDtor(void* object) {
  PBSeeds* _this = reinterpret_cast< PBSeeds* >(object);
  (void)_this;
}
void PBSeeds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBSeeds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBSeeds& PBSeeds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBSeeds_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBSeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:PBSeeds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flora_ != nullptr) {
    delete flora_;
  }
  flora_ = nullptr;
  expirationdays_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBSeeds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 expirationDays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          expirationdays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBFlora flora = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flora(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBSeeds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBSeeds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 expirationDays = 1;
  if (this->expirationdays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_expirationdays(), target);
  }

  // .PBFlora flora = 2;
  if (this->has_flora()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flora(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBSeeds)
  return target;
}

size_t PBSeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBSeeds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBFlora flora = 2;
  if (this->has_flora()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flora_);
  }

  // int32 expirationDays = 1;
  if (this->expirationdays() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expirationdays());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBSeeds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBSeeds)
  GOOGLE_DCHECK_NE(&from, this);
  const PBSeeds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBSeeds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBSeeds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBSeeds)
    MergeFrom(*source);
  }
}

void PBSeeds::MergeFrom(const PBSeeds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBSeeds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flora()) {
    _internal_mutable_flora()->::PBFlora::MergeFrom(from._internal_flora());
  }
  if (from.expirationdays() != 0) {
    _internal_set_expirationdays(from._internal_expirationdays());
  }
}

void PBSeeds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBSeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSeeds::CopyFrom(const PBSeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBSeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSeeds::IsInitialized() const {
  return true;
}

void PBSeeds::InternalSwap(PBSeeds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBSeeds, expirationdays_)
      + sizeof(PBSeeds::expirationdays_)
      - PROTOBUF_FIELD_OFFSET(PBSeeds, flora_)>(
          reinterpret_cast<char*>(&flora_),
          reinterpret_cast<char*>(&other->flora_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBSeeds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBStockItem::InitAsDefaultInstance() {
  ::_PBStockItem_default_instance_.accessory_ = const_cast< ::PBAccessory*>(
      ::PBAccessory::internal_default_instance());
  ::_PBStockItem_default_instance_.clothing_ = const_cast< ::PBClothing*>(
      ::PBClothing::internal_default_instance());
  ::_PBStockItem_default_instance_.food_ = const_cast< ::PBFood*>(
      ::PBFood::internal_default_instance());
  ::_PBStockItem_default_instance_.drink_ = const_cast< ::PBDrink*>(
      ::PBDrink::internal_default_instance());
  ::_PBStockItem_default_instance_.appliance_ = const_cast< ::PBAppliance*>(
      ::PBAppliance::internal_default_instance());
  ::_PBStockItem_default_instance_.tech_ = const_cast< ::PBTech*>(
      ::PBTech::internal_default_instance());
  ::_PBStockItem_default_instance_.decor_ = const_cast< ::PBDecor*>(
      ::PBDecor::internal_default_instance());
  ::_PBStockItem_default_instance_.storage_ = const_cast< ::PBStorage*>(
      ::PBStorage::internal_default_instance());
  ::_PBStockItem_default_instance_.digital_ = const_cast< ::PBDigital*>(
      ::PBDigital::internal_default_instance());
  ::_PBStockItem_default_instance_.physical_ = const_cast< ::PBPhysical*>(
      ::PBPhysical::internal_default_instance());
  ::_PBStockItem_default_instance_.plants_ = const_cast< ::PBPlants*>(
      ::PBPlants::internal_default_instance());
  ::_PBStockItem_default_instance_.seeds_ = const_cast< ::PBSeeds*>(
      ::PBSeeds::internal_default_instance());
}
class PBStockItem::_Internal {
 public:
  static const ::PBAccessory& accessory(const PBStockItem* msg);
  static const ::PBClothing& clothing(const PBStockItem* msg);
  static const ::PBFood& food(const PBStockItem* msg);
  static const ::PBDrink& drink(const PBStockItem* msg);
  static const ::PBAppliance& appliance(const PBStockItem* msg);
  static const ::PBTech& tech(const PBStockItem* msg);
  static const ::PBDecor& decor(const PBStockItem* msg);
  static const ::PBStorage& storage(const PBStockItem* msg);
  static const ::PBDigital& digital(const PBStockItem* msg);
  static const ::PBPhysical& physical(const PBStockItem* msg);
  static const ::PBPlants& plants(const PBStockItem* msg);
  static const ::PBSeeds& seeds(const PBStockItem* msg);
};

const ::PBAccessory&
PBStockItem::_Internal::accessory(const PBStockItem* msg) {
  return *msg->product_type_.accessory_;
}
const ::PBClothing&
PBStockItem::_Internal::clothing(const PBStockItem* msg) {
  return *msg->product_type_.clothing_;
}
const ::PBFood&
PBStockItem::_Internal::food(const PBStockItem* msg) {
  return *msg->product_type_.food_;
}
const ::PBDrink&
PBStockItem::_Internal::drink(const PBStockItem* msg) {
  return *msg->product_type_.drink_;
}
const ::PBAppliance&
PBStockItem::_Internal::appliance(const PBStockItem* msg) {
  return *msg->product_type_.appliance_;
}
const ::PBTech&
PBStockItem::_Internal::tech(const PBStockItem* msg) {
  return *msg->product_type_.tech_;
}
const ::PBDecor&
PBStockItem::_Internal::decor(const PBStockItem* msg) {
  return *msg->product_type_.decor_;
}
const ::PBStorage&
PBStockItem::_Internal::storage(const PBStockItem* msg) {
  return *msg->product_type_.storage_;
}
const ::PBDigital&
PBStockItem::_Internal::digital(const PBStockItem* msg) {
  return *msg->product_type_.digital_;
}
const ::PBPhysical&
PBStockItem::_Internal::physical(const PBStockItem* msg) {
  return *msg->product_type_.physical_;
}
const ::PBPlants&
PBStockItem::_Internal::plants(const PBStockItem* msg) {
  return *msg->product_type_.plants_;
}
const ::PBSeeds&
PBStockItem::_Internal::seeds(const PBStockItem* msg) {
  return *msg->product_type_.seeds_;
}
void PBStockItem::set_allocated_accessory(::PBAccessory* accessory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (accessory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accessory);
    if (message_arena != submessage_arena) {
      accessory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessory, submessage_arena);
    }
    set_has_accessory();
    product_type_.accessory_ = accessory;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.accessory)
}
void PBStockItem::set_allocated_clothing(::PBClothing* clothing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (clothing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clothing);
    if (message_arena != submessage_arena) {
      clothing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clothing, submessage_arena);
    }
    set_has_clothing();
    product_type_.clothing_ = clothing;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.clothing)
}
void PBStockItem::set_allocated_food(::PBFood* food) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (food) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(food);
    if (message_arena != submessage_arena) {
      food = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, food, submessage_arena);
    }
    set_has_food();
    product_type_.food_ = food;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.food)
}
void PBStockItem::set_allocated_drink(::PBDrink* drink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (drink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drink);
    if (message_arena != submessage_arena) {
      drink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drink, submessage_arena);
    }
    set_has_drink();
    product_type_.drink_ = drink;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.drink)
}
void PBStockItem::set_allocated_appliance(::PBAppliance* appliance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (appliance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appliance);
    if (message_arena != submessage_arena) {
      appliance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appliance, submessage_arena);
    }
    set_has_appliance();
    product_type_.appliance_ = appliance;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.appliance)
}
void PBStockItem::set_allocated_tech(::PBTech* tech) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (tech) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tech);
    if (message_arena != submessage_arena) {
      tech = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tech, submessage_arena);
    }
    set_has_tech();
    product_type_.tech_ = tech;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.tech)
}
void PBStockItem::set_allocated_decor(::PBDecor* decor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (decor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decor);
    if (message_arena != submessage_arena) {
      decor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decor, submessage_arena);
    }
    set_has_decor();
    product_type_.decor_ = decor;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.decor)
}
void PBStockItem::set_allocated_storage(::PBStorage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    set_has_storage();
    product_type_.storage_ = storage;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.storage)
}
void PBStockItem::set_allocated_digital(::PBDigital* digital) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (digital) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digital);
    if (message_arena != submessage_arena) {
      digital = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digital, submessage_arena);
    }
    set_has_digital();
    product_type_.digital_ = digital;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.digital)
}
void PBStockItem::set_allocated_physical(::PBPhysical* physical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (physical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(physical);
    if (message_arena != submessage_arena) {
      physical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physical, submessage_arena);
    }
    set_has_physical();
    product_type_.physical_ = physical;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.physical)
}
void PBStockItem::set_allocated_plants(::PBPlants* plants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (plants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plants);
    if (message_arena != submessage_arena) {
      plants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plants, submessage_arena);
    }
    set_has_plants();
    product_type_.plants_ = plants;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.plants)
}
void PBStockItem::set_allocated_seeds(::PBSeeds* seeds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (seeds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seeds);
    if (message_arena != submessage_arena) {
      seeds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seeds, submessage_arena);
    }
    set_has_seeds();
    product_type_.seeds_ = seeds;
  }
  // @@protoc_insertion_point(field_set_allocated:PBStockItem.seeds)
}
PBStockItem::PBStockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBStockItem)
}
PBStockItem::PBStockItem(const PBStockItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quantity_ = from.quantity_;
  clear_has_product_type();
  switch (from.product_type_case()) {
    case kAccessory: {
      _internal_mutable_accessory()->::PBAccessory::MergeFrom(from._internal_accessory());
      break;
    }
    case kClothing: {
      _internal_mutable_clothing()->::PBClothing::MergeFrom(from._internal_clothing());
      break;
    }
    case kFood: {
      _internal_mutable_food()->::PBFood::MergeFrom(from._internal_food());
      break;
    }
    case kDrink: {
      _internal_mutable_drink()->::PBDrink::MergeFrom(from._internal_drink());
      break;
    }
    case kAppliance: {
      _internal_mutable_appliance()->::PBAppliance::MergeFrom(from._internal_appliance());
      break;
    }
    case kTech: {
      _internal_mutable_tech()->::PBTech::MergeFrom(from._internal_tech());
      break;
    }
    case kDecor: {
      _internal_mutable_decor()->::PBDecor::MergeFrom(from._internal_decor());
      break;
    }
    case kStorage: {
      _internal_mutable_storage()->::PBStorage::MergeFrom(from._internal_storage());
      break;
    }
    case kDigital: {
      _internal_mutable_digital()->::PBDigital::MergeFrom(from._internal_digital());
      break;
    }
    case kPhysical: {
      _internal_mutable_physical()->::PBPhysical::MergeFrom(from._internal_physical());
      break;
    }
    case kPlants: {
      _internal_mutable_plants()->::PBPlants::MergeFrom(from._internal_plants());
      break;
    }
    case kSeeds: {
      _internal_mutable_seeds()->::PBSeeds::MergeFrom(from._internal_seeds());
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PBStockItem)
}

void PBStockItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBStockItem_PBLogistics_2eproto.base);
  quantity_ = 0;
  clear_has_product_type();
}

PBStockItem::~PBStockItem() {
  // @@protoc_insertion_point(destructor:PBStockItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBStockItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_product_type()) {
    clear_product_type();
  }
}

void PBStockItem::ArenaDtor(void* object) {
  PBStockItem* _this = reinterpret_cast< PBStockItem* >(object);
  (void)_this;
}
void PBStockItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBStockItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBStockItem& PBStockItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBStockItem_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBStockItem::clear_product_type() {
// @@protoc_insertion_point(one_of_clear_start:PBStockItem)
  switch (product_type_case()) {
    case kAccessory: {
      if (GetArena() == nullptr) {
        delete product_type_.accessory_;
      }
      break;
    }
    case kClothing: {
      if (GetArena() == nullptr) {
        delete product_type_.clothing_;
      }
      break;
    }
    case kFood: {
      if (GetArena() == nullptr) {
        delete product_type_.food_;
      }
      break;
    }
    case kDrink: {
      if (GetArena() == nullptr) {
        delete product_type_.drink_;
      }
      break;
    }
    case kAppliance: {
      if (GetArena() == nullptr) {
        delete product_type_.appliance_;
      }
      break;
    }
    case kTech: {
      if (GetArena() == nullptr) {
        delete product_type_.tech_;
      }
      break;
    }
    case kDecor: {
      if (GetArena() == nullptr) {
        delete product_type_.decor_;
      }
      break;
    }
    case kStorage: {
      if (GetArena() == nullptr) {
        delete product_type_.storage_;
      }
      break;
    }
    case kDigital: {
      if (GetArena() == nullptr) {
        delete product_type_.digital_;
      }
      break;
    }
    case kPhysical: {
      if (GetArena() == nullptr) {
        delete product_type_.physical_;
      }
      break;
    }
    case kPlants: {
      if (GetArena() == nullptr) {
        delete product_type_.plants_;
      }
      break;
    }
    case kSeeds: {
      if (GetArena() == nullptr) {
        delete product_type_.seeds_;
      }
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRODUCT_TYPE_NOT_SET;
}


void PBStockItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PBStockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantity_ = 0;
  clear_product_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBStockItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 quantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBAccessory accessory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accessory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBClothing clothing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clothing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBFood food = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_food(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBDrink drink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBAppliance appliance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_appliance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBTech tech = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tech(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBDecor decor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_decor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBStorage storage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBDigital digital = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_digital(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBPhysical physical = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBPlants plants = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_plants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBSeeds seeds = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_seeds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBStockItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBStockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 quantity = 1;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_quantity(), target);
  }

  // .PBAccessory accessory = 2;
  if (_internal_has_accessory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::accessory(this), target, stream);
  }

  // .PBClothing clothing = 3;
  if (_internal_has_clothing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::clothing(this), target, stream);
  }

  // .PBFood food = 4;
  if (_internal_has_food()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::food(this), target, stream);
  }

  // .PBDrink drink = 5;
  if (_internal_has_drink()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::drink(this), target, stream);
  }

  // .PBAppliance appliance = 6;
  if (_internal_has_appliance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::appliance(this), target, stream);
  }

  // .PBTech tech = 7;
  if (_internal_has_tech()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tech(this), target, stream);
  }

  // .PBDecor decor = 8;
  if (_internal_has_decor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::decor(this), target, stream);
  }

  // .PBStorage storage = 9;
  if (_internal_has_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::storage(this), target, stream);
  }

  // .PBDigital digital = 10;
  if (_internal_has_digital()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::digital(this), target, stream);
  }

  // .PBPhysical physical = 11;
  if (_internal_has_physical()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::physical(this), target, stream);
  }

  // .PBPlants plants = 12;
  if (_internal_has_plants()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::plants(this), target, stream);
  }

  // .PBSeeds seeds = 13;
  if (_internal_has_seeds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::seeds(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBStockItem)
  return target;
}

size_t PBStockItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBStockItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 quantity = 1;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  switch (product_type_case()) {
    // .PBAccessory accessory = 2;
    case kAccessory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.accessory_);
      break;
    }
    // .PBClothing clothing = 3;
    case kClothing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.clothing_);
      break;
    }
    // .PBFood food = 4;
    case kFood: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.food_);
      break;
    }
    // .PBDrink drink = 5;
    case kDrink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.drink_);
      break;
    }
    // .PBAppliance appliance = 6;
    case kAppliance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.appliance_);
      break;
    }
    // .PBTech tech = 7;
    case kTech: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.tech_);
      break;
    }
    // .PBDecor decor = 8;
    case kDecor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.decor_);
      break;
    }
    // .PBStorage storage = 9;
    case kStorage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.storage_);
      break;
    }
    // .PBDigital digital = 10;
    case kDigital: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.digital_);
      break;
    }
    // .PBPhysical physical = 11;
    case kPhysical: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.physical_);
      break;
    }
    // .PBPlants plants = 12;
    case kPlants: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.plants_);
      break;
    }
    // .PBSeeds seeds = 13;
    case kSeeds: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.seeds_);
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBStockItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBStockItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PBStockItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBStockItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBStockItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBStockItem)
    MergeFrom(*source);
  }
}

void PBStockItem::MergeFrom(const PBStockItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBStockItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  switch (from.product_type_case()) {
    case kAccessory: {
      _internal_mutable_accessory()->::PBAccessory::MergeFrom(from._internal_accessory());
      break;
    }
    case kClothing: {
      _internal_mutable_clothing()->::PBClothing::MergeFrom(from._internal_clothing());
      break;
    }
    case kFood: {
      _internal_mutable_food()->::PBFood::MergeFrom(from._internal_food());
      break;
    }
    case kDrink: {
      _internal_mutable_drink()->::PBDrink::MergeFrom(from._internal_drink());
      break;
    }
    case kAppliance: {
      _internal_mutable_appliance()->::PBAppliance::MergeFrom(from._internal_appliance());
      break;
    }
    case kTech: {
      _internal_mutable_tech()->::PBTech::MergeFrom(from._internal_tech());
      break;
    }
    case kDecor: {
      _internal_mutable_decor()->::PBDecor::MergeFrom(from._internal_decor());
      break;
    }
    case kStorage: {
      _internal_mutable_storage()->::PBStorage::MergeFrom(from._internal_storage());
      break;
    }
    case kDigital: {
      _internal_mutable_digital()->::PBDigital::MergeFrom(from._internal_digital());
      break;
    }
    case kPhysical: {
      _internal_mutable_physical()->::PBPhysical::MergeFrom(from._internal_physical());
      break;
    }
    case kPlants: {
      _internal_mutable_plants()->::PBPlants::MergeFrom(from._internal_plants());
      break;
    }
    case kSeeds: {
      _internal_mutable_seeds()->::PBSeeds::MergeFrom(from._internal_seeds());
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
}

void PBStockItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBStockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStockItem::CopyFrom(const PBStockItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBStockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStockItem::IsInitialized() const {
  return true;
}

void PBStockItem::InternalSwap(PBStockItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(quantity_, other->quantity_);
  swap(product_type_, other->product_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBStockItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBStock::InitAsDefaultInstance() {
}
class PBStock::_Internal {
 public:
};

PBStock::PBStock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stock_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBStock)
}
PBStock::PBStock(const PBStock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stock_(from.stock_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PBStock)
}

void PBStock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBStock_PBLogistics_2eproto.base);
}

PBStock::~PBStock() {
  // @@protoc_insertion_point(destructor:PBStock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBStock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBStock::ArenaDtor(void* object) {
  PBStock* _this = reinterpret_cast< PBStock* >(object);
  (void)_this;
}
void PBStock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBStock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBStock& PBStock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBStock_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBStock::Clear() {
// @@protoc_insertion_point(message_clear_start:PBStock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stock_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBStock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PBStockItem stock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBStock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBStock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PBStockItem stock = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stock_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stock(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBStock)
  return target;
}

size_t PBStock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBStock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBStockItem stock = 1;
  total_size += 1UL * this->_internal_stock_size();
  for (const auto& msg : this->stock_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBStock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBStock)
  GOOGLE_DCHECK_NE(&from, this);
  const PBStock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBStock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBStock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBStock)
    MergeFrom(*source);
  }
}

void PBStock::MergeFrom(const PBStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBStock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stock_.MergeFrom(from.stock_);
}

void PBStock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStock::CopyFrom(const PBStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStock::IsInitialized() const {
  return true;
}

void PBStock::InternalSwap(PBStock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stock_.InternalSwap(&other->stock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBStock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBTransport::InitAsDefaultInstance() {
}
class PBTransport::_Internal {
 public:
};

PBTransport::PBTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBTransport)
}
PBTransport::PBTransport(const PBTransport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route().empty()) {
    route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_route(),
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&costpermeter_) -
    reinterpret_cast<char*>(&code_)) + sizeof(costpermeter_));
  // @@protoc_insertion_point(copy_constructor:PBTransport)
}

void PBTransport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBTransport_PBLogistics_2eproto.base);
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costpermeter_) -
      reinterpret_cast<char*>(&code_)) + sizeof(costpermeter_));
}

PBTransport::~PBTransport() {
  // @@protoc_insertion_point(destructor:PBTransport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBTransport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  route_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PBTransport::ArenaDtor(void* object) {
  PBTransport* _this = reinterpret_cast< PBTransport* >(object);
  (void)_this;
}
void PBTransport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBTransport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBTransport& PBTransport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBTransport_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBTransport::Clear() {
// @@protoc_insertion_point(message_clear_start:PBTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costpermeter_) -
      reinterpret_cast<char*>(&code_)) + sizeof(costpermeter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBTransport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float costPerMeter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          costpermeter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string route = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_route();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBTransport.route"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBTransport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // float speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed(), target);
  }

  // float costPerMeter = 3;
  if (!(this->costpermeter() <= 0 && this->costpermeter() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_costpermeter(), target);
  }

  // string route = 4;
  if (this->route().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBTransport.route");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_route(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBTransport)
  return target;
}

size_t PBTransport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBTransport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route = 4;
  if (this->route().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // float speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float costPerMeter = 3;
  if (!(this->costpermeter() <= 0 && this->costpermeter() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBTransport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBTransport)
  GOOGLE_DCHECK_NE(&from, this);
  const PBTransport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBTransport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBTransport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBTransport)
    MergeFrom(*source);
  }
}

void PBTransport::MergeFrom(const PBTransport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBTransport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route().size() > 0) {
    _internal_set_route(from._internal_route());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.costpermeter() <= 0 && from.costpermeter() >= 0)) {
    _internal_set_costpermeter(from._internal_costpermeter());
  }
}

void PBTransport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTransport::CopyFrom(const PBTransport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTransport::IsInitialized() const {
  return true;
}

void PBTransport::InternalSwap(PBTransport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  route_.Swap(&other->route_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBTransport, costpermeter_)
      + sizeof(PBTransport::costpermeter_)
      - PROTOBUF_FIELD_OFFSET(PBTransport, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBTransport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBAirTransport::InitAsDefaultInstance() {
  ::_PBAirTransport_default_instance_._instance.get_mutable()->transport_ = const_cast< ::PBTransport*>(
      ::PBTransport::internal_default_instance());
}
class PBAirTransport::_Internal {
 public:
  static const ::PBTransport& transport(const PBAirTransport* msg);
};

const ::PBTransport&
PBAirTransport::_Internal::transport(const PBAirTransport* msg) {
  return *msg->transport_;
}
PBAirTransport::PBAirTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBAirTransport)
}
PBAirTransport::PBAirTransport(const PBAirTransport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model(),
      GetArena());
  }
  if (from._internal_has_transport()) {
    transport_ = new ::PBTransport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBAirTransport)
}

void PBAirTransport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBAirTransport_PBLogistics_2eproto.base);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_ = nullptr;
}

PBAirTransport::~PBAirTransport() {
  // @@protoc_insertion_point(destructor:PBAirTransport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBAirTransport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transport_;
}

void PBAirTransport::ArenaDtor(void* object) {
  PBAirTransport* _this = reinterpret_cast< PBAirTransport* >(object);
  (void)_this;
}
void PBAirTransport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBAirTransport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBAirTransport& PBAirTransport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBAirTransport_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBAirTransport::Clear() {
// @@protoc_insertion_point(message_clear_start:PBAirTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBAirTransport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBAirTransport.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBTransport transport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBAirTransport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBAirTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBAirTransport.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // .PBTransport transport = 2;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBAirTransport)
  return target;
}

size_t PBAirTransport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBAirTransport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // .PBTransport transport = 2;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBAirTransport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBAirTransport)
  GOOGLE_DCHECK_NE(&from, this);
  const PBAirTransport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBAirTransport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBAirTransport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBAirTransport)
    MergeFrom(*source);
  }
}

void PBAirTransport::MergeFrom(const PBAirTransport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBAirTransport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::PBTransport::MergeFrom(from._internal_transport());
  }
}

void PBAirTransport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBAirTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAirTransport::CopyFrom(const PBAirTransport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBAirTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAirTransport::IsInitialized() const {
  return true;
}

void PBAirTransport::InternalSwap(PBAirTransport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(transport_, other->transport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBAirTransport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBLandTransport::InitAsDefaultInstance() {
  ::_PBLandTransport_default_instance_._instance.get_mutable()->transport_ = const_cast< ::PBTransport*>(
      ::PBTransport::internal_default_instance());
}
class PBLandTransport::_Internal {
 public:
  static const ::PBTransport& transport(const PBLandTransport* msg);
};

const ::PBTransport&
PBLandTransport::_Internal::transport(const PBLandTransport* msg) {
  return *msg->transport_;
}
PBLandTransport::PBLandTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBLandTransport)
}
PBLandTransport::PBLandTransport(const PBLandTransport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  if (from._internal_has_transport()) {
    transport_ = new ::PBTransport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBLandTransport)
}

void PBLandTransport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBLandTransport_PBLogistics_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_ = nullptr;
}

PBLandTransport::~PBLandTransport() {
  // @@protoc_insertion_point(destructor:PBLandTransport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBLandTransport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transport_;
}

void PBLandTransport::ArenaDtor(void* object) {
  PBLandTransport* _this = reinterpret_cast< PBLandTransport* >(object);
  (void)_this;
}
void PBLandTransport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBLandTransport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBLandTransport& PBLandTransport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBLandTransport_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBLandTransport::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLandTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBLandTransport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBLandTransport.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBTransport transport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBLandTransport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLandTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBLandTransport.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // .PBTransport transport = 2;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBLandTransport)
  return target;
}

size_t PBLandTransport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLandTransport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .PBTransport transport = 2;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBLandTransport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLandTransport)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLandTransport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBLandTransport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLandTransport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLandTransport)
    MergeFrom(*source);
  }
}

void PBLandTransport::MergeFrom(const PBLandTransport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLandTransport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::PBTransport::MergeFrom(from._internal_transport());
  }
}

void PBLandTransport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLandTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLandTransport::CopyFrom(const PBLandTransport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLandTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLandTransport::IsInitialized() const {
  return true;
}

void PBLandTransport::InternalSwap(PBLandTransport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(transport_, other->transport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBLandTransport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBSeaTransport::InitAsDefaultInstance() {
  ::_PBSeaTransport_default_instance_._instance.get_mutable()->transport_ = const_cast< ::PBTransport*>(
      ::PBTransport::internal_default_instance());
}
class PBSeaTransport::_Internal {
 public:
  static const ::PBTransport& transport(const PBSeaTransport* msg);
};

const ::PBTransport&
PBSeaTransport::_Internal::transport(const PBSeaTransport* msg) {
  return *msg->transport_;
}
PBSeaTransport::PBSeaTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBSeaTransport)
}
PBSeaTransport::PBSeaTransport(const PBSeaTransport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shipname().empty()) {
    shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shipname(),
      GetArena());
  }
  if (from._internal_has_transport()) {
    transport_ = new ::PBTransport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PBSeaTransport)
}

void PBSeaTransport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBSeaTransport_PBLogistics_2eproto.base);
  shipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_ = nullptr;
}

PBSeaTransport::~PBSeaTransport() {
  // @@protoc_insertion_point(destructor:PBSeaTransport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBSeaTransport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shipname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transport_;
}

void PBSeaTransport::ArenaDtor(void* object) {
  PBSeaTransport* _this = reinterpret_cast< PBSeaTransport* >(object);
  (void)_this;
}
void PBSeaTransport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBSeaTransport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBSeaTransport& PBSeaTransport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBSeaTransport_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBSeaTransport::Clear() {
// @@protoc_insertion_point(message_clear_start:PBSeaTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBSeaTransport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string shipname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_shipname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBSeaTransport.shipname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBTransport transport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBSeaTransport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBSeaTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string shipname = 1;
  if (this->shipname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shipname().data(), static_cast<int>(this->_internal_shipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBSeaTransport.shipname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shipname(), target);
  }

  // .PBTransport transport = 2;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBSeaTransport)
  return target;
}

size_t PBSeaTransport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBSeaTransport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shipname = 1;
  if (this->shipname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shipname());
  }

  // .PBTransport transport = 2;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBSeaTransport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBSeaTransport)
  GOOGLE_DCHECK_NE(&from, this);
  const PBSeaTransport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBSeaTransport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBSeaTransport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBSeaTransport)
    MergeFrom(*source);
  }
}

void PBSeaTransport::MergeFrom(const PBSeaTransport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBSeaTransport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shipname().size() > 0) {
    _internal_set_shipname(from._internal_shipname());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::PBTransport::MergeFrom(from._internal_transport());
  }
}

void PBSeaTransport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBSeaTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSeaTransport::CopyFrom(const PBSeaTransport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBSeaTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSeaTransport::IsInitialized() const {
  return true;
}

void PBSeaTransport::InternalSwap(PBSeaTransport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shipname_.Swap(&other->shipname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(transport_, other->transport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBSeaTransport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBTransportItem::InitAsDefaultInstance() {
  ::_PBTransportItem_default_instance_.airtransport_ = const_cast< ::PBAirTransport*>(
      ::PBAirTransport::internal_default_instance());
  ::_PBTransportItem_default_instance_.landtransport_ = const_cast< ::PBLandTransport*>(
      ::PBLandTransport::internal_default_instance());
  ::_PBTransportItem_default_instance_.seatransport_ = const_cast< ::PBSeaTransport*>(
      ::PBSeaTransport::internal_default_instance());
}
class PBTransportItem::_Internal {
 public:
  static const ::PBAirTransport& airtransport(const PBTransportItem* msg);
  static const ::PBLandTransport& landtransport(const PBTransportItem* msg);
  static const ::PBSeaTransport& seatransport(const PBTransportItem* msg);
};

const ::PBAirTransport&
PBTransportItem::_Internal::airtransport(const PBTransportItem* msg) {
  return *msg->product_type_.airtransport_;
}
const ::PBLandTransport&
PBTransportItem::_Internal::landtransport(const PBTransportItem* msg) {
  return *msg->product_type_.landtransport_;
}
const ::PBSeaTransport&
PBTransportItem::_Internal::seatransport(const PBTransportItem* msg) {
  return *msg->product_type_.seatransport_;
}
void PBTransportItem::set_allocated_airtransport(::PBAirTransport* airtransport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (airtransport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(airtransport);
    if (message_arena != submessage_arena) {
      airtransport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airtransport, submessage_arena);
    }
    set_has_airtransport();
    product_type_.airtransport_ = airtransport;
  }
  // @@protoc_insertion_point(field_set_allocated:PBTransportItem.airTransport)
}
void PBTransportItem::set_allocated_landtransport(::PBLandTransport* landtransport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (landtransport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landtransport);
    if (message_arena != submessage_arena) {
      landtransport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landtransport, submessage_arena);
    }
    set_has_landtransport();
    product_type_.landtransport_ = landtransport;
  }
  // @@protoc_insertion_point(field_set_allocated:PBTransportItem.landTransport)
}
void PBTransportItem::set_allocated_seatransport(::PBSeaTransport* seatransport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product_type();
  if (seatransport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seatransport);
    if (message_arena != submessage_arena) {
      seatransport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seatransport, submessage_arena);
    }
    set_has_seatransport();
    product_type_.seatransport_ = seatransport;
  }
  // @@protoc_insertion_point(field_set_allocated:PBTransportItem.seaTransport)
}
PBTransportItem::PBTransportItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBTransportItem)
}
PBTransportItem::PBTransportItem(const PBTransportItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_product_type();
  switch (from.product_type_case()) {
    case kAirTransport: {
      _internal_mutable_airtransport()->::PBAirTransport::MergeFrom(from._internal_airtransport());
      break;
    }
    case kLandTransport: {
      _internal_mutable_landtransport()->::PBLandTransport::MergeFrom(from._internal_landtransport());
      break;
    }
    case kSeaTransport: {
      _internal_mutable_seatransport()->::PBSeaTransport::MergeFrom(from._internal_seatransport());
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PBTransportItem)
}

void PBTransportItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBTransportItem_PBLogistics_2eproto.base);
  clear_has_product_type();
}

PBTransportItem::~PBTransportItem() {
  // @@protoc_insertion_point(destructor:PBTransportItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBTransportItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_product_type()) {
    clear_product_type();
  }
}

void PBTransportItem::ArenaDtor(void* object) {
  PBTransportItem* _this = reinterpret_cast< PBTransportItem* >(object);
  (void)_this;
}
void PBTransportItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBTransportItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBTransportItem& PBTransportItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBTransportItem_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBTransportItem::clear_product_type() {
// @@protoc_insertion_point(one_of_clear_start:PBTransportItem)
  switch (product_type_case()) {
    case kAirTransport: {
      if (GetArena() == nullptr) {
        delete product_type_.airtransport_;
      }
      break;
    }
    case kLandTransport: {
      if (GetArena() == nullptr) {
        delete product_type_.landtransport_;
      }
      break;
    }
    case kSeaTransport: {
      if (GetArena() == nullptr) {
        delete product_type_.seatransport_;
      }
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRODUCT_TYPE_NOT_SET;
}


void PBTransportItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PBTransportItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_product_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBTransportItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PBAirTransport airTransport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_airtransport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBLandTransport landTransport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_landtransport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBSeaTransport seaTransport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_seatransport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBTransportItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBTransportItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBAirTransport airTransport = 1;
  if (_internal_has_airtransport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::airtransport(this), target, stream);
  }

  // .PBLandTransport landTransport = 2;
  if (_internal_has_landtransport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::landtransport(this), target, stream);
  }

  // .PBSeaTransport seaTransport = 3;
  if (_internal_has_seatransport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::seatransport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBTransportItem)
  return target;
}

size_t PBTransportItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBTransportItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (product_type_case()) {
    // .PBAirTransport airTransport = 1;
    case kAirTransport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.airtransport_);
      break;
    }
    // .PBLandTransport landTransport = 2;
    case kLandTransport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.landtransport_);
      break;
    }
    // .PBSeaTransport seaTransport = 3;
    case kSeaTransport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_type_.seatransport_);
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBTransportItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBTransportItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PBTransportItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBTransportItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBTransportItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBTransportItem)
    MergeFrom(*source);
  }
}

void PBTransportItem::MergeFrom(const PBTransportItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBTransportItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.product_type_case()) {
    case kAirTransport: {
      _internal_mutable_airtransport()->::PBAirTransport::MergeFrom(from._internal_airtransport());
      break;
    }
    case kLandTransport: {
      _internal_mutable_landtransport()->::PBLandTransport::MergeFrom(from._internal_landtransport());
      break;
    }
    case kSeaTransport: {
      _internal_mutable_seatransport()->::PBSeaTransport::MergeFrom(from._internal_seatransport());
      break;
    }
    case PRODUCT_TYPE_NOT_SET: {
      break;
    }
  }
}

void PBTransportItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBTransportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTransportItem::CopyFrom(const PBTransportItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBTransportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTransportItem::IsInitialized() const {
  return true;
}

void PBTransportItem::InternalSwap(PBTransportItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(product_type_, other->product_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBTransportItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBTransportList::InitAsDefaultInstance() {
}
class PBTransportList::_Internal {
 public:
};

PBTransportList::PBTransportList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transportlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBTransportList)
}
PBTransportList::PBTransportList(const PBTransportList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transportlist_(from.transportlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PBTransportList)
}

void PBTransportList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBTransportList_PBLogistics_2eproto.base);
}

PBTransportList::~PBTransportList() {
  // @@protoc_insertion_point(destructor:PBTransportList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBTransportList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBTransportList::ArenaDtor(void* object) {
  PBTransportList* _this = reinterpret_cast< PBTransportList* >(object);
  (void)_this;
}
void PBTransportList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBTransportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBTransportList& PBTransportList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBTransportList_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBTransportList::Clear() {
// @@protoc_insertion_point(message_clear_start:PBTransportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transportlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBTransportList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PBTransportItem transportList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transportlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBTransportList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBTransportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PBTransportItem transportList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transportlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transportlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBTransportList)
  return target;
}

size_t PBTransportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBTransportList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBTransportItem transportList = 1;
  total_size += 1UL * this->_internal_transportlist_size();
  for (const auto& msg : this->transportlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBTransportList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBTransportList)
  GOOGLE_DCHECK_NE(&from, this);
  const PBTransportList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBTransportList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBTransportList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBTransportList)
    MergeFrom(*source);
  }
}

void PBTransportList::MergeFrom(const PBTransportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBTransportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transportlist_.MergeFrom(from.transportlist_);
}

void PBTransportList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBTransportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTransportList::CopyFrom(const PBTransportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBTransportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTransportList::IsInitialized() const {
  return true;
}

void PBTransportList::InternalSwap(PBTransportList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transportlist_.InternalSwap(&other->transportlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBTransportList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBShipment::InitAsDefaultInstance() {
  ::_PBShipment_default_instance_._instance.get_mutable()->productlist_ = const_cast< ::PBStock*>(
      ::PBStock::internal_default_instance());
  ::_PBShipment_default_instance_._instance.get_mutable()->transport_ = const_cast< ::PBTransportItem*>(
      ::PBTransportItem::internal_default_instance());
}
class PBShipment::_Internal {
 public:
  static const ::PBStock& productlist(const PBShipment* msg);
  static const ::PBTransportItem& transport(const PBShipment* msg);
};

const ::PBStock&
PBShipment::_Internal::productlist(const PBShipment* msg) {
  return *msg->productlist_;
}
const ::PBTransportItem&
PBShipment::_Internal::transport(const PBShipment* msg) {
  return *msg->transport_;
}
PBShipment::PBShipment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBShipment)
}
PBShipment::PBShipment(const PBShipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer().empty()) {
    customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customer(),
      GetArena());
  }
  if (from._internal_has_productlist()) {
    productlist_ = new ::PBStock(*from.productlist_);
  } else {
    productlist_ = nullptr;
  }
  if (from._internal_has_transport()) {
    transport_ = new ::PBTransportItem(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dispatched_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dispatched_));
  // @@protoc_insertion_point(copy_constructor:PBShipment)
}

void PBShipment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBShipment_PBLogistics_2eproto.base);
  customer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&productlist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dispatched_) -
      reinterpret_cast<char*>(&productlist_)) + sizeof(dispatched_));
}

PBShipment::~PBShipment() {
  // @@protoc_insertion_point(destructor:PBShipment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBShipment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete productlist_;
  if (this != internal_default_instance()) delete transport_;
}

void PBShipment::ArenaDtor(void* object) {
  PBShipment* _this = reinterpret_cast< PBShipment* >(object);
  (void)_this;
}
void PBShipment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBShipment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBShipment& PBShipment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBShipment_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBShipment::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShipment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && productlist_ != nullptr) {
    delete productlist_;
  }
  productlist_ = nullptr;
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dispatched_) -
      reinterpret_cast<char*>(&id_)) + sizeof(dispatched_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBShipment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_customer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBShipment.customer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool dispatched = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dispatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBStock productlist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_productlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBTransportItem transport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBShipment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShipment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string customer = 2;
  if (this->customer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer().data(), static_cast<int>(this->_internal_customer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBShipment.customer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_customer(), target);
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_distance(), target);
  }

  // float cost = 4;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cost(), target);
  }

  // bool dispatched = 5;
  if (this->dispatched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dispatched(), target);
  }

  // .PBStock productlist = 6;
  if (this->has_productlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::productlist(this), target, stream);
  }

  // .PBTransportItem transport = 7;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShipment)
  return target;
}

size_t PBShipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShipment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer = 2;
  if (this->customer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer());
  }

  // .PBStock productlist = 6;
  if (this->has_productlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *productlist_);
  }

  // .PBTransportItem transport = 7;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float cost = 4;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 4;
  }

  // bool dispatched = 5;
  if (this->dispatched() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBShipment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShipment)
  GOOGLE_DCHECK_NE(&from, this);
  const PBShipment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBShipment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShipment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShipment)
    MergeFrom(*source);
  }
}

void PBShipment::MergeFrom(const PBShipment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShipment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer().size() > 0) {
    _internal_set_customer(from._internal_customer());
  }
  if (from.has_productlist()) {
    _internal_mutable_productlist()->::PBStock::MergeFrom(from._internal_productlist());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::PBTransportItem::MergeFrom(from._internal_transport());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    _internal_set_cost(from._internal_cost());
  }
  if (from.dispatched() != 0) {
    _internal_set_dispatched(from._internal_dispatched());
  }
}

void PBShipment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShipment::CopyFrom(const PBShipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBShipment::IsInitialized() const {
  return true;
}

void PBShipment::InternalSwap(PBShipment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_.Swap(&other->customer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBShipment, dispatched_)
      + sizeof(PBShipment::dispatched_)
      - PROTOBUF_FIELD_OFFSET(PBShipment, productlist_)>(
          reinterpret_cast<char*>(&productlist_),
          reinterpret_cast<char*>(&other->productlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBShipment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBShipmentList::InitAsDefaultInstance() {
}
class PBShipmentList::_Internal {
 public:
};

PBShipmentList::PBShipmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shipmentlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBShipmentList)
}
PBShipmentList::PBShipmentList(const PBShipmentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shipmentlist_(from.shipmentlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PBShipmentList)
}

void PBShipmentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBShipmentList_PBLogistics_2eproto.base);
}

PBShipmentList::~PBShipmentList() {
  // @@protoc_insertion_point(destructor:PBShipmentList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBShipmentList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBShipmentList::ArenaDtor(void* object) {
  PBShipmentList* _this = reinterpret_cast< PBShipmentList* >(object);
  (void)_this;
}
void PBShipmentList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBShipmentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBShipmentList& PBShipmentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBShipmentList_PBLogistics_2eproto.base);
  return *internal_default_instance();
}


void PBShipmentList::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShipmentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipmentlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBShipmentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PBShipment shipmentList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shipmentlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBShipmentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShipmentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PBShipment shipmentList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shipmentlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shipmentlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShipmentList)
  return target;
}

size_t PBShipmentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShipmentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBShipment shipmentList = 1;
  total_size += 1UL * this->_internal_shipmentlist_size();
  for (const auto& msg : this->shipmentlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBShipmentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShipmentList)
  GOOGLE_DCHECK_NE(&from, this);
  const PBShipmentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBShipmentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShipmentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShipmentList)
    MergeFrom(*source);
  }
}

void PBShipmentList::MergeFrom(const PBShipmentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShipmentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shipmentlist_.MergeFrom(from.shipmentlist_);
}

void PBShipmentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShipmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShipmentList::CopyFrom(const PBShipmentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShipmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBShipmentList::IsInitialized() const {
  return true;
}

void PBShipmentList::InternalSwap(PBShipmentList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shipmentlist_.InternalSwap(&other->shipmentlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBShipmentList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBPackage* Arena::CreateMaybeMessage< ::PBPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::PBProduct* Arena::CreateMaybeMessage< ::PBProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::PBApparel* Arena::CreateMaybeMessage< ::PBApparel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBApparel >(arena);
}
template<> PROTOBUF_NOINLINE ::PBAccessory* Arena::CreateMaybeMessage< ::PBAccessory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBAccessory >(arena);
}
template<> PROTOBUF_NOINLINE ::PBClothing* Arena::CreateMaybeMessage< ::PBClothing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBClothing >(arena);
}
template<> PROTOBUF_NOINLINE ::PBConsumable* Arena::CreateMaybeMessage< ::PBConsumable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBConsumable >(arena);
}
template<> PROTOBUF_NOINLINE ::PBFood* Arena::CreateMaybeMessage< ::PBFood >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBFood >(arena);
}
template<> PROTOBUF_NOINLINE ::PBDrink* Arena::CreateMaybeMessage< ::PBDrink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBDrink >(arena);
}
template<> PROTOBUF_NOINLINE ::PBElectronics* Arena::CreateMaybeMessage< ::PBElectronics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBElectronics >(arena);
}
template<> PROTOBUF_NOINLINE ::PBTech* Arena::CreateMaybeMessage< ::PBTech >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBTech >(arena);
}
template<> PROTOBUF_NOINLINE ::PBAppliance* Arena::CreateMaybeMessage< ::PBAppliance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBAppliance >(arena);
}
template<> PROTOBUF_NOINLINE ::PBFurniture* Arena::CreateMaybeMessage< ::PBFurniture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBFurniture >(arena);
}
template<> PROTOBUF_NOINLINE ::PBDecor* Arena::CreateMaybeMessage< ::PBDecor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBDecor >(arena);
}
template<> PROTOBUF_NOINLINE ::PBStorage* Arena::CreateMaybeMessage< ::PBStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::PBGames* Arena::CreateMaybeMessage< ::PBGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBGames >(arena);
}
template<> PROTOBUF_NOINLINE ::PBDigital* Arena::CreateMaybeMessage< ::PBDigital >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBDigital >(arena);
}
template<> PROTOBUF_NOINLINE ::PBPhysical* Arena::CreateMaybeMessage< ::PBPhysical >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBPhysical >(arena);
}
template<> PROTOBUF_NOINLINE ::PBFlora* Arena::CreateMaybeMessage< ::PBFlora >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBFlora >(arena);
}
template<> PROTOBUF_NOINLINE ::PBPlants* Arena::CreateMaybeMessage< ::PBPlants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBPlants >(arena);
}
template<> PROTOBUF_NOINLINE ::PBSeeds* Arena::CreateMaybeMessage< ::PBSeeds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBSeeds >(arena);
}
template<> PROTOBUF_NOINLINE ::PBStockItem* Arena::CreateMaybeMessage< ::PBStockItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBStockItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PBStock* Arena::CreateMaybeMessage< ::PBStock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBStock >(arena);
}
template<> PROTOBUF_NOINLINE ::PBTransport* Arena::CreateMaybeMessage< ::PBTransport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBTransport >(arena);
}
template<> PROTOBUF_NOINLINE ::PBAirTransport* Arena::CreateMaybeMessage< ::PBAirTransport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBAirTransport >(arena);
}
template<> PROTOBUF_NOINLINE ::PBLandTransport* Arena::CreateMaybeMessage< ::PBLandTransport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBLandTransport >(arena);
}
template<> PROTOBUF_NOINLINE ::PBSeaTransport* Arena::CreateMaybeMessage< ::PBSeaTransport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBSeaTransport >(arena);
}
template<> PROTOBUF_NOINLINE ::PBTransportItem* Arena::CreateMaybeMessage< ::PBTransportItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBTransportItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PBTransportList* Arena::CreateMaybeMessage< ::PBTransportList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBTransportList >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShipment* Arena::CreateMaybeMessage< ::PBShipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBShipment >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShipmentList* Arena::CreateMaybeMessage< ::PBShipmentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBShipmentList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
