// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBLogistics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PBLogistics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PBLogistics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PBLogistics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PBLogistics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PBLogistics_2eproto;
class PBAccessory;
class PBAccessoryDefaultTypeInternal;
extern PBAccessoryDefaultTypeInternal _PBAccessory_default_instance_;
class PBAirTransport;
class PBAirTransportDefaultTypeInternal;
extern PBAirTransportDefaultTypeInternal _PBAirTransport_default_instance_;
class PBApparel;
class PBApparelDefaultTypeInternal;
extern PBApparelDefaultTypeInternal _PBApparel_default_instance_;
class PBAppliance;
class PBApplianceDefaultTypeInternal;
extern PBApplianceDefaultTypeInternal _PBAppliance_default_instance_;
class PBClothing;
class PBClothingDefaultTypeInternal;
extern PBClothingDefaultTypeInternal _PBClothing_default_instance_;
class PBConsumable;
class PBConsumableDefaultTypeInternal;
extern PBConsumableDefaultTypeInternal _PBConsumable_default_instance_;
class PBDecor;
class PBDecorDefaultTypeInternal;
extern PBDecorDefaultTypeInternal _PBDecor_default_instance_;
class PBDigital;
class PBDigitalDefaultTypeInternal;
extern PBDigitalDefaultTypeInternal _PBDigital_default_instance_;
class PBDrink;
class PBDrinkDefaultTypeInternal;
extern PBDrinkDefaultTypeInternal _PBDrink_default_instance_;
class PBElectronics;
class PBElectronicsDefaultTypeInternal;
extern PBElectronicsDefaultTypeInternal _PBElectronics_default_instance_;
class PBFlora;
class PBFloraDefaultTypeInternal;
extern PBFloraDefaultTypeInternal _PBFlora_default_instance_;
class PBFood;
class PBFoodDefaultTypeInternal;
extern PBFoodDefaultTypeInternal _PBFood_default_instance_;
class PBFurniture;
class PBFurnitureDefaultTypeInternal;
extern PBFurnitureDefaultTypeInternal _PBFurniture_default_instance_;
class PBGames;
class PBGamesDefaultTypeInternal;
extern PBGamesDefaultTypeInternal _PBGames_default_instance_;
class PBLandTransport;
class PBLandTransportDefaultTypeInternal;
extern PBLandTransportDefaultTypeInternal _PBLandTransport_default_instance_;
class PBPackage;
class PBPackageDefaultTypeInternal;
extern PBPackageDefaultTypeInternal _PBPackage_default_instance_;
class PBPhysical;
class PBPhysicalDefaultTypeInternal;
extern PBPhysicalDefaultTypeInternal _PBPhysical_default_instance_;
class PBPlants;
class PBPlantsDefaultTypeInternal;
extern PBPlantsDefaultTypeInternal _PBPlants_default_instance_;
class PBProduct;
class PBProductDefaultTypeInternal;
extern PBProductDefaultTypeInternal _PBProduct_default_instance_;
class PBSeaTransport;
class PBSeaTransportDefaultTypeInternal;
extern PBSeaTransportDefaultTypeInternal _PBSeaTransport_default_instance_;
class PBSeeds;
class PBSeedsDefaultTypeInternal;
extern PBSeedsDefaultTypeInternal _PBSeeds_default_instance_;
class PBShipment;
class PBShipmentDefaultTypeInternal;
extern PBShipmentDefaultTypeInternal _PBShipment_default_instance_;
class PBShipmentList;
class PBShipmentListDefaultTypeInternal;
extern PBShipmentListDefaultTypeInternal _PBShipmentList_default_instance_;
class PBStock;
class PBStockDefaultTypeInternal;
extern PBStockDefaultTypeInternal _PBStock_default_instance_;
class PBStockItem;
class PBStockItemDefaultTypeInternal;
extern PBStockItemDefaultTypeInternal _PBStockItem_default_instance_;
class PBStorage;
class PBStorageDefaultTypeInternal;
extern PBStorageDefaultTypeInternal _PBStorage_default_instance_;
class PBTech;
class PBTechDefaultTypeInternal;
extern PBTechDefaultTypeInternal _PBTech_default_instance_;
class PBTransport;
class PBTransportDefaultTypeInternal;
extern PBTransportDefaultTypeInternal _PBTransport_default_instance_;
class PBTransportItem;
class PBTransportItemDefaultTypeInternal;
extern PBTransportItemDefaultTypeInternal _PBTransportItem_default_instance_;
class PBTransportList;
class PBTransportListDefaultTypeInternal;
extern PBTransportListDefaultTypeInternal _PBTransportList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBAccessory* Arena::CreateMaybeMessage<::PBAccessory>(Arena*);
template<> ::PBAirTransport* Arena::CreateMaybeMessage<::PBAirTransport>(Arena*);
template<> ::PBApparel* Arena::CreateMaybeMessage<::PBApparel>(Arena*);
template<> ::PBAppliance* Arena::CreateMaybeMessage<::PBAppliance>(Arena*);
template<> ::PBClothing* Arena::CreateMaybeMessage<::PBClothing>(Arena*);
template<> ::PBConsumable* Arena::CreateMaybeMessage<::PBConsumable>(Arena*);
template<> ::PBDecor* Arena::CreateMaybeMessage<::PBDecor>(Arena*);
template<> ::PBDigital* Arena::CreateMaybeMessage<::PBDigital>(Arena*);
template<> ::PBDrink* Arena::CreateMaybeMessage<::PBDrink>(Arena*);
template<> ::PBElectronics* Arena::CreateMaybeMessage<::PBElectronics>(Arena*);
template<> ::PBFlora* Arena::CreateMaybeMessage<::PBFlora>(Arena*);
template<> ::PBFood* Arena::CreateMaybeMessage<::PBFood>(Arena*);
template<> ::PBFurniture* Arena::CreateMaybeMessage<::PBFurniture>(Arena*);
template<> ::PBGames* Arena::CreateMaybeMessage<::PBGames>(Arena*);
template<> ::PBLandTransport* Arena::CreateMaybeMessage<::PBLandTransport>(Arena*);
template<> ::PBPackage* Arena::CreateMaybeMessage<::PBPackage>(Arena*);
template<> ::PBPhysical* Arena::CreateMaybeMessage<::PBPhysical>(Arena*);
template<> ::PBPlants* Arena::CreateMaybeMessage<::PBPlants>(Arena*);
template<> ::PBProduct* Arena::CreateMaybeMessage<::PBProduct>(Arena*);
template<> ::PBSeaTransport* Arena::CreateMaybeMessage<::PBSeaTransport>(Arena*);
template<> ::PBSeeds* Arena::CreateMaybeMessage<::PBSeeds>(Arena*);
template<> ::PBShipment* Arena::CreateMaybeMessage<::PBShipment>(Arena*);
template<> ::PBShipmentList* Arena::CreateMaybeMessage<::PBShipmentList>(Arena*);
template<> ::PBStock* Arena::CreateMaybeMessage<::PBStock>(Arena*);
template<> ::PBStockItem* Arena::CreateMaybeMessage<::PBStockItem>(Arena*);
template<> ::PBStorage* Arena::CreateMaybeMessage<::PBStorage>(Arena*);
template<> ::PBTech* Arena::CreateMaybeMessage<::PBTech>(Arena*);
template<> ::PBTransport* Arena::CreateMaybeMessage<::PBTransport>(Arena*);
template<> ::PBTransportItem* Arena::CreateMaybeMessage<::PBTransportItem>(Arena*);
template<> ::PBTransportList* Arena::CreateMaybeMessage<::PBTransportList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PBPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBPackage) */ {
 public:
  inline PBPackage() : PBPackage(nullptr) {};
  virtual ~PBPackage();

  PBPackage(const PBPackage& from);
  PBPackage(PBPackage&& from) noexcept
    : PBPackage() {
    *this = ::std::move(from);
  }

  inline PBPackage& operator=(const PBPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBPackage& operator=(PBPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBPackage* internal_default_instance() {
    return reinterpret_cast<const PBPackage*>(
               &_PBPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBPackage& a, PBPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(PBPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBPackage* New() const final {
    return CreateMaybeMessage<PBPackage>(nullptr);
  }

  PBPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBPackage& from);
  void MergeFrom(const PBPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBPackage";
  }
  protected:
  explicit PBPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
    kCostPerUnitFieldNumber = 2,
  };
  // int32 units = 1;
  void clear_units();
  ::PROTOBUF_NAMESPACE_ID::int32 units() const;
  void set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_units() const;
  void _internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float costPerUnit = 2;
  void clear_costperunit();
  float costperunit() const;
  void set_costperunit(float value);
  private:
  float _internal_costperunit() const;
  void _internal_set_costperunit(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 units_;
  float costperunit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBProduct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBProduct) */ {
 public:
  inline PBProduct() : PBProduct(nullptr) {};
  virtual ~PBProduct();

  PBProduct(const PBProduct& from);
  PBProduct(PBProduct&& from) noexcept
    : PBProduct() {
    *this = ::std::move(from);
  }

  inline PBProduct& operator=(const PBProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBProduct& operator=(PBProduct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBProduct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBProduct* internal_default_instance() {
    return reinterpret_cast<const PBProduct*>(
               &_PBProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBProduct& a, PBProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(PBProduct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBProduct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBProduct* New() const final {
    return CreateMaybeMessage<PBProduct>(nullptr);
  }

  PBProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBProduct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBProduct& from);
  void MergeFrom(const PBProduct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBProduct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBProduct";
  }
  protected:
  explicit PBProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSupplierFieldNumber = 3,
    kPackagingFieldNumber = 5,
    kCostFieldNumber = 1,
    kDiscountAmountFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string supplier = 3;
  void clear_supplier();
  const std::string& supplier() const;
  void set_supplier(const std::string& value);
  void set_supplier(std::string&& value);
  void set_supplier(const char* value);
  void set_supplier(const char* value, size_t size);
  std::string* mutable_supplier();
  std::string* release_supplier();
  void set_allocated_supplier(std::string* supplier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_supplier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_supplier(
      std::string* supplier);
  private:
  const std::string& _internal_supplier() const;
  void _internal_set_supplier(const std::string& value);
  std::string* _internal_mutable_supplier();
  public:

  // .PBPackage packaging = 5;
  bool has_packaging() const;
  private:
  bool _internal_has_packaging() const;
  public:
  void clear_packaging();
  const ::PBPackage& packaging() const;
  ::PBPackage* release_packaging();
  ::PBPackage* mutable_packaging();
  void set_allocated_packaging(::PBPackage* packaging);
  private:
  const ::PBPackage& _internal_packaging() const;
  ::PBPackage* _internal_mutable_packaging();
  public:
  void unsafe_arena_set_allocated_packaging(
      ::PBPackage* packaging);
  ::PBPackage* unsafe_arena_release_packaging();

  // float cost = 1;
  void clear_cost();
  float cost() const;
  void set_cost(float value);
  private:
  float _internal_cost() const;
  void _internal_set_cost(float value);
  public:

  // float discountAmount = 4;
  void clear_discountamount();
  float discountamount() const;
  void set_discountamount(float value);
  private:
  float _internal_discountamount() const;
  void _internal_set_discountamount(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBProduct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supplier_;
  ::PBPackage* packaging_;
  float cost_;
  float discountamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBApparel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBApparel) */ {
 public:
  inline PBApparel() : PBApparel(nullptr) {};
  virtual ~PBApparel();

  PBApparel(const PBApparel& from);
  PBApparel(PBApparel&& from) noexcept
    : PBApparel() {
    *this = ::std::move(from);
  }

  inline PBApparel& operator=(const PBApparel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBApparel& operator=(PBApparel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBApparel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBApparel* internal_default_instance() {
    return reinterpret_cast<const PBApparel*>(
               &_PBApparel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBApparel& a, PBApparel& b) {
    a.Swap(&b);
  }
  inline void Swap(PBApparel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBApparel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBApparel* New() const final {
    return CreateMaybeMessage<PBApparel>(nullptr);
  }

  PBApparel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBApparel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBApparel& from);
  void MergeFrom(const PBApparel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBApparel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBApparel";
  }
  protected:
  explicit PBApparel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialFieldNumber = 1,
    kProductFieldNumber = 2,
  };
  // string material = 1;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_material();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_material(
      std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .PBProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::PBProduct& product() const;
  ::PBProduct* release_product();
  ::PBProduct* mutable_product();
  void set_allocated_product(::PBProduct* product);
  private:
  const ::PBProduct& _internal_product() const;
  ::PBProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::PBProduct* product);
  ::PBProduct* unsafe_arena_release_product();

  // @@protoc_insertion_point(class_scope:PBApparel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::PBProduct* product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBAccessory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBAccessory) */ {
 public:
  inline PBAccessory() : PBAccessory(nullptr) {};
  virtual ~PBAccessory();

  PBAccessory(const PBAccessory& from);
  PBAccessory(PBAccessory&& from) noexcept
    : PBAccessory() {
    *this = ::std::move(from);
  }

  inline PBAccessory& operator=(const PBAccessory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAccessory& operator=(PBAccessory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBAccessory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBAccessory* internal_default_instance() {
    return reinterpret_cast<const PBAccessory*>(
               &_PBAccessory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBAccessory& a, PBAccessory& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAccessory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAccessory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBAccessory* New() const final {
    return CreateMaybeMessage<PBAccessory>(nullptr);
  }

  PBAccessory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBAccessory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBAccessory& from);
  void MergeFrom(const PBAccessory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAccessory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBAccessory";
  }
  protected:
  explicit PBAccessory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 1,
    kApparelFieldNumber = 2,
  };
  // string brand = 1;
  void clear_brand();
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_brand();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_brand(
      std::string* brand);
  private:
  const std::string& _internal_brand() const;
  void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // .PBApparel apparel = 2;
  bool has_apparel() const;
  private:
  bool _internal_has_apparel() const;
  public:
  void clear_apparel();
  const ::PBApparel& apparel() const;
  ::PBApparel* release_apparel();
  ::PBApparel* mutable_apparel();
  void set_allocated_apparel(::PBApparel* apparel);
  private:
  const ::PBApparel& _internal_apparel() const;
  ::PBApparel* _internal_mutable_apparel();
  public:
  void unsafe_arena_set_allocated_apparel(
      ::PBApparel* apparel);
  ::PBApparel* unsafe_arena_release_apparel();

  // @@protoc_insertion_point(class_scope:PBAccessory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PBApparel* apparel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBClothing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBClothing) */ {
 public:
  inline PBClothing() : PBClothing(nullptr) {};
  virtual ~PBClothing();

  PBClothing(const PBClothing& from);
  PBClothing(PBClothing&& from) noexcept
    : PBClothing() {
    *this = ::std::move(from);
  }

  inline PBClothing& operator=(const PBClothing& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBClothing& operator=(PBClothing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBClothing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBClothing* internal_default_instance() {
    return reinterpret_cast<const PBClothing*>(
               &_PBClothing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBClothing& a, PBClothing& b) {
    a.Swap(&b);
  }
  inline void Swap(PBClothing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBClothing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBClothing* New() const final {
    return CreateMaybeMessage<PBClothing>(nullptr);
  }

  PBClothing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBClothing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBClothing& from);
  void MergeFrom(const PBClothing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBClothing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBClothing";
  }
  protected:
  explicit PBClothing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleFieldNumber = 1,
    kApparelFieldNumber = 2,
  };
  // string style = 1;
  void clear_style();
  const std::string& style() const;
  void set_style(const std::string& value);
  void set_style(std::string&& value);
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  std::string* mutable_style();
  std::string* release_style();
  void set_allocated_style(std::string* style);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_style();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_style(
      std::string* style);
  private:
  const std::string& _internal_style() const;
  void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // .PBApparel apparel = 2;
  bool has_apparel() const;
  private:
  bool _internal_has_apparel() const;
  public:
  void clear_apparel();
  const ::PBApparel& apparel() const;
  ::PBApparel* release_apparel();
  ::PBApparel* mutable_apparel();
  void set_allocated_apparel(::PBApparel* apparel);
  private:
  const ::PBApparel& _internal_apparel() const;
  ::PBApparel* _internal_mutable_apparel();
  public:
  void unsafe_arena_set_allocated_apparel(
      ::PBApparel* apparel);
  ::PBApparel* unsafe_arena_release_apparel();

  // @@protoc_insertion_point(class_scope:PBClothing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  ::PBApparel* apparel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBConsumable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBConsumable) */ {
 public:
  inline PBConsumable() : PBConsumable(nullptr) {};
  virtual ~PBConsumable();

  PBConsumable(const PBConsumable& from);
  PBConsumable(PBConsumable&& from) noexcept
    : PBConsumable() {
    *this = ::std::move(from);
  }

  inline PBConsumable& operator=(const PBConsumable& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBConsumable& operator=(PBConsumable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBConsumable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBConsumable* internal_default_instance() {
    return reinterpret_cast<const PBConsumable*>(
               &_PBConsumable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PBConsumable& a, PBConsumable& b) {
    a.Swap(&b);
  }
  inline void Swap(PBConsumable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBConsumable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBConsumable* New() const final {
    return CreateMaybeMessage<PBConsumable>(nullptr);
  }

  PBConsumable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBConsumable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBConsumable& from);
  void MergeFrom(const PBConsumable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBConsumable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBConsumable";
  }
  protected:
  explicit PBConsumable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductFieldNumber = 2,
    kCaloriesFieldNumber = 1,
  };
  // .PBProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::PBProduct& product() const;
  ::PBProduct* release_product();
  ::PBProduct* mutable_product();
  void set_allocated_product(::PBProduct* product);
  private:
  const ::PBProduct& _internal_product() const;
  ::PBProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::PBProduct* product);
  ::PBProduct* unsafe_arena_release_product();

  // int32 calories = 1;
  void clear_calories();
  ::PROTOBUF_NAMESPACE_ID::int32 calories() const;
  void set_calories(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_calories() const;
  void _internal_set_calories(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBConsumable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBProduct* product_;
  ::PROTOBUF_NAMESPACE_ID::int32 calories_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBFood PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBFood) */ {
 public:
  inline PBFood() : PBFood(nullptr) {};
  virtual ~PBFood();

  PBFood(const PBFood& from);
  PBFood(PBFood&& from) noexcept
    : PBFood() {
    *this = ::std::move(from);
  }

  inline PBFood& operator=(const PBFood& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBFood& operator=(PBFood&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBFood& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBFood* internal_default_instance() {
    return reinterpret_cast<const PBFood*>(
               &_PBFood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PBFood& a, PBFood& b) {
    a.Swap(&b);
  }
  inline void Swap(PBFood* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBFood* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBFood* New() const final {
    return CreateMaybeMessage<PBFood>(nullptr);
  }

  PBFood* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBFood>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBFood& from);
  void MergeFrom(const PBFood& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBFood* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBFood";
  }
  protected:
  explicit PBFood(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumableFieldNumber = 2,
    kIsCannedFieldNumber = 1,
  };
  // .PBConsumable consumable = 2;
  bool has_consumable() const;
  private:
  bool _internal_has_consumable() const;
  public:
  void clear_consumable();
  const ::PBConsumable& consumable() const;
  ::PBConsumable* release_consumable();
  ::PBConsumable* mutable_consumable();
  void set_allocated_consumable(::PBConsumable* consumable);
  private:
  const ::PBConsumable& _internal_consumable() const;
  ::PBConsumable* _internal_mutable_consumable();
  public:
  void unsafe_arena_set_allocated_consumable(
      ::PBConsumable* consumable);
  ::PBConsumable* unsafe_arena_release_consumable();

  // bool isCanned = 1;
  void clear_iscanned();
  bool iscanned() const;
  void set_iscanned(bool value);
  private:
  bool _internal_iscanned() const;
  void _internal_set_iscanned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PBFood)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBConsumable* consumable_;
  bool iscanned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBDrink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBDrink) */ {
 public:
  inline PBDrink() : PBDrink(nullptr) {};
  virtual ~PBDrink();

  PBDrink(const PBDrink& from);
  PBDrink(PBDrink&& from) noexcept
    : PBDrink() {
    *this = ::std::move(from);
  }

  inline PBDrink& operator=(const PBDrink& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBDrink& operator=(PBDrink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBDrink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBDrink* internal_default_instance() {
    return reinterpret_cast<const PBDrink*>(
               &_PBDrink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PBDrink& a, PBDrink& b) {
    a.Swap(&b);
  }
  inline void Swap(PBDrink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBDrink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBDrink* New() const final {
    return CreateMaybeMessage<PBDrink>(nullptr);
  }

  PBDrink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBDrink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBDrink& from);
  void MergeFrom(const PBDrink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDrink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBDrink";
  }
  protected:
  explicit PBDrink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumableFieldNumber = 2,
    kIsCarbonatedFieldNumber = 1,
  };
  // .PBConsumable consumable = 2;
  bool has_consumable() const;
  private:
  bool _internal_has_consumable() const;
  public:
  void clear_consumable();
  const ::PBConsumable& consumable() const;
  ::PBConsumable* release_consumable();
  ::PBConsumable* mutable_consumable();
  void set_allocated_consumable(::PBConsumable* consumable);
  private:
  const ::PBConsumable& _internal_consumable() const;
  ::PBConsumable* _internal_mutable_consumable();
  public:
  void unsafe_arena_set_allocated_consumable(
      ::PBConsumable* consumable);
  ::PBConsumable* unsafe_arena_release_consumable();

  // bool isCarbonated = 1;
  void clear_iscarbonated();
  bool iscarbonated() const;
  void set_iscarbonated(bool value);
  private:
  bool _internal_iscarbonated() const;
  void _internal_set_iscarbonated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PBDrink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBConsumable* consumable_;
  bool iscarbonated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBElectronics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBElectronics) */ {
 public:
  inline PBElectronics() : PBElectronics(nullptr) {};
  virtual ~PBElectronics();

  PBElectronics(const PBElectronics& from);
  PBElectronics(PBElectronics&& from) noexcept
    : PBElectronics() {
    *this = ::std::move(from);
  }

  inline PBElectronics& operator=(const PBElectronics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBElectronics& operator=(PBElectronics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBElectronics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBElectronics* internal_default_instance() {
    return reinterpret_cast<const PBElectronics*>(
               &_PBElectronics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PBElectronics& a, PBElectronics& b) {
    a.Swap(&b);
  }
  inline void Swap(PBElectronics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBElectronics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBElectronics* New() const final {
    return CreateMaybeMessage<PBElectronics>(nullptr);
  }

  PBElectronics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBElectronics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBElectronics& from);
  void MergeFrom(const PBElectronics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBElectronics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBElectronics";
  }
  protected:
  explicit PBElectronics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kProductFieldNumber = 2,
  };
  // string manufacturer = 1;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_manufacturer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_manufacturer(
      std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // .PBProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::PBProduct& product() const;
  ::PBProduct* release_product();
  ::PBProduct* mutable_product();
  void set_allocated_product(::PBProduct* product);
  private:
  const ::PBProduct& _internal_product() const;
  ::PBProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::PBProduct* product);
  ::PBProduct* unsafe_arena_release_product();

  // @@protoc_insertion_point(class_scope:PBElectronics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PBProduct* product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBTech PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBTech) */ {
 public:
  inline PBTech() : PBTech(nullptr) {};
  virtual ~PBTech();

  PBTech(const PBTech& from);
  PBTech(PBTech&& from) noexcept
    : PBTech() {
    *this = ::std::move(from);
  }

  inline PBTech& operator=(const PBTech& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBTech& operator=(PBTech&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBTech& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBTech* internal_default_instance() {
    return reinterpret_cast<const PBTech*>(
               &_PBTech_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PBTech& a, PBTech& b) {
    a.Swap(&b);
  }
  inline void Swap(PBTech* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBTech* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBTech* New() const final {
    return CreateMaybeMessage<PBTech>(nullptr);
  }

  PBTech* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBTech>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBTech& from);
  void MergeFrom(const PBTech& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTech* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBTech";
  }
  protected:
  explicit PBTech(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kElectronicsFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .PBElectronics electronics = 2;
  bool has_electronics() const;
  private:
  bool _internal_has_electronics() const;
  public:
  void clear_electronics();
  const ::PBElectronics& electronics() const;
  ::PBElectronics* release_electronics();
  ::PBElectronics* mutable_electronics();
  void set_allocated_electronics(::PBElectronics* electronics);
  private:
  const ::PBElectronics& _internal_electronics() const;
  ::PBElectronics* _internal_mutable_electronics();
  public:
  void unsafe_arena_set_allocated_electronics(
      ::PBElectronics* electronics);
  ::PBElectronics* unsafe_arena_release_electronics();

  // @@protoc_insertion_point(class_scope:PBTech)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PBElectronics* electronics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBAppliance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBAppliance) */ {
 public:
  inline PBAppliance() : PBAppliance(nullptr) {};
  virtual ~PBAppliance();

  PBAppliance(const PBAppliance& from);
  PBAppliance(PBAppliance&& from) noexcept
    : PBAppliance() {
    *this = ::std::move(from);
  }

  inline PBAppliance& operator=(const PBAppliance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAppliance& operator=(PBAppliance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBAppliance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBAppliance* internal_default_instance() {
    return reinterpret_cast<const PBAppliance*>(
               &_PBAppliance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PBAppliance& a, PBAppliance& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAppliance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAppliance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBAppliance* New() const final {
    return CreateMaybeMessage<PBAppliance>(nullptr);
  }

  PBAppliance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBAppliance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBAppliance& from);
  void MergeFrom(const PBAppliance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAppliance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBAppliance";
  }
  protected:
  explicit PBAppliance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kElectronicsFieldNumber = 2,
  };
  // string size = 1;
  void clear_size();
  const std::string& size() const;
  void set_size(const std::string& value);
  void set_size(std::string&& value);
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  std::string* mutable_size();
  std::string* release_size();
  void set_allocated_size(std::string* size);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_size();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_size(
      std::string* size);
  private:
  const std::string& _internal_size() const;
  void _internal_set_size(const std::string& value);
  std::string* _internal_mutable_size();
  public:

  // .PBElectronics electronics = 2;
  bool has_electronics() const;
  private:
  bool _internal_has_electronics() const;
  public:
  void clear_electronics();
  const ::PBElectronics& electronics() const;
  ::PBElectronics* release_electronics();
  ::PBElectronics* mutable_electronics();
  void set_allocated_electronics(::PBElectronics* electronics);
  private:
  const ::PBElectronics& _internal_electronics() const;
  ::PBElectronics* _internal_mutable_electronics();
  public:
  void unsafe_arena_set_allocated_electronics(
      ::PBElectronics* electronics);
  ::PBElectronics* unsafe_arena_release_electronics();

  // @@protoc_insertion_point(class_scope:PBAppliance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
  ::PBElectronics* electronics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBFurniture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBFurniture) */ {
 public:
  inline PBFurniture() : PBFurniture(nullptr) {};
  virtual ~PBFurniture();

  PBFurniture(const PBFurniture& from);
  PBFurniture(PBFurniture&& from) noexcept
    : PBFurniture() {
    *this = ::std::move(from);
  }

  inline PBFurniture& operator=(const PBFurniture& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBFurniture& operator=(PBFurniture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBFurniture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBFurniture* internal_default_instance() {
    return reinterpret_cast<const PBFurniture*>(
               &_PBFurniture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PBFurniture& a, PBFurniture& b) {
    a.Swap(&b);
  }
  inline void Swap(PBFurniture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBFurniture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBFurniture* New() const final {
    return CreateMaybeMessage<PBFurniture>(nullptr);
  }

  PBFurniture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBFurniture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBFurniture& from);
  void MergeFrom(const PBFurniture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBFurniture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBFurniture";
  }
  protected:
  explicit PBFurniture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialFieldNumber = 1,
    kProductFieldNumber = 2,
  };
  // string material = 1;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_material();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_material(
      std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .PBProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::PBProduct& product() const;
  ::PBProduct* release_product();
  ::PBProduct* mutable_product();
  void set_allocated_product(::PBProduct* product);
  private:
  const ::PBProduct& _internal_product() const;
  ::PBProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::PBProduct* product);
  ::PBProduct* unsafe_arena_release_product();

  // @@protoc_insertion_point(class_scope:PBFurniture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::PBProduct* product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBDecor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBDecor) */ {
 public:
  inline PBDecor() : PBDecor(nullptr) {};
  virtual ~PBDecor();

  PBDecor(const PBDecor& from);
  PBDecor(PBDecor&& from) noexcept
    : PBDecor() {
    *this = ::std::move(from);
  }

  inline PBDecor& operator=(const PBDecor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBDecor& operator=(PBDecor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBDecor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBDecor* internal_default_instance() {
    return reinterpret_cast<const PBDecor*>(
               &_PBDecor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PBDecor& a, PBDecor& b) {
    a.Swap(&b);
  }
  inline void Swap(PBDecor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBDecor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBDecor* New() const final {
    return CreateMaybeMessage<PBDecor>(nullptr);
  }

  PBDecor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBDecor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBDecor& from);
  void MergeFrom(const PBDecor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDecor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBDecor";
  }
  protected:
  explicit PBDecor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleFieldNumber = 1,
    kFurnitureFieldNumber = 2,
  };
  // string style = 1;
  void clear_style();
  const std::string& style() const;
  void set_style(const std::string& value);
  void set_style(std::string&& value);
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  std::string* mutable_style();
  std::string* release_style();
  void set_allocated_style(std::string* style);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_style();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_style(
      std::string* style);
  private:
  const std::string& _internal_style() const;
  void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // .PBFurniture furniture = 2;
  bool has_furniture() const;
  private:
  bool _internal_has_furniture() const;
  public:
  void clear_furniture();
  const ::PBFurniture& furniture() const;
  ::PBFurniture* release_furniture();
  ::PBFurniture* mutable_furniture();
  void set_allocated_furniture(::PBFurniture* furniture);
  private:
  const ::PBFurniture& _internal_furniture() const;
  ::PBFurniture* _internal_mutable_furniture();
  public:
  void unsafe_arena_set_allocated_furniture(
      ::PBFurniture* furniture);
  ::PBFurniture* unsafe_arena_release_furniture();

  // @@protoc_insertion_point(class_scope:PBDecor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  ::PBFurniture* furniture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBStorage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBStorage) */ {
 public:
  inline PBStorage() : PBStorage(nullptr) {};
  virtual ~PBStorage();

  PBStorage(const PBStorage& from);
  PBStorage(PBStorage&& from) noexcept
    : PBStorage() {
    *this = ::std::move(from);
  }

  inline PBStorage& operator=(const PBStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBStorage& operator=(PBStorage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBStorage* internal_default_instance() {
    return reinterpret_cast<const PBStorage*>(
               &_PBStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PBStorage& a, PBStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(PBStorage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBStorage* New() const final {
    return CreateMaybeMessage<PBStorage>(nullptr);
  }

  PBStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBStorage& from);
  void MergeFrom(const PBStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBStorage";
  }
  protected:
  explicit PBStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFurnitureFieldNumber = 2,
    kCapacityFieldNumber = 1,
  };
  // .PBFurniture furniture = 2;
  bool has_furniture() const;
  private:
  bool _internal_has_furniture() const;
  public:
  void clear_furniture();
  const ::PBFurniture& furniture() const;
  ::PBFurniture* release_furniture();
  ::PBFurniture* mutable_furniture();
  void set_allocated_furniture(::PBFurniture* furniture);
  private:
  const ::PBFurniture& _internal_furniture() const;
  ::PBFurniture* _internal_mutable_furniture();
  public:
  void unsafe_arena_set_allocated_furniture(
      ::PBFurniture* furniture);
  ::PBFurniture* unsafe_arena_release_furniture();

  // int32 capacity = 1;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBFurniture* furniture_;
  ::PROTOBUF_NAMESPACE_ID::int32 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBGames PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBGames) */ {
 public:
  inline PBGames() : PBGames(nullptr) {};
  virtual ~PBGames();

  PBGames(const PBGames& from);
  PBGames(PBGames&& from) noexcept
    : PBGames() {
    *this = ::std::move(from);
  }

  inline PBGames& operator=(const PBGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBGames& operator=(PBGames&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBGames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBGames* internal_default_instance() {
    return reinterpret_cast<const PBGames*>(
               &_PBGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PBGames& a, PBGames& b) {
    a.Swap(&b);
  }
  inline void Swap(PBGames* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBGames* New() const final {
    return CreateMaybeMessage<PBGames>(nullptr);
  }

  PBGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBGames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBGames& from);
  void MergeFrom(const PBGames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBGames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBGames";
  }
  protected:
  explicit PBGames(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenreFieldNumber = 1,
    kProductFieldNumber = 2,
  };
  // string genre = 1;
  void clear_genre();
  const std::string& genre() const;
  void set_genre(const std::string& value);
  void set_genre(std::string&& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  std::string* mutable_genre();
  std::string* release_genre();
  void set_allocated_genre(std::string* genre);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_genre();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_genre(
      std::string* genre);
  private:
  const std::string& _internal_genre() const;
  void _internal_set_genre(const std::string& value);
  std::string* _internal_mutable_genre();
  public:

  // .PBProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::PBProduct& product() const;
  ::PBProduct* release_product();
  ::PBProduct* mutable_product();
  void set_allocated_product(::PBProduct* product);
  private:
  const ::PBProduct& _internal_product() const;
  ::PBProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::PBProduct* product);
  ::PBProduct* unsafe_arena_release_product();

  // @@protoc_insertion_point(class_scope:PBGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genre_;
  ::PBProduct* product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBDigital PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBDigital) */ {
 public:
  inline PBDigital() : PBDigital(nullptr) {};
  virtual ~PBDigital();

  PBDigital(const PBDigital& from);
  PBDigital(PBDigital&& from) noexcept
    : PBDigital() {
    *this = ::std::move(from);
  }

  inline PBDigital& operator=(const PBDigital& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBDigital& operator=(PBDigital&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBDigital& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBDigital* internal_default_instance() {
    return reinterpret_cast<const PBDigital*>(
               &_PBDigital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PBDigital& a, PBDigital& b) {
    a.Swap(&b);
  }
  inline void Swap(PBDigital* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBDigital* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBDigital* New() const final {
    return CreateMaybeMessage<PBDigital>(nullptr);
  }

  PBDigital* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBDigital>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBDigital& from);
  void MergeFrom(const PBDigital& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDigital* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBDigital";
  }
  protected:
  explicit PBDigital(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeveloperFieldNumber = 1,
    kGamesFieldNumber = 2,
  };
  // string developer = 1;
  void clear_developer();
  const std::string& developer() const;
  void set_developer(const std::string& value);
  void set_developer(std::string&& value);
  void set_developer(const char* value);
  void set_developer(const char* value, size_t size);
  std::string* mutable_developer();
  std::string* release_developer();
  void set_allocated_developer(std::string* developer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_developer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_developer(
      std::string* developer);
  private:
  const std::string& _internal_developer() const;
  void _internal_set_developer(const std::string& value);
  std::string* _internal_mutable_developer();
  public:

  // .PBGames games = 2;
  bool has_games() const;
  private:
  bool _internal_has_games() const;
  public:
  void clear_games();
  const ::PBGames& games() const;
  ::PBGames* release_games();
  ::PBGames* mutable_games();
  void set_allocated_games(::PBGames* games);
  private:
  const ::PBGames& _internal_games() const;
  ::PBGames* _internal_mutable_games();
  public:
  void unsafe_arena_set_allocated_games(
      ::PBGames* games);
  ::PBGames* unsafe_arena_release_games();

  // @@protoc_insertion_point(class_scope:PBDigital)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr developer_;
  ::PBGames* games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBPhysical PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBPhysical) */ {
 public:
  inline PBPhysical() : PBPhysical(nullptr) {};
  virtual ~PBPhysical();

  PBPhysical(const PBPhysical& from);
  PBPhysical(PBPhysical&& from) noexcept
    : PBPhysical() {
    *this = ::std::move(from);
  }

  inline PBPhysical& operator=(const PBPhysical& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBPhysical& operator=(PBPhysical&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBPhysical& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBPhysical* internal_default_instance() {
    return reinterpret_cast<const PBPhysical*>(
               &_PBPhysical_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PBPhysical& a, PBPhysical& b) {
    a.Swap(&b);
  }
  inline void Swap(PBPhysical* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBPhysical* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBPhysical* New() const final {
    return CreateMaybeMessage<PBPhysical>(nullptr);
  }

  PBPhysical* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBPhysical>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBPhysical& from);
  void MergeFrom(const PBPhysical& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBPhysical* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBPhysical";
  }
  protected:
  explicit PBPhysical(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 2,
    kNumberOfPlayersFieldNumber = 1,
  };
  // .PBGames games = 2;
  bool has_games() const;
  private:
  bool _internal_has_games() const;
  public:
  void clear_games();
  const ::PBGames& games() const;
  ::PBGames* release_games();
  ::PBGames* mutable_games();
  void set_allocated_games(::PBGames* games);
  private:
  const ::PBGames& _internal_games() const;
  ::PBGames* _internal_mutable_games();
  public:
  void unsafe_arena_set_allocated_games(
      ::PBGames* games);
  ::PBGames* unsafe_arena_release_games();

  // int32 numberOfPlayers = 1;
  void clear_numberofplayers();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofplayers() const;
  void set_numberofplayers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofplayers() const;
  void _internal_set_numberofplayers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBPhysical)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBGames* games_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofplayers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBFlora PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBFlora) */ {
 public:
  inline PBFlora() : PBFlora(nullptr) {};
  virtual ~PBFlora();

  PBFlora(const PBFlora& from);
  PBFlora(PBFlora&& from) noexcept
    : PBFlora() {
    *this = ::std::move(from);
  }

  inline PBFlora& operator=(const PBFlora& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBFlora& operator=(PBFlora&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBFlora& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBFlora* internal_default_instance() {
    return reinterpret_cast<const PBFlora*>(
               &_PBFlora_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PBFlora& a, PBFlora& b) {
    a.Swap(&b);
  }
  inline void Swap(PBFlora* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBFlora* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBFlora* New() const final {
    return CreateMaybeMessage<PBFlora>(nullptr);
  }

  PBFlora* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBFlora>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBFlora& from);
  void MergeFrom(const PBFlora& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBFlora* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBFlora";
  }
  protected:
  explicit PBFlora(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductFieldNumber = 2,
    kIscultivatedFieldNumber = 1,
  };
  // .PBProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::PBProduct& product() const;
  ::PBProduct* release_product();
  ::PBProduct* mutable_product();
  void set_allocated_product(::PBProduct* product);
  private:
  const ::PBProduct& _internal_product() const;
  ::PBProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::PBProduct* product);
  ::PBProduct* unsafe_arena_release_product();

  // bool iscultivated = 1;
  void clear_iscultivated();
  bool iscultivated() const;
  void set_iscultivated(bool value);
  private:
  bool _internal_iscultivated() const;
  void _internal_set_iscultivated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PBFlora)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBProduct* product_;
  bool iscultivated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBPlants PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBPlants) */ {
 public:
  inline PBPlants() : PBPlants(nullptr) {};
  virtual ~PBPlants();

  PBPlants(const PBPlants& from);
  PBPlants(PBPlants&& from) noexcept
    : PBPlants() {
    *this = ::std::move(from);
  }

  inline PBPlants& operator=(const PBPlants& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBPlants& operator=(PBPlants&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBPlants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBPlants* internal_default_instance() {
    return reinterpret_cast<const PBPlants*>(
               &_PBPlants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PBPlants& a, PBPlants& b) {
    a.Swap(&b);
  }
  inline void Swap(PBPlants* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBPlants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBPlants* New() const final {
    return CreateMaybeMessage<PBPlants>(nullptr);
  }

  PBPlants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBPlants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBPlants& from);
  void MergeFrom(const PBPlants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBPlants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBPlants";
  }
  protected:
  explicit PBPlants(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloraFieldNumber = 2,
    kBearsFruitFieldNumber = 1,
  };
  // .PBFlora flora = 2;
  bool has_flora() const;
  private:
  bool _internal_has_flora() const;
  public:
  void clear_flora();
  const ::PBFlora& flora() const;
  ::PBFlora* release_flora();
  ::PBFlora* mutable_flora();
  void set_allocated_flora(::PBFlora* flora);
  private:
  const ::PBFlora& _internal_flora() const;
  ::PBFlora* _internal_mutable_flora();
  public:
  void unsafe_arena_set_allocated_flora(
      ::PBFlora* flora);
  ::PBFlora* unsafe_arena_release_flora();

  // bool bearsFruit = 1;
  void clear_bearsfruit();
  bool bearsfruit() const;
  void set_bearsfruit(bool value);
  private:
  bool _internal_bearsfruit() const;
  void _internal_set_bearsfruit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PBPlants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBFlora* flora_;
  bool bearsfruit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBSeeds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBSeeds) */ {
 public:
  inline PBSeeds() : PBSeeds(nullptr) {};
  virtual ~PBSeeds();

  PBSeeds(const PBSeeds& from);
  PBSeeds(PBSeeds&& from) noexcept
    : PBSeeds() {
    *this = ::std::move(from);
  }

  inline PBSeeds& operator=(const PBSeeds& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBSeeds& operator=(PBSeeds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBSeeds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBSeeds* internal_default_instance() {
    return reinterpret_cast<const PBSeeds*>(
               &_PBSeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PBSeeds& a, PBSeeds& b) {
    a.Swap(&b);
  }
  inline void Swap(PBSeeds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBSeeds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBSeeds* New() const final {
    return CreateMaybeMessage<PBSeeds>(nullptr);
  }

  PBSeeds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBSeeds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBSeeds& from);
  void MergeFrom(const PBSeeds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBSeeds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBSeeds";
  }
  protected:
  explicit PBSeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloraFieldNumber = 2,
    kExpirationDaysFieldNumber = 1,
  };
  // .PBFlora flora = 2;
  bool has_flora() const;
  private:
  bool _internal_has_flora() const;
  public:
  void clear_flora();
  const ::PBFlora& flora() const;
  ::PBFlora* release_flora();
  ::PBFlora* mutable_flora();
  void set_allocated_flora(::PBFlora* flora);
  private:
  const ::PBFlora& _internal_flora() const;
  ::PBFlora* _internal_mutable_flora();
  public:
  void unsafe_arena_set_allocated_flora(
      ::PBFlora* flora);
  ::PBFlora* unsafe_arena_release_flora();

  // int32 expirationDays = 1;
  void clear_expirationdays();
  ::PROTOBUF_NAMESPACE_ID::int32 expirationdays() const;
  void set_expirationdays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expirationdays() const;
  void _internal_set_expirationdays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBSeeds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBFlora* flora_;
  ::PROTOBUF_NAMESPACE_ID::int32 expirationdays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBStockItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBStockItem) */ {
 public:
  inline PBStockItem() : PBStockItem(nullptr) {};
  virtual ~PBStockItem();

  PBStockItem(const PBStockItem& from);
  PBStockItem(PBStockItem&& from) noexcept
    : PBStockItem() {
    *this = ::std::move(from);
  }

  inline PBStockItem& operator=(const PBStockItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBStockItem& operator=(PBStockItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBStockItem& default_instance();

  enum ProductTypeCase {
    kAccessory = 2,
    kClothing = 3,
    kFood = 4,
    kDrink = 5,
    kAppliance = 6,
    kTech = 7,
    kDecor = 8,
    kStorage = 9,
    kDigital = 10,
    kPhysical = 11,
    kPlants = 12,
    kSeeds = 13,
    PRODUCT_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBStockItem* internal_default_instance() {
    return reinterpret_cast<const PBStockItem*>(
               &_PBStockItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PBStockItem& a, PBStockItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PBStockItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBStockItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBStockItem* New() const final {
    return CreateMaybeMessage<PBStockItem>(nullptr);
  }

  PBStockItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBStockItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBStockItem& from);
  void MergeFrom(const PBStockItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBStockItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBStockItem";
  }
  protected:
  explicit PBStockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantityFieldNumber = 1,
    kAccessoryFieldNumber = 2,
    kClothingFieldNumber = 3,
    kFoodFieldNumber = 4,
    kDrinkFieldNumber = 5,
    kApplianceFieldNumber = 6,
    kTechFieldNumber = 7,
    kDecorFieldNumber = 8,
    kStorageFieldNumber = 9,
    kDigitalFieldNumber = 10,
    kPhysicalFieldNumber = 11,
    kPlantsFieldNumber = 12,
    kSeedsFieldNumber = 13,
  };
  // int32 quantity = 1;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PBAccessory accessory = 2;
  bool has_accessory() const;
  private:
  bool _internal_has_accessory() const;
  public:
  void clear_accessory();
  const ::PBAccessory& accessory() const;
  ::PBAccessory* release_accessory();
  ::PBAccessory* mutable_accessory();
  void set_allocated_accessory(::PBAccessory* accessory);
  private:
  const ::PBAccessory& _internal_accessory() const;
  ::PBAccessory* _internal_mutable_accessory();
  public:
  void unsafe_arena_set_allocated_accessory(
      ::PBAccessory* accessory);
  ::PBAccessory* unsafe_arena_release_accessory();

  // .PBClothing clothing = 3;
  bool has_clothing() const;
  private:
  bool _internal_has_clothing() const;
  public:
  void clear_clothing();
  const ::PBClothing& clothing() const;
  ::PBClothing* release_clothing();
  ::PBClothing* mutable_clothing();
  void set_allocated_clothing(::PBClothing* clothing);
  private:
  const ::PBClothing& _internal_clothing() const;
  ::PBClothing* _internal_mutable_clothing();
  public:
  void unsafe_arena_set_allocated_clothing(
      ::PBClothing* clothing);
  ::PBClothing* unsafe_arena_release_clothing();

  // .PBFood food = 4;
  bool has_food() const;
  private:
  bool _internal_has_food() const;
  public:
  void clear_food();
  const ::PBFood& food() const;
  ::PBFood* release_food();
  ::PBFood* mutable_food();
  void set_allocated_food(::PBFood* food);
  private:
  const ::PBFood& _internal_food() const;
  ::PBFood* _internal_mutable_food();
  public:
  void unsafe_arena_set_allocated_food(
      ::PBFood* food);
  ::PBFood* unsafe_arena_release_food();

  // .PBDrink drink = 5;
  bool has_drink() const;
  private:
  bool _internal_has_drink() const;
  public:
  void clear_drink();
  const ::PBDrink& drink() const;
  ::PBDrink* release_drink();
  ::PBDrink* mutable_drink();
  void set_allocated_drink(::PBDrink* drink);
  private:
  const ::PBDrink& _internal_drink() const;
  ::PBDrink* _internal_mutable_drink();
  public:
  void unsafe_arena_set_allocated_drink(
      ::PBDrink* drink);
  ::PBDrink* unsafe_arena_release_drink();

  // .PBAppliance appliance = 6;
  bool has_appliance() const;
  private:
  bool _internal_has_appliance() const;
  public:
  void clear_appliance();
  const ::PBAppliance& appliance() const;
  ::PBAppliance* release_appliance();
  ::PBAppliance* mutable_appliance();
  void set_allocated_appliance(::PBAppliance* appliance);
  private:
  const ::PBAppliance& _internal_appliance() const;
  ::PBAppliance* _internal_mutable_appliance();
  public:
  void unsafe_arena_set_allocated_appliance(
      ::PBAppliance* appliance);
  ::PBAppliance* unsafe_arena_release_appliance();

  // .PBTech tech = 7;
  bool has_tech() const;
  private:
  bool _internal_has_tech() const;
  public:
  void clear_tech();
  const ::PBTech& tech() const;
  ::PBTech* release_tech();
  ::PBTech* mutable_tech();
  void set_allocated_tech(::PBTech* tech);
  private:
  const ::PBTech& _internal_tech() const;
  ::PBTech* _internal_mutable_tech();
  public:
  void unsafe_arena_set_allocated_tech(
      ::PBTech* tech);
  ::PBTech* unsafe_arena_release_tech();

  // .PBDecor decor = 8;
  bool has_decor() const;
  private:
  bool _internal_has_decor() const;
  public:
  void clear_decor();
  const ::PBDecor& decor() const;
  ::PBDecor* release_decor();
  ::PBDecor* mutable_decor();
  void set_allocated_decor(::PBDecor* decor);
  private:
  const ::PBDecor& _internal_decor() const;
  ::PBDecor* _internal_mutable_decor();
  public:
  void unsafe_arena_set_allocated_decor(
      ::PBDecor* decor);
  ::PBDecor* unsafe_arena_release_decor();

  // .PBStorage storage = 9;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::PBStorage& storage() const;
  ::PBStorage* release_storage();
  ::PBStorage* mutable_storage();
  void set_allocated_storage(::PBStorage* storage);
  private:
  const ::PBStorage& _internal_storage() const;
  ::PBStorage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::PBStorage* storage);
  ::PBStorage* unsafe_arena_release_storage();

  // .PBDigital digital = 10;
  bool has_digital() const;
  private:
  bool _internal_has_digital() const;
  public:
  void clear_digital();
  const ::PBDigital& digital() const;
  ::PBDigital* release_digital();
  ::PBDigital* mutable_digital();
  void set_allocated_digital(::PBDigital* digital);
  private:
  const ::PBDigital& _internal_digital() const;
  ::PBDigital* _internal_mutable_digital();
  public:
  void unsafe_arena_set_allocated_digital(
      ::PBDigital* digital);
  ::PBDigital* unsafe_arena_release_digital();

  // .PBPhysical physical = 11;
  bool has_physical() const;
  private:
  bool _internal_has_physical() const;
  public:
  void clear_physical();
  const ::PBPhysical& physical() const;
  ::PBPhysical* release_physical();
  ::PBPhysical* mutable_physical();
  void set_allocated_physical(::PBPhysical* physical);
  private:
  const ::PBPhysical& _internal_physical() const;
  ::PBPhysical* _internal_mutable_physical();
  public:
  void unsafe_arena_set_allocated_physical(
      ::PBPhysical* physical);
  ::PBPhysical* unsafe_arena_release_physical();

  // .PBPlants plants = 12;
  bool has_plants() const;
  private:
  bool _internal_has_plants() const;
  public:
  void clear_plants();
  const ::PBPlants& plants() const;
  ::PBPlants* release_plants();
  ::PBPlants* mutable_plants();
  void set_allocated_plants(::PBPlants* plants);
  private:
  const ::PBPlants& _internal_plants() const;
  ::PBPlants* _internal_mutable_plants();
  public:
  void unsafe_arena_set_allocated_plants(
      ::PBPlants* plants);
  ::PBPlants* unsafe_arena_release_plants();

  // .PBSeeds seeds = 13;
  bool has_seeds() const;
  private:
  bool _internal_has_seeds() const;
  public:
  void clear_seeds();
  const ::PBSeeds& seeds() const;
  ::PBSeeds* release_seeds();
  ::PBSeeds* mutable_seeds();
  void set_allocated_seeds(::PBSeeds* seeds);
  private:
  const ::PBSeeds& _internal_seeds() const;
  ::PBSeeds* _internal_mutable_seeds();
  public:
  void unsafe_arena_set_allocated_seeds(
      ::PBSeeds* seeds);
  ::PBSeeds* unsafe_arena_release_seeds();

  void clear_product_type();
  ProductTypeCase product_type_case() const;
  // @@protoc_insertion_point(class_scope:PBStockItem)
 private:
  class _Internal;
  void set_has_accessory();
  void set_has_clothing();
  void set_has_food();
  void set_has_drink();
  void set_has_appliance();
  void set_has_tech();
  void set_has_decor();
  void set_has_storage();
  void set_has_digital();
  void set_has_physical();
  void set_has_plants();
  void set_has_seeds();

  inline bool has_product_type() const;
  inline void clear_has_product_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  union ProductTypeUnion {
    ProductTypeUnion() {}
    ::PBAccessory* accessory_;
    ::PBClothing* clothing_;
    ::PBFood* food_;
    ::PBDrink* drink_;
    ::PBAppliance* appliance_;
    ::PBTech* tech_;
    ::PBDecor* decor_;
    ::PBStorage* storage_;
    ::PBDigital* digital_;
    ::PBPhysical* physical_;
    ::PBPlants* plants_;
    ::PBSeeds* seeds_;
  } product_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBStock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBStock) */ {
 public:
  inline PBStock() : PBStock(nullptr) {};
  virtual ~PBStock();

  PBStock(const PBStock& from);
  PBStock(PBStock&& from) noexcept
    : PBStock() {
    *this = ::std::move(from);
  }

  inline PBStock& operator=(const PBStock& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBStock& operator=(PBStock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBStock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBStock* internal_default_instance() {
    return reinterpret_cast<const PBStock*>(
               &_PBStock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PBStock& a, PBStock& b) {
    a.Swap(&b);
  }
  inline void Swap(PBStock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBStock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBStock* New() const final {
    return CreateMaybeMessage<PBStock>(nullptr);
  }

  PBStock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBStock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBStock& from);
  void MergeFrom(const PBStock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBStock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBStock";
  }
  protected:
  explicit PBStock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockFieldNumber = 1,
  };
  // repeated .PBStockItem stock = 1;
  int stock_size() const;
  private:
  int _internal_stock_size() const;
  public:
  void clear_stock();
  ::PBStockItem* mutable_stock(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBStockItem >*
      mutable_stock();
  private:
  const ::PBStockItem& _internal_stock(int index) const;
  ::PBStockItem* _internal_add_stock();
  public:
  const ::PBStockItem& stock(int index) const;
  ::PBStockItem* add_stock();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBStockItem >&
      stock() const;

  // @@protoc_insertion_point(class_scope:PBStock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBStockItem > stock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBTransport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBTransport) */ {
 public:
  inline PBTransport() : PBTransport(nullptr) {};
  virtual ~PBTransport();

  PBTransport(const PBTransport& from);
  PBTransport(PBTransport&& from) noexcept
    : PBTransport() {
    *this = ::std::move(from);
  }

  inline PBTransport& operator=(const PBTransport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBTransport& operator=(PBTransport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBTransport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBTransport* internal_default_instance() {
    return reinterpret_cast<const PBTransport*>(
               &_PBTransport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PBTransport& a, PBTransport& b) {
    a.Swap(&b);
  }
  inline void Swap(PBTransport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBTransport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBTransport* New() const final {
    return CreateMaybeMessage<PBTransport>(nullptr);
  }

  PBTransport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBTransport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBTransport& from);
  void MergeFrom(const PBTransport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTransport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBTransport";
  }
  protected:
  explicit PBTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 4,
    kCodeFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kCostPerMeterFieldNumber = 3,
  };
  // string route = 4;
  void clear_route();
  const std::string& route() const;
  void set_route(const std::string& value);
  void set_route(std::string&& value);
  void set_route(const char* value);
  void set_route(const char* value, size_t size);
  std::string* mutable_route();
  std::string* release_route();
  void set_allocated_route(std::string* route);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_route();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_route(
      std::string* route);
  private:
  const std::string& _internal_route() const;
  void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float costPerMeter = 3;
  void clear_costpermeter();
  float costpermeter() const;
  void set_costpermeter(float value);
  private:
  float _internal_costpermeter() const;
  void _internal_set_costpermeter(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBTransport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  float speed_;
  float costpermeter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBAirTransport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBAirTransport) */ {
 public:
  inline PBAirTransport() : PBAirTransport(nullptr) {};
  virtual ~PBAirTransport();

  PBAirTransport(const PBAirTransport& from);
  PBAirTransport(PBAirTransport&& from) noexcept
    : PBAirTransport() {
    *this = ::std::move(from);
  }

  inline PBAirTransport& operator=(const PBAirTransport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAirTransport& operator=(PBAirTransport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBAirTransport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBAirTransport* internal_default_instance() {
    return reinterpret_cast<const PBAirTransport*>(
               &_PBAirTransport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PBAirTransport& a, PBAirTransport& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAirTransport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAirTransport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBAirTransport* New() const final {
    return CreateMaybeMessage<PBAirTransport>(nullptr);
  }

  PBAirTransport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBAirTransport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBAirTransport& from);
  void MergeFrom(const PBAirTransport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAirTransport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBAirTransport";
  }
  protected:
  explicit PBAirTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kTransportFieldNumber = 2,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model(
      std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .PBTransport transport = 2;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::PBTransport& transport() const;
  ::PBTransport* release_transport();
  ::PBTransport* mutable_transport();
  void set_allocated_transport(::PBTransport* transport);
  private:
  const ::PBTransport& _internal_transport() const;
  ::PBTransport* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::PBTransport* transport);
  ::PBTransport* unsafe_arena_release_transport();

  // @@protoc_insertion_point(class_scope:PBAirTransport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PBTransport* transport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBLandTransport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBLandTransport) */ {
 public:
  inline PBLandTransport() : PBLandTransport(nullptr) {};
  virtual ~PBLandTransport();

  PBLandTransport(const PBLandTransport& from);
  PBLandTransport(PBLandTransport&& from) noexcept
    : PBLandTransport() {
    *this = ::std::move(from);
  }

  inline PBLandTransport& operator=(const PBLandTransport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBLandTransport& operator=(PBLandTransport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBLandTransport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBLandTransport* internal_default_instance() {
    return reinterpret_cast<const PBLandTransport*>(
               &_PBLandTransport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PBLandTransport& a, PBLandTransport& b) {
    a.Swap(&b);
  }
  inline void Swap(PBLandTransport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBLandTransport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBLandTransport* New() const final {
    return CreateMaybeMessage<PBLandTransport>(nullptr);
  }

  PBLandTransport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBLandTransport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBLandTransport& from);
  void MergeFrom(const PBLandTransport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBLandTransport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBLandTransport";
  }
  protected:
  explicit PBLandTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTransportFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .PBTransport transport = 2;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::PBTransport& transport() const;
  ::PBTransport* release_transport();
  ::PBTransport* mutable_transport();
  void set_allocated_transport(::PBTransport* transport);
  private:
  const ::PBTransport& _internal_transport() const;
  ::PBTransport* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::PBTransport* transport);
  ::PBTransport* unsafe_arena_release_transport();

  // @@protoc_insertion_point(class_scope:PBLandTransport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PBTransport* transport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBSeaTransport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBSeaTransport) */ {
 public:
  inline PBSeaTransport() : PBSeaTransport(nullptr) {};
  virtual ~PBSeaTransport();

  PBSeaTransport(const PBSeaTransport& from);
  PBSeaTransport(PBSeaTransport&& from) noexcept
    : PBSeaTransport() {
    *this = ::std::move(from);
  }

  inline PBSeaTransport& operator=(const PBSeaTransport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBSeaTransport& operator=(PBSeaTransport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBSeaTransport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBSeaTransport* internal_default_instance() {
    return reinterpret_cast<const PBSeaTransport*>(
               &_PBSeaTransport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PBSeaTransport& a, PBSeaTransport& b) {
    a.Swap(&b);
  }
  inline void Swap(PBSeaTransport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBSeaTransport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBSeaTransport* New() const final {
    return CreateMaybeMessage<PBSeaTransport>(nullptr);
  }

  PBSeaTransport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBSeaTransport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBSeaTransport& from);
  void MergeFrom(const PBSeaTransport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBSeaTransport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBSeaTransport";
  }
  protected:
  explicit PBSeaTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipnameFieldNumber = 1,
    kTransportFieldNumber = 2,
  };
  // string shipname = 1;
  void clear_shipname();
  const std::string& shipname() const;
  void set_shipname(const std::string& value);
  void set_shipname(std::string&& value);
  void set_shipname(const char* value);
  void set_shipname(const char* value, size_t size);
  std::string* mutable_shipname();
  std::string* release_shipname();
  void set_allocated_shipname(std::string* shipname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shipname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shipname(
      std::string* shipname);
  private:
  const std::string& _internal_shipname() const;
  void _internal_set_shipname(const std::string& value);
  std::string* _internal_mutable_shipname();
  public:

  // .PBTransport transport = 2;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::PBTransport& transport() const;
  ::PBTransport* release_transport();
  ::PBTransport* mutable_transport();
  void set_allocated_transport(::PBTransport* transport);
  private:
  const ::PBTransport& _internal_transport() const;
  ::PBTransport* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::PBTransport* transport);
  ::PBTransport* unsafe_arena_release_transport();

  // @@protoc_insertion_point(class_scope:PBSeaTransport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipname_;
  ::PBTransport* transport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBTransportItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBTransportItem) */ {
 public:
  inline PBTransportItem() : PBTransportItem(nullptr) {};
  virtual ~PBTransportItem();

  PBTransportItem(const PBTransportItem& from);
  PBTransportItem(PBTransportItem&& from) noexcept
    : PBTransportItem() {
    *this = ::std::move(from);
  }

  inline PBTransportItem& operator=(const PBTransportItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBTransportItem& operator=(PBTransportItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBTransportItem& default_instance();

  enum ProductTypeCase {
    kAirTransport = 1,
    kLandTransport = 2,
    kSeaTransport = 3,
    PRODUCT_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBTransportItem* internal_default_instance() {
    return reinterpret_cast<const PBTransportItem*>(
               &_PBTransportItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PBTransportItem& a, PBTransportItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PBTransportItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBTransportItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBTransportItem* New() const final {
    return CreateMaybeMessage<PBTransportItem>(nullptr);
  }

  PBTransportItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBTransportItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBTransportItem& from);
  void MergeFrom(const PBTransportItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTransportItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBTransportItem";
  }
  protected:
  explicit PBTransportItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirTransportFieldNumber = 1,
    kLandTransportFieldNumber = 2,
    kSeaTransportFieldNumber = 3,
  };
  // .PBAirTransport airTransport = 1;
  bool has_airtransport() const;
  private:
  bool _internal_has_airtransport() const;
  public:
  void clear_airtransport();
  const ::PBAirTransport& airtransport() const;
  ::PBAirTransport* release_airtransport();
  ::PBAirTransport* mutable_airtransport();
  void set_allocated_airtransport(::PBAirTransport* airtransport);
  private:
  const ::PBAirTransport& _internal_airtransport() const;
  ::PBAirTransport* _internal_mutable_airtransport();
  public:
  void unsafe_arena_set_allocated_airtransport(
      ::PBAirTransport* airtransport);
  ::PBAirTransport* unsafe_arena_release_airtransport();

  // .PBLandTransport landTransport = 2;
  bool has_landtransport() const;
  private:
  bool _internal_has_landtransport() const;
  public:
  void clear_landtransport();
  const ::PBLandTransport& landtransport() const;
  ::PBLandTransport* release_landtransport();
  ::PBLandTransport* mutable_landtransport();
  void set_allocated_landtransport(::PBLandTransport* landtransport);
  private:
  const ::PBLandTransport& _internal_landtransport() const;
  ::PBLandTransport* _internal_mutable_landtransport();
  public:
  void unsafe_arena_set_allocated_landtransport(
      ::PBLandTransport* landtransport);
  ::PBLandTransport* unsafe_arena_release_landtransport();

  // .PBSeaTransport seaTransport = 3;
  bool has_seatransport() const;
  private:
  bool _internal_has_seatransport() const;
  public:
  void clear_seatransport();
  const ::PBSeaTransport& seatransport() const;
  ::PBSeaTransport* release_seatransport();
  ::PBSeaTransport* mutable_seatransport();
  void set_allocated_seatransport(::PBSeaTransport* seatransport);
  private:
  const ::PBSeaTransport& _internal_seatransport() const;
  ::PBSeaTransport* _internal_mutable_seatransport();
  public:
  void unsafe_arena_set_allocated_seatransport(
      ::PBSeaTransport* seatransport);
  ::PBSeaTransport* unsafe_arena_release_seatransport();

  void clear_product_type();
  ProductTypeCase product_type_case() const;
  // @@protoc_insertion_point(class_scope:PBTransportItem)
 private:
  class _Internal;
  void set_has_airtransport();
  void set_has_landtransport();
  void set_has_seatransport();

  inline bool has_product_type() const;
  inline void clear_has_product_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ProductTypeUnion {
    ProductTypeUnion() {}
    ::PBAirTransport* airtransport_;
    ::PBLandTransport* landtransport_;
    ::PBSeaTransport* seatransport_;
  } product_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBTransportList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBTransportList) */ {
 public:
  inline PBTransportList() : PBTransportList(nullptr) {};
  virtual ~PBTransportList();

  PBTransportList(const PBTransportList& from);
  PBTransportList(PBTransportList&& from) noexcept
    : PBTransportList() {
    *this = ::std::move(from);
  }

  inline PBTransportList& operator=(const PBTransportList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBTransportList& operator=(PBTransportList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBTransportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBTransportList* internal_default_instance() {
    return reinterpret_cast<const PBTransportList*>(
               &_PBTransportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PBTransportList& a, PBTransportList& b) {
    a.Swap(&b);
  }
  inline void Swap(PBTransportList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBTransportList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBTransportList* New() const final {
    return CreateMaybeMessage<PBTransportList>(nullptr);
  }

  PBTransportList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBTransportList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBTransportList& from);
  void MergeFrom(const PBTransportList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTransportList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBTransportList";
  }
  protected:
  explicit PBTransportList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportListFieldNumber = 1,
  };
  // repeated .PBTransportItem transportList = 1;
  int transportlist_size() const;
  private:
  int _internal_transportlist_size() const;
  public:
  void clear_transportlist();
  ::PBTransportItem* mutable_transportlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBTransportItem >*
      mutable_transportlist();
  private:
  const ::PBTransportItem& _internal_transportlist(int index) const;
  ::PBTransportItem* _internal_add_transportlist();
  public:
  const ::PBTransportItem& transportlist(int index) const;
  ::PBTransportItem* add_transportlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBTransportItem >&
      transportlist() const;

  // @@protoc_insertion_point(class_scope:PBTransportList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBTransportItem > transportlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBShipment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShipment) */ {
 public:
  inline PBShipment() : PBShipment(nullptr) {};
  virtual ~PBShipment();

  PBShipment(const PBShipment& from);
  PBShipment(PBShipment&& from) noexcept
    : PBShipment() {
    *this = ::std::move(from);
  }

  inline PBShipment& operator=(const PBShipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBShipment& operator=(PBShipment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBShipment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBShipment* internal_default_instance() {
    return reinterpret_cast<const PBShipment*>(
               &_PBShipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PBShipment& a, PBShipment& b) {
    a.Swap(&b);
  }
  inline void Swap(PBShipment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBShipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBShipment* New() const final {
    return CreateMaybeMessage<PBShipment>(nullptr);
  }

  PBShipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBShipment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBShipment& from);
  void MergeFrom(const PBShipment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBShipment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShipment";
  }
  protected:
  explicit PBShipment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerFieldNumber = 2,
    kProductlistFieldNumber = 6,
    kTransportFieldNumber = 7,
    kIDFieldNumber = 1,
    kDistanceFieldNumber = 3,
    kCostFieldNumber = 4,
    kDispatchedFieldNumber = 5,
  };
  // string customer = 2;
  void clear_customer();
  const std::string& customer() const;
  void set_customer(const std::string& value);
  void set_customer(std::string&& value);
  void set_customer(const char* value);
  void set_customer(const char* value, size_t size);
  std::string* mutable_customer();
  std::string* release_customer();
  void set_allocated_customer(std::string* customer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_customer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_customer(
      std::string* customer);
  private:
  const std::string& _internal_customer() const;
  void _internal_set_customer(const std::string& value);
  std::string* _internal_mutable_customer();
  public:

  // .PBStock productlist = 6;
  bool has_productlist() const;
  private:
  bool _internal_has_productlist() const;
  public:
  void clear_productlist();
  const ::PBStock& productlist() const;
  ::PBStock* release_productlist();
  ::PBStock* mutable_productlist();
  void set_allocated_productlist(::PBStock* productlist);
  private:
  const ::PBStock& _internal_productlist() const;
  ::PBStock* _internal_mutable_productlist();
  public:
  void unsafe_arena_set_allocated_productlist(
      ::PBStock* productlist);
  ::PBStock* unsafe_arena_release_productlist();

  // .PBTransportItem transport = 7;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::PBTransportItem& transport() const;
  ::PBTransportItem* release_transport();
  ::PBTransportItem* mutable_transport();
  void set_allocated_transport(::PBTransportItem* transport);
  private:
  const ::PBTransportItem& _internal_transport() const;
  ::PBTransportItem* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::PBTransportItem* transport);
  ::PBTransportItem* unsafe_arena_release_transport();

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float distance = 3;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // float cost = 4;
  void clear_cost();
  float cost() const;
  void set_cost(float value);
  private:
  float _internal_cost() const;
  void _internal_set_cost(float value);
  public:

  // bool dispatched = 5;
  void clear_dispatched();
  bool dispatched() const;
  void set_dispatched(bool value);
  private:
  bool _internal_dispatched() const;
  void _internal_set_dispatched(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PBShipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_;
  ::PBStock* productlist_;
  ::PBTransportItem* transport_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float distance_;
  float cost_;
  bool dispatched_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// -------------------------------------------------------------------

class PBShipmentList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShipmentList) */ {
 public:
  inline PBShipmentList() : PBShipmentList(nullptr) {};
  virtual ~PBShipmentList();

  PBShipmentList(const PBShipmentList& from);
  PBShipmentList(PBShipmentList&& from) noexcept
    : PBShipmentList() {
    *this = ::std::move(from);
  }

  inline PBShipmentList& operator=(const PBShipmentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBShipmentList& operator=(PBShipmentList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBShipmentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBShipmentList* internal_default_instance() {
    return reinterpret_cast<const PBShipmentList*>(
               &_PBShipmentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PBShipmentList& a, PBShipmentList& b) {
    a.Swap(&b);
  }
  inline void Swap(PBShipmentList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBShipmentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBShipmentList* New() const final {
    return CreateMaybeMessage<PBShipmentList>(nullptr);
  }

  PBShipmentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBShipmentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBShipmentList& from);
  void MergeFrom(const PBShipmentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBShipmentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShipmentList";
  }
  protected:
  explicit PBShipmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PBLogistics_2eproto);
    return ::descriptor_table_PBLogistics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipmentListFieldNumber = 1,
  };
  // repeated .PBShipment shipmentList = 1;
  int shipmentlist_size() const;
  private:
  int _internal_shipmentlist_size() const;
  public:
  void clear_shipmentlist();
  ::PBShipment* mutable_shipmentlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBShipment >*
      mutable_shipmentlist();
  private:
  const ::PBShipment& _internal_shipmentlist(int index) const;
  ::PBShipment* _internal_add_shipmentlist();
  public:
  const ::PBShipment& shipmentlist(int index) const;
  ::PBShipment* add_shipmentlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBShipment >&
      shipmentlist() const;

  // @@protoc_insertion_point(class_scope:PBShipmentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBShipment > shipmentlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBLogistics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBPackage

// int32 units = 1;
inline void PBPackage::clear_units() {
  units_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBPackage::_internal_units() const {
  return units_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBPackage::units() const {
  // @@protoc_insertion_point(field_get:PBPackage.units)
  return _internal_units();
}
inline void PBPackage::_internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  units_ = value;
}
inline void PBPackage::set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:PBPackage.units)
}

// float costPerUnit = 2;
inline void PBPackage::clear_costperunit() {
  costperunit_ = 0;
}
inline float PBPackage::_internal_costperunit() const {
  return costperunit_;
}
inline float PBPackage::costperunit() const {
  // @@protoc_insertion_point(field_get:PBPackage.costPerUnit)
  return _internal_costperunit();
}
inline void PBPackage::_internal_set_costperunit(float value) {
  
  costperunit_ = value;
}
inline void PBPackage::set_costperunit(float value) {
  _internal_set_costperunit(value);
  // @@protoc_insertion_point(field_set:PBPackage.costPerUnit)
}

// -------------------------------------------------------------------

// PBProduct

// float cost = 1;
inline void PBProduct::clear_cost() {
  cost_ = 0;
}
inline float PBProduct::_internal_cost() const {
  return cost_;
}
inline float PBProduct::cost() const {
  // @@protoc_insertion_point(field_get:PBProduct.cost)
  return _internal_cost();
}
inline void PBProduct::_internal_set_cost(float value) {
  
  cost_ = value;
}
inline void PBProduct::set_cost(float value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PBProduct.cost)
}

// string name = 2;
inline void PBProduct::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBProduct::name() const {
  // @@protoc_insertion_point(field_get:PBProduct.name)
  return _internal_name();
}
inline void PBProduct::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PBProduct.name)
}
inline std::string* PBProduct::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PBProduct.name)
  return _internal_mutable_name();
}
inline const std::string& PBProduct::_internal_name() const {
  return name_.Get();
}
inline void PBProduct::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBProduct::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBProduct.name)
}
inline void PBProduct::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBProduct.name)
}
inline void PBProduct::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBProduct.name)
}
inline std::string* PBProduct::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBProduct::release_name() {
  // @@protoc_insertion_point(field_release:PBProduct.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBProduct::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBProduct.name)
}
inline std::string* PBProduct::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBProduct.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBProduct::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBProduct.name)
}

// string supplier = 3;
inline void PBProduct::clear_supplier() {
  supplier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBProduct::supplier() const {
  // @@protoc_insertion_point(field_get:PBProduct.supplier)
  return _internal_supplier();
}
inline void PBProduct::set_supplier(const std::string& value) {
  _internal_set_supplier(value);
  // @@protoc_insertion_point(field_set:PBProduct.supplier)
}
inline std::string* PBProduct::mutable_supplier() {
  // @@protoc_insertion_point(field_mutable:PBProduct.supplier)
  return _internal_mutable_supplier();
}
inline const std::string& PBProduct::_internal_supplier() const {
  return supplier_.Get();
}
inline void PBProduct::_internal_set_supplier(const std::string& value) {
  
  supplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBProduct::set_supplier(std::string&& value) {
  
  supplier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBProduct.supplier)
}
inline void PBProduct::set_supplier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  supplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBProduct.supplier)
}
inline void PBProduct::set_supplier(const char* value,
    size_t size) {
  
  supplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBProduct.supplier)
}
inline std::string* PBProduct::_internal_mutable_supplier() {
  
  return supplier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBProduct::release_supplier() {
  // @@protoc_insertion_point(field_release:PBProduct.supplier)
  return supplier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBProduct::set_allocated_supplier(std::string* supplier) {
  if (supplier != nullptr) {
    
  } else {
    
  }
  supplier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supplier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBProduct.supplier)
}
inline std::string* PBProduct::unsafe_arena_release_supplier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBProduct.supplier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return supplier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBProduct::unsafe_arena_set_allocated_supplier(
    std::string* supplier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (supplier != nullptr) {
    
  } else {
    
  }
  supplier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      supplier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBProduct.supplier)
}

// float discountAmount = 4;
inline void PBProduct::clear_discountamount() {
  discountamount_ = 0;
}
inline float PBProduct::_internal_discountamount() const {
  return discountamount_;
}
inline float PBProduct::discountamount() const {
  // @@protoc_insertion_point(field_get:PBProduct.discountAmount)
  return _internal_discountamount();
}
inline void PBProduct::_internal_set_discountamount(float value) {
  
  discountamount_ = value;
}
inline void PBProduct::set_discountamount(float value) {
  _internal_set_discountamount(value);
  // @@protoc_insertion_point(field_set:PBProduct.discountAmount)
}

// .PBPackage packaging = 5;
inline bool PBProduct::_internal_has_packaging() const {
  return this != internal_default_instance() && packaging_ != nullptr;
}
inline bool PBProduct::has_packaging() const {
  return _internal_has_packaging();
}
inline void PBProduct::clear_packaging() {
  if (GetArena() == nullptr && packaging_ != nullptr) {
    delete packaging_;
  }
  packaging_ = nullptr;
}
inline const ::PBPackage& PBProduct::_internal_packaging() const {
  const ::PBPackage* p = packaging_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBPackage*>(
      &::_PBPackage_default_instance_);
}
inline const ::PBPackage& PBProduct::packaging() const {
  // @@protoc_insertion_point(field_get:PBProduct.packaging)
  return _internal_packaging();
}
inline void PBProduct::unsafe_arena_set_allocated_packaging(
    ::PBPackage* packaging) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packaging_);
  }
  packaging_ = packaging;
  if (packaging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBProduct.packaging)
}
inline ::PBPackage* PBProduct::release_packaging() {
  auto temp = unsafe_arena_release_packaging();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBPackage* PBProduct::unsafe_arena_release_packaging() {
  // @@protoc_insertion_point(field_release:PBProduct.packaging)
  
  ::PBPackage* temp = packaging_;
  packaging_ = nullptr;
  return temp;
}
inline ::PBPackage* PBProduct::_internal_mutable_packaging() {
  
  if (packaging_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBPackage>(GetArena());
    packaging_ = p;
  }
  return packaging_;
}
inline ::PBPackage* PBProduct::mutable_packaging() {
  // @@protoc_insertion_point(field_mutable:PBProduct.packaging)
  return _internal_mutable_packaging();
}
inline void PBProduct::set_allocated_packaging(::PBPackage* packaging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete packaging_;
  }
  if (packaging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(packaging);
    if (message_arena != submessage_arena) {
      packaging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packaging, submessage_arena);
    }
    
  } else {
    
  }
  packaging_ = packaging;
  // @@protoc_insertion_point(field_set_allocated:PBProduct.packaging)
}

// -------------------------------------------------------------------

// PBApparel

// string material = 1;
inline void PBApparel::clear_material() {
  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBApparel::material() const {
  // @@protoc_insertion_point(field_get:PBApparel.material)
  return _internal_material();
}
inline void PBApparel::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:PBApparel.material)
}
inline std::string* PBApparel::mutable_material() {
  // @@protoc_insertion_point(field_mutable:PBApparel.material)
  return _internal_mutable_material();
}
inline const std::string& PBApparel::_internal_material() const {
  return material_.Get();
}
inline void PBApparel::_internal_set_material(const std::string& value) {
  
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBApparel::set_material(std::string&& value) {
  
  material_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBApparel.material)
}
inline void PBApparel::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBApparel.material)
}
inline void PBApparel::set_material(const char* value,
    size_t size) {
  
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBApparel.material)
}
inline std::string* PBApparel::_internal_mutable_material() {
  
  return material_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBApparel::release_material() {
  // @@protoc_insertion_point(field_release:PBApparel.material)
  return material_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBApparel::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBApparel.material)
}
inline std::string* PBApparel::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBApparel.material)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return material_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBApparel::unsafe_arena_set_allocated_material(
    std::string* material) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (material != nullptr) {
    
  } else {
    
  }
  material_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      material, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBApparel.material)
}

// .PBProduct product = 2;
inline bool PBApparel::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool PBApparel::has_product() const {
  return _internal_has_product();
}
inline void PBApparel::clear_product() {
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::PBProduct& PBApparel::_internal_product() const {
  const ::PBProduct* p = product_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBProduct*>(
      &::_PBProduct_default_instance_);
}
inline const ::PBProduct& PBApparel::product() const {
  // @@protoc_insertion_point(field_get:PBApparel.product)
  return _internal_product();
}
inline void PBApparel::unsafe_arena_set_allocated_product(
    ::PBProduct* product) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBApparel.product)
}
inline ::PBProduct* PBApparel::release_product() {
  auto temp = unsafe_arena_release_product();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBProduct* PBApparel::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:PBApparel.product)
  
  ::PBProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::PBProduct* PBApparel::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBProduct>(GetArena());
    product_ = p;
  }
  return product_;
}
inline ::PBProduct* PBApparel::mutable_product() {
  // @@protoc_insertion_point(field_mutable:PBApparel.product)
  return _internal_mutable_product();
}
inline void PBApparel::set_allocated_product(::PBProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:PBApparel.product)
}

// -------------------------------------------------------------------

// PBAccessory

// string brand = 1;
inline void PBAccessory::clear_brand() {
  brand_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBAccessory::brand() const {
  // @@protoc_insertion_point(field_get:PBAccessory.brand)
  return _internal_brand();
}
inline void PBAccessory::set_brand(const std::string& value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:PBAccessory.brand)
}
inline std::string* PBAccessory::mutable_brand() {
  // @@protoc_insertion_point(field_mutable:PBAccessory.brand)
  return _internal_mutable_brand();
}
inline const std::string& PBAccessory::_internal_brand() const {
  return brand_.Get();
}
inline void PBAccessory::_internal_set_brand(const std::string& value) {
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBAccessory::set_brand(std::string&& value) {
  
  brand_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBAccessory.brand)
}
inline void PBAccessory::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBAccessory.brand)
}
inline void PBAccessory::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBAccessory.brand)
}
inline std::string* PBAccessory::_internal_mutable_brand() {
  
  return brand_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBAccessory::release_brand() {
  // @@protoc_insertion_point(field_release:PBAccessory.brand)
  return brand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBAccessory::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBAccessory.brand)
}
inline std::string* PBAccessory::unsafe_arena_release_brand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBAccessory.brand)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return brand_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBAccessory::unsafe_arena_set_allocated_brand(
    std::string* brand) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      brand, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBAccessory.brand)
}

// .PBApparel apparel = 2;
inline bool PBAccessory::_internal_has_apparel() const {
  return this != internal_default_instance() && apparel_ != nullptr;
}
inline bool PBAccessory::has_apparel() const {
  return _internal_has_apparel();
}
inline void PBAccessory::clear_apparel() {
  if (GetArena() == nullptr && apparel_ != nullptr) {
    delete apparel_;
  }
  apparel_ = nullptr;
}
inline const ::PBApparel& PBAccessory::_internal_apparel() const {
  const ::PBApparel* p = apparel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBApparel*>(
      &::_PBApparel_default_instance_);
}
inline const ::PBApparel& PBAccessory::apparel() const {
  // @@protoc_insertion_point(field_get:PBAccessory.apparel)
  return _internal_apparel();
}
inline void PBAccessory::unsafe_arena_set_allocated_apparel(
    ::PBApparel* apparel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apparel_);
  }
  apparel_ = apparel;
  if (apparel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBAccessory.apparel)
}
inline ::PBApparel* PBAccessory::release_apparel() {
  auto temp = unsafe_arena_release_apparel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBApparel* PBAccessory::unsafe_arena_release_apparel() {
  // @@protoc_insertion_point(field_release:PBAccessory.apparel)
  
  ::PBApparel* temp = apparel_;
  apparel_ = nullptr;
  return temp;
}
inline ::PBApparel* PBAccessory::_internal_mutable_apparel() {
  
  if (apparel_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBApparel>(GetArena());
    apparel_ = p;
  }
  return apparel_;
}
inline ::PBApparel* PBAccessory::mutable_apparel() {
  // @@protoc_insertion_point(field_mutable:PBAccessory.apparel)
  return _internal_mutable_apparel();
}
inline void PBAccessory::set_allocated_apparel(::PBApparel* apparel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete apparel_;
  }
  if (apparel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apparel);
    if (message_arena != submessage_arena) {
      apparel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apparel, submessage_arena);
    }
    
  } else {
    
  }
  apparel_ = apparel;
  // @@protoc_insertion_point(field_set_allocated:PBAccessory.apparel)
}

// -------------------------------------------------------------------

// PBClothing

// string style = 1;
inline void PBClothing::clear_style() {
  style_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBClothing::style() const {
  // @@protoc_insertion_point(field_get:PBClothing.style)
  return _internal_style();
}
inline void PBClothing::set_style(const std::string& value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:PBClothing.style)
}
inline std::string* PBClothing::mutable_style() {
  // @@protoc_insertion_point(field_mutable:PBClothing.style)
  return _internal_mutable_style();
}
inline const std::string& PBClothing::_internal_style() const {
  return style_.Get();
}
inline void PBClothing::_internal_set_style(const std::string& value) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBClothing::set_style(std::string&& value) {
  
  style_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBClothing.style)
}
inline void PBClothing::set_style(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBClothing.style)
}
inline void PBClothing::set_style(const char* value,
    size_t size) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBClothing.style)
}
inline std::string* PBClothing::_internal_mutable_style() {
  
  return style_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBClothing::release_style() {
  // @@protoc_insertion_point(field_release:PBClothing.style)
  return style_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBClothing::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    
  } else {
    
  }
  style_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBClothing.style)
}
inline std::string* PBClothing::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBClothing.style)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return style_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBClothing::unsafe_arena_set_allocated_style(
    std::string* style) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (style != nullptr) {
    
  } else {
    
  }
  style_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      style, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBClothing.style)
}

// .PBApparel apparel = 2;
inline bool PBClothing::_internal_has_apparel() const {
  return this != internal_default_instance() && apparel_ != nullptr;
}
inline bool PBClothing::has_apparel() const {
  return _internal_has_apparel();
}
inline void PBClothing::clear_apparel() {
  if (GetArena() == nullptr && apparel_ != nullptr) {
    delete apparel_;
  }
  apparel_ = nullptr;
}
inline const ::PBApparel& PBClothing::_internal_apparel() const {
  const ::PBApparel* p = apparel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBApparel*>(
      &::_PBApparel_default_instance_);
}
inline const ::PBApparel& PBClothing::apparel() const {
  // @@protoc_insertion_point(field_get:PBClothing.apparel)
  return _internal_apparel();
}
inline void PBClothing::unsafe_arena_set_allocated_apparel(
    ::PBApparel* apparel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apparel_);
  }
  apparel_ = apparel;
  if (apparel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBClothing.apparel)
}
inline ::PBApparel* PBClothing::release_apparel() {
  auto temp = unsafe_arena_release_apparel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBApparel* PBClothing::unsafe_arena_release_apparel() {
  // @@protoc_insertion_point(field_release:PBClothing.apparel)
  
  ::PBApparel* temp = apparel_;
  apparel_ = nullptr;
  return temp;
}
inline ::PBApparel* PBClothing::_internal_mutable_apparel() {
  
  if (apparel_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBApparel>(GetArena());
    apparel_ = p;
  }
  return apparel_;
}
inline ::PBApparel* PBClothing::mutable_apparel() {
  // @@protoc_insertion_point(field_mutable:PBClothing.apparel)
  return _internal_mutable_apparel();
}
inline void PBClothing::set_allocated_apparel(::PBApparel* apparel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete apparel_;
  }
  if (apparel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apparel);
    if (message_arena != submessage_arena) {
      apparel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apparel, submessage_arena);
    }
    
  } else {
    
  }
  apparel_ = apparel;
  // @@protoc_insertion_point(field_set_allocated:PBClothing.apparel)
}

// -------------------------------------------------------------------

// PBConsumable

// int32 calories = 1;
inline void PBConsumable::clear_calories() {
  calories_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBConsumable::_internal_calories() const {
  return calories_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBConsumable::calories() const {
  // @@protoc_insertion_point(field_get:PBConsumable.calories)
  return _internal_calories();
}
inline void PBConsumable::_internal_set_calories(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  calories_ = value;
}
inline void PBConsumable::set_calories(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_calories(value);
  // @@protoc_insertion_point(field_set:PBConsumable.calories)
}

// .PBProduct product = 2;
inline bool PBConsumable::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool PBConsumable::has_product() const {
  return _internal_has_product();
}
inline void PBConsumable::clear_product() {
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::PBProduct& PBConsumable::_internal_product() const {
  const ::PBProduct* p = product_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBProduct*>(
      &::_PBProduct_default_instance_);
}
inline const ::PBProduct& PBConsumable::product() const {
  // @@protoc_insertion_point(field_get:PBConsumable.product)
  return _internal_product();
}
inline void PBConsumable::unsafe_arena_set_allocated_product(
    ::PBProduct* product) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBConsumable.product)
}
inline ::PBProduct* PBConsumable::release_product() {
  auto temp = unsafe_arena_release_product();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBProduct* PBConsumable::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:PBConsumable.product)
  
  ::PBProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::PBProduct* PBConsumable::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBProduct>(GetArena());
    product_ = p;
  }
  return product_;
}
inline ::PBProduct* PBConsumable::mutable_product() {
  // @@protoc_insertion_point(field_mutable:PBConsumable.product)
  return _internal_mutable_product();
}
inline void PBConsumable::set_allocated_product(::PBProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:PBConsumable.product)
}

// -------------------------------------------------------------------

// PBFood

// bool isCanned = 1;
inline void PBFood::clear_iscanned() {
  iscanned_ = false;
}
inline bool PBFood::_internal_iscanned() const {
  return iscanned_;
}
inline bool PBFood::iscanned() const {
  // @@protoc_insertion_point(field_get:PBFood.isCanned)
  return _internal_iscanned();
}
inline void PBFood::_internal_set_iscanned(bool value) {
  
  iscanned_ = value;
}
inline void PBFood::set_iscanned(bool value) {
  _internal_set_iscanned(value);
  // @@protoc_insertion_point(field_set:PBFood.isCanned)
}

// .PBConsumable consumable = 2;
inline bool PBFood::_internal_has_consumable() const {
  return this != internal_default_instance() && consumable_ != nullptr;
}
inline bool PBFood::has_consumable() const {
  return _internal_has_consumable();
}
inline void PBFood::clear_consumable() {
  if (GetArena() == nullptr && consumable_ != nullptr) {
    delete consumable_;
  }
  consumable_ = nullptr;
}
inline const ::PBConsumable& PBFood::_internal_consumable() const {
  const ::PBConsumable* p = consumable_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBConsumable*>(
      &::_PBConsumable_default_instance_);
}
inline const ::PBConsumable& PBFood::consumable() const {
  // @@protoc_insertion_point(field_get:PBFood.consumable)
  return _internal_consumable();
}
inline void PBFood::unsafe_arena_set_allocated_consumable(
    ::PBConsumable* consumable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumable_);
  }
  consumable_ = consumable;
  if (consumable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBFood.consumable)
}
inline ::PBConsumable* PBFood::release_consumable() {
  auto temp = unsafe_arena_release_consumable();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBConsumable* PBFood::unsafe_arena_release_consumable() {
  // @@protoc_insertion_point(field_release:PBFood.consumable)
  
  ::PBConsumable* temp = consumable_;
  consumable_ = nullptr;
  return temp;
}
inline ::PBConsumable* PBFood::_internal_mutable_consumable() {
  
  if (consumable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBConsumable>(GetArena());
    consumable_ = p;
  }
  return consumable_;
}
inline ::PBConsumable* PBFood::mutable_consumable() {
  // @@protoc_insertion_point(field_mutable:PBFood.consumable)
  return _internal_mutable_consumable();
}
inline void PBFood::set_allocated_consumable(::PBConsumable* consumable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete consumable_;
  }
  if (consumable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consumable);
    if (message_arena != submessage_arena) {
      consumable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumable, submessage_arena);
    }
    
  } else {
    
  }
  consumable_ = consumable;
  // @@protoc_insertion_point(field_set_allocated:PBFood.consumable)
}

// -------------------------------------------------------------------

// PBDrink

// bool isCarbonated = 1;
inline void PBDrink::clear_iscarbonated() {
  iscarbonated_ = false;
}
inline bool PBDrink::_internal_iscarbonated() const {
  return iscarbonated_;
}
inline bool PBDrink::iscarbonated() const {
  // @@protoc_insertion_point(field_get:PBDrink.isCarbonated)
  return _internal_iscarbonated();
}
inline void PBDrink::_internal_set_iscarbonated(bool value) {
  
  iscarbonated_ = value;
}
inline void PBDrink::set_iscarbonated(bool value) {
  _internal_set_iscarbonated(value);
  // @@protoc_insertion_point(field_set:PBDrink.isCarbonated)
}

// .PBConsumable consumable = 2;
inline bool PBDrink::_internal_has_consumable() const {
  return this != internal_default_instance() && consumable_ != nullptr;
}
inline bool PBDrink::has_consumable() const {
  return _internal_has_consumable();
}
inline void PBDrink::clear_consumable() {
  if (GetArena() == nullptr && consumable_ != nullptr) {
    delete consumable_;
  }
  consumable_ = nullptr;
}
inline const ::PBConsumable& PBDrink::_internal_consumable() const {
  const ::PBConsumable* p = consumable_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBConsumable*>(
      &::_PBConsumable_default_instance_);
}
inline const ::PBConsumable& PBDrink::consumable() const {
  // @@protoc_insertion_point(field_get:PBDrink.consumable)
  return _internal_consumable();
}
inline void PBDrink::unsafe_arena_set_allocated_consumable(
    ::PBConsumable* consumable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumable_);
  }
  consumable_ = consumable;
  if (consumable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBDrink.consumable)
}
inline ::PBConsumable* PBDrink::release_consumable() {
  auto temp = unsafe_arena_release_consumable();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBConsumable* PBDrink::unsafe_arena_release_consumable() {
  // @@protoc_insertion_point(field_release:PBDrink.consumable)
  
  ::PBConsumable* temp = consumable_;
  consumable_ = nullptr;
  return temp;
}
inline ::PBConsumable* PBDrink::_internal_mutable_consumable() {
  
  if (consumable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBConsumable>(GetArena());
    consumable_ = p;
  }
  return consumable_;
}
inline ::PBConsumable* PBDrink::mutable_consumable() {
  // @@protoc_insertion_point(field_mutable:PBDrink.consumable)
  return _internal_mutable_consumable();
}
inline void PBDrink::set_allocated_consumable(::PBConsumable* consumable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete consumable_;
  }
  if (consumable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consumable);
    if (message_arena != submessage_arena) {
      consumable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumable, submessage_arena);
    }
    
  } else {
    
  }
  consumable_ = consumable;
  // @@protoc_insertion_point(field_set_allocated:PBDrink.consumable)
}

// -------------------------------------------------------------------

// PBElectronics

// string manufacturer = 1;
inline void PBElectronics::clear_manufacturer() {
  manufacturer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBElectronics::manufacturer() const {
  // @@protoc_insertion_point(field_get:PBElectronics.manufacturer)
  return _internal_manufacturer();
}
inline void PBElectronics::set_manufacturer(const std::string& value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:PBElectronics.manufacturer)
}
inline std::string* PBElectronics::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable:PBElectronics.manufacturer)
  return _internal_mutable_manufacturer();
}
inline const std::string& PBElectronics::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void PBElectronics::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBElectronics::set_manufacturer(std::string&& value) {
  
  manufacturer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBElectronics.manufacturer)
}
inline void PBElectronics::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBElectronics.manufacturer)
}
inline void PBElectronics::set_manufacturer(const char* value,
    size_t size) {
  
  manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBElectronics.manufacturer)
}
inline std::string* PBElectronics::_internal_mutable_manufacturer() {
  
  return manufacturer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBElectronics::release_manufacturer() {
  // @@protoc_insertion_point(field_release:PBElectronics.manufacturer)
  return manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBElectronics::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBElectronics.manufacturer)
}
inline std::string* PBElectronics::unsafe_arena_release_manufacturer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBElectronics.manufacturer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return manufacturer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBElectronics::unsafe_arena_set_allocated_manufacturer(
    std::string* manufacturer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      manufacturer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBElectronics.manufacturer)
}

// .PBProduct product = 2;
inline bool PBElectronics::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool PBElectronics::has_product() const {
  return _internal_has_product();
}
inline void PBElectronics::clear_product() {
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::PBProduct& PBElectronics::_internal_product() const {
  const ::PBProduct* p = product_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBProduct*>(
      &::_PBProduct_default_instance_);
}
inline const ::PBProduct& PBElectronics::product() const {
  // @@protoc_insertion_point(field_get:PBElectronics.product)
  return _internal_product();
}
inline void PBElectronics::unsafe_arena_set_allocated_product(
    ::PBProduct* product) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBElectronics.product)
}
inline ::PBProduct* PBElectronics::release_product() {
  auto temp = unsafe_arena_release_product();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBProduct* PBElectronics::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:PBElectronics.product)
  
  ::PBProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::PBProduct* PBElectronics::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBProduct>(GetArena());
    product_ = p;
  }
  return product_;
}
inline ::PBProduct* PBElectronics::mutable_product() {
  // @@protoc_insertion_point(field_mutable:PBElectronics.product)
  return _internal_mutable_product();
}
inline void PBElectronics::set_allocated_product(::PBProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:PBElectronics.product)
}

// -------------------------------------------------------------------

// PBTech

// string type = 1;
inline void PBTech::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBTech::type() const {
  // @@protoc_insertion_point(field_get:PBTech.type)
  return _internal_type();
}
inline void PBTech::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PBTech.type)
}
inline std::string* PBTech::mutable_type() {
  // @@protoc_insertion_point(field_mutable:PBTech.type)
  return _internal_mutable_type();
}
inline const std::string& PBTech::_internal_type() const {
  return type_.Get();
}
inline void PBTech::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBTech::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBTech.type)
}
inline void PBTech::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBTech.type)
}
inline void PBTech::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBTech.type)
}
inline std::string* PBTech::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBTech::release_type() {
  // @@protoc_insertion_point(field_release:PBTech.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBTech::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBTech.type)
}
inline std::string* PBTech::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBTech.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBTech::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBTech.type)
}

// .PBElectronics electronics = 2;
inline bool PBTech::_internal_has_electronics() const {
  return this != internal_default_instance() && electronics_ != nullptr;
}
inline bool PBTech::has_electronics() const {
  return _internal_has_electronics();
}
inline void PBTech::clear_electronics() {
  if (GetArena() == nullptr && electronics_ != nullptr) {
    delete electronics_;
  }
  electronics_ = nullptr;
}
inline const ::PBElectronics& PBTech::_internal_electronics() const {
  const ::PBElectronics* p = electronics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBElectronics*>(
      &::_PBElectronics_default_instance_);
}
inline const ::PBElectronics& PBTech::electronics() const {
  // @@protoc_insertion_point(field_get:PBTech.electronics)
  return _internal_electronics();
}
inline void PBTech::unsafe_arena_set_allocated_electronics(
    ::PBElectronics* electronics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(electronics_);
  }
  electronics_ = electronics;
  if (electronics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBTech.electronics)
}
inline ::PBElectronics* PBTech::release_electronics() {
  auto temp = unsafe_arena_release_electronics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBElectronics* PBTech::unsafe_arena_release_electronics() {
  // @@protoc_insertion_point(field_release:PBTech.electronics)
  
  ::PBElectronics* temp = electronics_;
  electronics_ = nullptr;
  return temp;
}
inline ::PBElectronics* PBTech::_internal_mutable_electronics() {
  
  if (electronics_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBElectronics>(GetArena());
    electronics_ = p;
  }
  return electronics_;
}
inline ::PBElectronics* PBTech::mutable_electronics() {
  // @@protoc_insertion_point(field_mutable:PBTech.electronics)
  return _internal_mutable_electronics();
}
inline void PBTech::set_allocated_electronics(::PBElectronics* electronics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete electronics_;
  }
  if (electronics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(electronics);
    if (message_arena != submessage_arena) {
      electronics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, electronics, submessage_arena);
    }
    
  } else {
    
  }
  electronics_ = electronics;
  // @@protoc_insertion_point(field_set_allocated:PBTech.electronics)
}

// -------------------------------------------------------------------

// PBAppliance

// string size = 1;
inline void PBAppliance::clear_size() {
  size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBAppliance::size() const {
  // @@protoc_insertion_point(field_get:PBAppliance.size)
  return _internal_size();
}
inline void PBAppliance::set_size(const std::string& value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PBAppliance.size)
}
inline std::string* PBAppliance::mutable_size() {
  // @@protoc_insertion_point(field_mutable:PBAppliance.size)
  return _internal_mutable_size();
}
inline const std::string& PBAppliance::_internal_size() const {
  return size_.Get();
}
inline void PBAppliance::_internal_set_size(const std::string& value) {
  
  size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBAppliance::set_size(std::string&& value) {
  
  size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBAppliance.size)
}
inline void PBAppliance::set_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBAppliance.size)
}
inline void PBAppliance::set_size(const char* value,
    size_t size) {
  
  size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBAppliance.size)
}
inline std::string* PBAppliance::_internal_mutable_size() {
  
  return size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBAppliance::release_size() {
  // @@protoc_insertion_point(field_release:PBAppliance.size)
  return size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBAppliance::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    
  } else {
    
  }
  size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBAppliance.size)
}
inline std::string* PBAppliance::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBAppliance.size)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return size_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBAppliance::unsafe_arena_set_allocated_size(
    std::string* size) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (size != nullptr) {
    
  } else {
    
  }
  size_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      size, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBAppliance.size)
}

// .PBElectronics electronics = 2;
inline bool PBAppliance::_internal_has_electronics() const {
  return this != internal_default_instance() && electronics_ != nullptr;
}
inline bool PBAppliance::has_electronics() const {
  return _internal_has_electronics();
}
inline void PBAppliance::clear_electronics() {
  if (GetArena() == nullptr && electronics_ != nullptr) {
    delete electronics_;
  }
  electronics_ = nullptr;
}
inline const ::PBElectronics& PBAppliance::_internal_electronics() const {
  const ::PBElectronics* p = electronics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBElectronics*>(
      &::_PBElectronics_default_instance_);
}
inline const ::PBElectronics& PBAppliance::electronics() const {
  // @@protoc_insertion_point(field_get:PBAppliance.electronics)
  return _internal_electronics();
}
inline void PBAppliance::unsafe_arena_set_allocated_electronics(
    ::PBElectronics* electronics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(electronics_);
  }
  electronics_ = electronics;
  if (electronics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBAppliance.electronics)
}
inline ::PBElectronics* PBAppliance::release_electronics() {
  auto temp = unsafe_arena_release_electronics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBElectronics* PBAppliance::unsafe_arena_release_electronics() {
  // @@protoc_insertion_point(field_release:PBAppliance.electronics)
  
  ::PBElectronics* temp = electronics_;
  electronics_ = nullptr;
  return temp;
}
inline ::PBElectronics* PBAppliance::_internal_mutable_electronics() {
  
  if (electronics_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBElectronics>(GetArena());
    electronics_ = p;
  }
  return electronics_;
}
inline ::PBElectronics* PBAppliance::mutable_electronics() {
  // @@protoc_insertion_point(field_mutable:PBAppliance.electronics)
  return _internal_mutable_electronics();
}
inline void PBAppliance::set_allocated_electronics(::PBElectronics* electronics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete electronics_;
  }
  if (electronics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(electronics);
    if (message_arena != submessage_arena) {
      electronics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, electronics, submessage_arena);
    }
    
  } else {
    
  }
  electronics_ = electronics;
  // @@protoc_insertion_point(field_set_allocated:PBAppliance.electronics)
}

// -------------------------------------------------------------------

// PBFurniture

// string material = 1;
inline void PBFurniture::clear_material() {
  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBFurniture::material() const {
  // @@protoc_insertion_point(field_get:PBFurniture.material)
  return _internal_material();
}
inline void PBFurniture::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:PBFurniture.material)
}
inline std::string* PBFurniture::mutable_material() {
  // @@protoc_insertion_point(field_mutable:PBFurniture.material)
  return _internal_mutable_material();
}
inline const std::string& PBFurniture::_internal_material() const {
  return material_.Get();
}
inline void PBFurniture::_internal_set_material(const std::string& value) {
  
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBFurniture::set_material(std::string&& value) {
  
  material_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBFurniture.material)
}
inline void PBFurniture::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBFurniture.material)
}
inline void PBFurniture::set_material(const char* value,
    size_t size) {
  
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBFurniture.material)
}
inline std::string* PBFurniture::_internal_mutable_material() {
  
  return material_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBFurniture::release_material() {
  // @@protoc_insertion_point(field_release:PBFurniture.material)
  return material_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBFurniture::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBFurniture.material)
}
inline std::string* PBFurniture::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBFurniture.material)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return material_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBFurniture::unsafe_arena_set_allocated_material(
    std::string* material) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (material != nullptr) {
    
  } else {
    
  }
  material_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      material, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBFurniture.material)
}

// .PBProduct product = 2;
inline bool PBFurniture::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool PBFurniture::has_product() const {
  return _internal_has_product();
}
inline void PBFurniture::clear_product() {
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::PBProduct& PBFurniture::_internal_product() const {
  const ::PBProduct* p = product_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBProduct*>(
      &::_PBProduct_default_instance_);
}
inline const ::PBProduct& PBFurniture::product() const {
  // @@protoc_insertion_point(field_get:PBFurniture.product)
  return _internal_product();
}
inline void PBFurniture::unsafe_arena_set_allocated_product(
    ::PBProduct* product) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBFurniture.product)
}
inline ::PBProduct* PBFurniture::release_product() {
  auto temp = unsafe_arena_release_product();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBProduct* PBFurniture::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:PBFurniture.product)
  
  ::PBProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::PBProduct* PBFurniture::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBProduct>(GetArena());
    product_ = p;
  }
  return product_;
}
inline ::PBProduct* PBFurniture::mutable_product() {
  // @@protoc_insertion_point(field_mutable:PBFurniture.product)
  return _internal_mutable_product();
}
inline void PBFurniture::set_allocated_product(::PBProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:PBFurniture.product)
}

// -------------------------------------------------------------------

// PBDecor

// string style = 1;
inline void PBDecor::clear_style() {
  style_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBDecor::style() const {
  // @@protoc_insertion_point(field_get:PBDecor.style)
  return _internal_style();
}
inline void PBDecor::set_style(const std::string& value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:PBDecor.style)
}
inline std::string* PBDecor::mutable_style() {
  // @@protoc_insertion_point(field_mutable:PBDecor.style)
  return _internal_mutable_style();
}
inline const std::string& PBDecor::_internal_style() const {
  return style_.Get();
}
inline void PBDecor::_internal_set_style(const std::string& value) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBDecor::set_style(std::string&& value) {
  
  style_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBDecor.style)
}
inline void PBDecor::set_style(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBDecor.style)
}
inline void PBDecor::set_style(const char* value,
    size_t size) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBDecor.style)
}
inline std::string* PBDecor::_internal_mutable_style() {
  
  return style_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBDecor::release_style() {
  // @@protoc_insertion_point(field_release:PBDecor.style)
  return style_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBDecor::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    
  } else {
    
  }
  style_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBDecor.style)
}
inline std::string* PBDecor::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBDecor.style)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return style_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBDecor::unsafe_arena_set_allocated_style(
    std::string* style) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (style != nullptr) {
    
  } else {
    
  }
  style_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      style, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBDecor.style)
}

// .PBFurniture furniture = 2;
inline bool PBDecor::_internal_has_furniture() const {
  return this != internal_default_instance() && furniture_ != nullptr;
}
inline bool PBDecor::has_furniture() const {
  return _internal_has_furniture();
}
inline void PBDecor::clear_furniture() {
  if (GetArena() == nullptr && furniture_ != nullptr) {
    delete furniture_;
  }
  furniture_ = nullptr;
}
inline const ::PBFurniture& PBDecor::_internal_furniture() const {
  const ::PBFurniture* p = furniture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBFurniture*>(
      &::_PBFurniture_default_instance_);
}
inline const ::PBFurniture& PBDecor::furniture() const {
  // @@protoc_insertion_point(field_get:PBDecor.furniture)
  return _internal_furniture();
}
inline void PBDecor::unsafe_arena_set_allocated_furniture(
    ::PBFurniture* furniture) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(furniture_);
  }
  furniture_ = furniture;
  if (furniture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBDecor.furniture)
}
inline ::PBFurniture* PBDecor::release_furniture() {
  auto temp = unsafe_arena_release_furniture();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBFurniture* PBDecor::unsafe_arena_release_furniture() {
  // @@protoc_insertion_point(field_release:PBDecor.furniture)
  
  ::PBFurniture* temp = furniture_;
  furniture_ = nullptr;
  return temp;
}
inline ::PBFurniture* PBDecor::_internal_mutable_furniture() {
  
  if (furniture_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBFurniture>(GetArena());
    furniture_ = p;
  }
  return furniture_;
}
inline ::PBFurniture* PBDecor::mutable_furniture() {
  // @@protoc_insertion_point(field_mutable:PBDecor.furniture)
  return _internal_mutable_furniture();
}
inline void PBDecor::set_allocated_furniture(::PBFurniture* furniture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete furniture_;
  }
  if (furniture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(furniture);
    if (message_arena != submessage_arena) {
      furniture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, furniture, submessage_arena);
    }
    
  } else {
    
  }
  furniture_ = furniture;
  // @@protoc_insertion_point(field_set_allocated:PBDecor.furniture)
}

// -------------------------------------------------------------------

// PBStorage

// int32 capacity = 1;
inline void PBStorage::clear_capacity() {
  capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBStorage::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBStorage::capacity() const {
  // @@protoc_insertion_point(field_get:PBStorage.capacity)
  return _internal_capacity();
}
inline void PBStorage::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  capacity_ = value;
}
inline void PBStorage::set_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:PBStorage.capacity)
}

// .PBFurniture furniture = 2;
inline bool PBStorage::_internal_has_furniture() const {
  return this != internal_default_instance() && furniture_ != nullptr;
}
inline bool PBStorage::has_furniture() const {
  return _internal_has_furniture();
}
inline void PBStorage::clear_furniture() {
  if (GetArena() == nullptr && furniture_ != nullptr) {
    delete furniture_;
  }
  furniture_ = nullptr;
}
inline const ::PBFurniture& PBStorage::_internal_furniture() const {
  const ::PBFurniture* p = furniture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBFurniture*>(
      &::_PBFurniture_default_instance_);
}
inline const ::PBFurniture& PBStorage::furniture() const {
  // @@protoc_insertion_point(field_get:PBStorage.furniture)
  return _internal_furniture();
}
inline void PBStorage::unsafe_arena_set_allocated_furniture(
    ::PBFurniture* furniture) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(furniture_);
  }
  furniture_ = furniture;
  if (furniture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStorage.furniture)
}
inline ::PBFurniture* PBStorage::release_furniture() {
  auto temp = unsafe_arena_release_furniture();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBFurniture* PBStorage::unsafe_arena_release_furniture() {
  // @@protoc_insertion_point(field_release:PBStorage.furniture)
  
  ::PBFurniture* temp = furniture_;
  furniture_ = nullptr;
  return temp;
}
inline ::PBFurniture* PBStorage::_internal_mutable_furniture() {
  
  if (furniture_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBFurniture>(GetArena());
    furniture_ = p;
  }
  return furniture_;
}
inline ::PBFurniture* PBStorage::mutable_furniture() {
  // @@protoc_insertion_point(field_mutable:PBStorage.furniture)
  return _internal_mutable_furniture();
}
inline void PBStorage::set_allocated_furniture(::PBFurniture* furniture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete furniture_;
  }
  if (furniture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(furniture);
    if (message_arena != submessage_arena) {
      furniture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, furniture, submessage_arena);
    }
    
  } else {
    
  }
  furniture_ = furniture;
  // @@protoc_insertion_point(field_set_allocated:PBStorage.furniture)
}

// -------------------------------------------------------------------

// PBGames

// string genre = 1;
inline void PBGames::clear_genre() {
  genre_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBGames::genre() const {
  // @@protoc_insertion_point(field_get:PBGames.genre)
  return _internal_genre();
}
inline void PBGames::set_genre(const std::string& value) {
  _internal_set_genre(value);
  // @@protoc_insertion_point(field_set:PBGames.genre)
}
inline std::string* PBGames::mutable_genre() {
  // @@protoc_insertion_point(field_mutable:PBGames.genre)
  return _internal_mutable_genre();
}
inline const std::string& PBGames::_internal_genre() const {
  return genre_.Get();
}
inline void PBGames::_internal_set_genre(const std::string& value) {
  
  genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBGames::set_genre(std::string&& value) {
  
  genre_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBGames.genre)
}
inline void PBGames::set_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBGames.genre)
}
inline void PBGames::set_genre(const char* value,
    size_t size) {
  
  genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBGames.genre)
}
inline std::string* PBGames::_internal_mutable_genre() {
  
  return genre_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBGames::release_genre() {
  // @@protoc_insertion_point(field_release:PBGames.genre)
  return genre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBGames::set_allocated_genre(std::string* genre) {
  if (genre != nullptr) {
    
  } else {
    
  }
  genre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBGames.genre)
}
inline std::string* PBGames::unsafe_arena_release_genre() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBGames.genre)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return genre_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBGames::unsafe_arena_set_allocated_genre(
    std::string* genre) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (genre != nullptr) {
    
  } else {
    
  }
  genre_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      genre, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBGames.genre)
}

// .PBProduct product = 2;
inline bool PBGames::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool PBGames::has_product() const {
  return _internal_has_product();
}
inline void PBGames::clear_product() {
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::PBProduct& PBGames::_internal_product() const {
  const ::PBProduct* p = product_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBProduct*>(
      &::_PBProduct_default_instance_);
}
inline const ::PBProduct& PBGames::product() const {
  // @@protoc_insertion_point(field_get:PBGames.product)
  return _internal_product();
}
inline void PBGames::unsafe_arena_set_allocated_product(
    ::PBProduct* product) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBGames.product)
}
inline ::PBProduct* PBGames::release_product() {
  auto temp = unsafe_arena_release_product();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBProduct* PBGames::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:PBGames.product)
  
  ::PBProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::PBProduct* PBGames::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBProduct>(GetArena());
    product_ = p;
  }
  return product_;
}
inline ::PBProduct* PBGames::mutable_product() {
  // @@protoc_insertion_point(field_mutable:PBGames.product)
  return _internal_mutable_product();
}
inline void PBGames::set_allocated_product(::PBProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:PBGames.product)
}

// -------------------------------------------------------------------

// PBDigital

// string developer = 1;
inline void PBDigital::clear_developer() {
  developer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBDigital::developer() const {
  // @@protoc_insertion_point(field_get:PBDigital.developer)
  return _internal_developer();
}
inline void PBDigital::set_developer(const std::string& value) {
  _internal_set_developer(value);
  // @@protoc_insertion_point(field_set:PBDigital.developer)
}
inline std::string* PBDigital::mutable_developer() {
  // @@protoc_insertion_point(field_mutable:PBDigital.developer)
  return _internal_mutable_developer();
}
inline const std::string& PBDigital::_internal_developer() const {
  return developer_.Get();
}
inline void PBDigital::_internal_set_developer(const std::string& value) {
  
  developer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBDigital::set_developer(std::string&& value) {
  
  developer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBDigital.developer)
}
inline void PBDigital::set_developer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  developer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBDigital.developer)
}
inline void PBDigital::set_developer(const char* value,
    size_t size) {
  
  developer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBDigital.developer)
}
inline std::string* PBDigital::_internal_mutable_developer() {
  
  return developer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBDigital::release_developer() {
  // @@protoc_insertion_point(field_release:PBDigital.developer)
  return developer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBDigital::set_allocated_developer(std::string* developer) {
  if (developer != nullptr) {
    
  } else {
    
  }
  developer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), developer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBDigital.developer)
}
inline std::string* PBDigital::unsafe_arena_release_developer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBDigital.developer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return developer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBDigital::unsafe_arena_set_allocated_developer(
    std::string* developer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (developer != nullptr) {
    
  } else {
    
  }
  developer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      developer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBDigital.developer)
}

// .PBGames games = 2;
inline bool PBDigital::_internal_has_games() const {
  return this != internal_default_instance() && games_ != nullptr;
}
inline bool PBDigital::has_games() const {
  return _internal_has_games();
}
inline void PBDigital::clear_games() {
  if (GetArena() == nullptr && games_ != nullptr) {
    delete games_;
  }
  games_ = nullptr;
}
inline const ::PBGames& PBDigital::_internal_games() const {
  const ::PBGames* p = games_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBGames*>(
      &::_PBGames_default_instance_);
}
inline const ::PBGames& PBDigital::games() const {
  // @@protoc_insertion_point(field_get:PBDigital.games)
  return _internal_games();
}
inline void PBDigital::unsafe_arena_set_allocated_games(
    ::PBGames* games) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(games_);
  }
  games_ = games;
  if (games) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBDigital.games)
}
inline ::PBGames* PBDigital::release_games() {
  auto temp = unsafe_arena_release_games();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBGames* PBDigital::unsafe_arena_release_games() {
  // @@protoc_insertion_point(field_release:PBDigital.games)
  
  ::PBGames* temp = games_;
  games_ = nullptr;
  return temp;
}
inline ::PBGames* PBDigital::_internal_mutable_games() {
  
  if (games_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBGames>(GetArena());
    games_ = p;
  }
  return games_;
}
inline ::PBGames* PBDigital::mutable_games() {
  // @@protoc_insertion_point(field_mutable:PBDigital.games)
  return _internal_mutable_games();
}
inline void PBDigital::set_allocated_games(::PBGames* games) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete games_;
  }
  if (games) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(games);
    if (message_arena != submessage_arena) {
      games = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, games, submessage_arena);
    }
    
  } else {
    
  }
  games_ = games;
  // @@protoc_insertion_point(field_set_allocated:PBDigital.games)
}

// -------------------------------------------------------------------

// PBPhysical

// int32 numberOfPlayers = 1;
inline void PBPhysical::clear_numberofplayers() {
  numberofplayers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBPhysical::_internal_numberofplayers() const {
  return numberofplayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBPhysical::numberofplayers() const {
  // @@protoc_insertion_point(field_get:PBPhysical.numberOfPlayers)
  return _internal_numberofplayers();
}
inline void PBPhysical::_internal_set_numberofplayers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numberofplayers_ = value;
}
inline void PBPhysical::set_numberofplayers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofplayers(value);
  // @@protoc_insertion_point(field_set:PBPhysical.numberOfPlayers)
}

// .PBGames games = 2;
inline bool PBPhysical::_internal_has_games() const {
  return this != internal_default_instance() && games_ != nullptr;
}
inline bool PBPhysical::has_games() const {
  return _internal_has_games();
}
inline void PBPhysical::clear_games() {
  if (GetArena() == nullptr && games_ != nullptr) {
    delete games_;
  }
  games_ = nullptr;
}
inline const ::PBGames& PBPhysical::_internal_games() const {
  const ::PBGames* p = games_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBGames*>(
      &::_PBGames_default_instance_);
}
inline const ::PBGames& PBPhysical::games() const {
  // @@protoc_insertion_point(field_get:PBPhysical.games)
  return _internal_games();
}
inline void PBPhysical::unsafe_arena_set_allocated_games(
    ::PBGames* games) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(games_);
  }
  games_ = games;
  if (games) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBPhysical.games)
}
inline ::PBGames* PBPhysical::release_games() {
  auto temp = unsafe_arena_release_games();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBGames* PBPhysical::unsafe_arena_release_games() {
  // @@protoc_insertion_point(field_release:PBPhysical.games)
  
  ::PBGames* temp = games_;
  games_ = nullptr;
  return temp;
}
inline ::PBGames* PBPhysical::_internal_mutable_games() {
  
  if (games_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBGames>(GetArena());
    games_ = p;
  }
  return games_;
}
inline ::PBGames* PBPhysical::mutable_games() {
  // @@protoc_insertion_point(field_mutable:PBPhysical.games)
  return _internal_mutable_games();
}
inline void PBPhysical::set_allocated_games(::PBGames* games) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete games_;
  }
  if (games) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(games);
    if (message_arena != submessage_arena) {
      games = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, games, submessage_arena);
    }
    
  } else {
    
  }
  games_ = games;
  // @@protoc_insertion_point(field_set_allocated:PBPhysical.games)
}

// -------------------------------------------------------------------

// PBFlora

// bool iscultivated = 1;
inline void PBFlora::clear_iscultivated() {
  iscultivated_ = false;
}
inline bool PBFlora::_internal_iscultivated() const {
  return iscultivated_;
}
inline bool PBFlora::iscultivated() const {
  // @@protoc_insertion_point(field_get:PBFlora.iscultivated)
  return _internal_iscultivated();
}
inline void PBFlora::_internal_set_iscultivated(bool value) {
  
  iscultivated_ = value;
}
inline void PBFlora::set_iscultivated(bool value) {
  _internal_set_iscultivated(value);
  // @@protoc_insertion_point(field_set:PBFlora.iscultivated)
}

// .PBProduct product = 2;
inline bool PBFlora::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool PBFlora::has_product() const {
  return _internal_has_product();
}
inline void PBFlora::clear_product() {
  if (GetArena() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::PBProduct& PBFlora::_internal_product() const {
  const ::PBProduct* p = product_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBProduct*>(
      &::_PBProduct_default_instance_);
}
inline const ::PBProduct& PBFlora::product() const {
  // @@protoc_insertion_point(field_get:PBFlora.product)
  return _internal_product();
}
inline void PBFlora::unsafe_arena_set_allocated_product(
    ::PBProduct* product) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBFlora.product)
}
inline ::PBProduct* PBFlora::release_product() {
  auto temp = unsafe_arena_release_product();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBProduct* PBFlora::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:PBFlora.product)
  
  ::PBProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::PBProduct* PBFlora::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBProduct>(GetArena());
    product_ = p;
  }
  return product_;
}
inline ::PBProduct* PBFlora::mutable_product() {
  // @@protoc_insertion_point(field_mutable:PBFlora.product)
  return _internal_mutable_product();
}
inline void PBFlora::set_allocated_product(::PBProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:PBFlora.product)
}

// -------------------------------------------------------------------

// PBPlants

// bool bearsFruit = 1;
inline void PBPlants::clear_bearsfruit() {
  bearsfruit_ = false;
}
inline bool PBPlants::_internal_bearsfruit() const {
  return bearsfruit_;
}
inline bool PBPlants::bearsfruit() const {
  // @@protoc_insertion_point(field_get:PBPlants.bearsFruit)
  return _internal_bearsfruit();
}
inline void PBPlants::_internal_set_bearsfruit(bool value) {
  
  bearsfruit_ = value;
}
inline void PBPlants::set_bearsfruit(bool value) {
  _internal_set_bearsfruit(value);
  // @@protoc_insertion_point(field_set:PBPlants.bearsFruit)
}

// .PBFlora flora = 2;
inline bool PBPlants::_internal_has_flora() const {
  return this != internal_default_instance() && flora_ != nullptr;
}
inline bool PBPlants::has_flora() const {
  return _internal_has_flora();
}
inline void PBPlants::clear_flora() {
  if (GetArena() == nullptr && flora_ != nullptr) {
    delete flora_;
  }
  flora_ = nullptr;
}
inline const ::PBFlora& PBPlants::_internal_flora() const {
  const ::PBFlora* p = flora_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBFlora*>(
      &::_PBFlora_default_instance_);
}
inline const ::PBFlora& PBPlants::flora() const {
  // @@protoc_insertion_point(field_get:PBPlants.flora)
  return _internal_flora();
}
inline void PBPlants::unsafe_arena_set_allocated_flora(
    ::PBFlora* flora) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flora_);
  }
  flora_ = flora;
  if (flora) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBPlants.flora)
}
inline ::PBFlora* PBPlants::release_flora() {
  auto temp = unsafe_arena_release_flora();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBFlora* PBPlants::unsafe_arena_release_flora() {
  // @@protoc_insertion_point(field_release:PBPlants.flora)
  
  ::PBFlora* temp = flora_;
  flora_ = nullptr;
  return temp;
}
inline ::PBFlora* PBPlants::_internal_mutable_flora() {
  
  if (flora_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBFlora>(GetArena());
    flora_ = p;
  }
  return flora_;
}
inline ::PBFlora* PBPlants::mutable_flora() {
  // @@protoc_insertion_point(field_mutable:PBPlants.flora)
  return _internal_mutable_flora();
}
inline void PBPlants::set_allocated_flora(::PBFlora* flora) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flora_;
  }
  if (flora) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flora);
    if (message_arena != submessage_arena) {
      flora = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flora, submessage_arena);
    }
    
  } else {
    
  }
  flora_ = flora;
  // @@protoc_insertion_point(field_set_allocated:PBPlants.flora)
}

// -------------------------------------------------------------------

// PBSeeds

// int32 expirationDays = 1;
inline void PBSeeds::clear_expirationdays() {
  expirationdays_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBSeeds::_internal_expirationdays() const {
  return expirationdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBSeeds::expirationdays() const {
  // @@protoc_insertion_point(field_get:PBSeeds.expirationDays)
  return _internal_expirationdays();
}
inline void PBSeeds::_internal_set_expirationdays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expirationdays_ = value;
}
inline void PBSeeds::set_expirationdays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expirationdays(value);
  // @@protoc_insertion_point(field_set:PBSeeds.expirationDays)
}

// .PBFlora flora = 2;
inline bool PBSeeds::_internal_has_flora() const {
  return this != internal_default_instance() && flora_ != nullptr;
}
inline bool PBSeeds::has_flora() const {
  return _internal_has_flora();
}
inline void PBSeeds::clear_flora() {
  if (GetArena() == nullptr && flora_ != nullptr) {
    delete flora_;
  }
  flora_ = nullptr;
}
inline const ::PBFlora& PBSeeds::_internal_flora() const {
  const ::PBFlora* p = flora_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBFlora*>(
      &::_PBFlora_default_instance_);
}
inline const ::PBFlora& PBSeeds::flora() const {
  // @@protoc_insertion_point(field_get:PBSeeds.flora)
  return _internal_flora();
}
inline void PBSeeds::unsafe_arena_set_allocated_flora(
    ::PBFlora* flora) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flora_);
  }
  flora_ = flora;
  if (flora) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBSeeds.flora)
}
inline ::PBFlora* PBSeeds::release_flora() {
  auto temp = unsafe_arena_release_flora();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBFlora* PBSeeds::unsafe_arena_release_flora() {
  // @@protoc_insertion_point(field_release:PBSeeds.flora)
  
  ::PBFlora* temp = flora_;
  flora_ = nullptr;
  return temp;
}
inline ::PBFlora* PBSeeds::_internal_mutable_flora() {
  
  if (flora_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBFlora>(GetArena());
    flora_ = p;
  }
  return flora_;
}
inline ::PBFlora* PBSeeds::mutable_flora() {
  // @@protoc_insertion_point(field_mutable:PBSeeds.flora)
  return _internal_mutable_flora();
}
inline void PBSeeds::set_allocated_flora(::PBFlora* flora) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flora_;
  }
  if (flora) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flora);
    if (message_arena != submessage_arena) {
      flora = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flora, submessage_arena);
    }
    
  } else {
    
  }
  flora_ = flora;
  // @@protoc_insertion_point(field_set_allocated:PBSeeds.flora)
}

// -------------------------------------------------------------------

// PBStockItem

// int32 quantity = 1;
inline void PBStockItem::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBStockItem::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBStockItem::quantity() const {
  // @@protoc_insertion_point(field_get:PBStockItem.quantity)
  return _internal_quantity();
}
inline void PBStockItem::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void PBStockItem::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:PBStockItem.quantity)
}

// .PBAccessory accessory = 2;
inline bool PBStockItem::_internal_has_accessory() const {
  return product_type_case() == kAccessory;
}
inline bool PBStockItem::has_accessory() const {
  return _internal_has_accessory();
}
inline void PBStockItem::set_has_accessory() {
  _oneof_case_[0] = kAccessory;
}
inline void PBStockItem::clear_accessory() {
  if (_internal_has_accessory()) {
    if (GetArena() == nullptr) {
      delete product_type_.accessory_;
    }
    clear_has_product_type();
  }
}
inline ::PBAccessory* PBStockItem::release_accessory() {
  // @@protoc_insertion_point(field_release:PBStockItem.accessory)
  if (_internal_has_accessory()) {
    clear_has_product_type();
      ::PBAccessory* temp = product_type_.accessory_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.accessory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBAccessory& PBStockItem::_internal_accessory() const {
  return _internal_has_accessory()
      ? *product_type_.accessory_
      : *reinterpret_cast< ::PBAccessory*>(&::_PBAccessory_default_instance_);
}
inline const ::PBAccessory& PBStockItem::accessory() const {
  // @@protoc_insertion_point(field_get:PBStockItem.accessory)
  return _internal_accessory();
}
inline ::PBAccessory* PBStockItem::unsafe_arena_release_accessory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.accessory)
  if (_internal_has_accessory()) {
    clear_has_product_type();
    ::PBAccessory* temp = product_type_.accessory_;
    product_type_.accessory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_accessory(::PBAccessory* accessory) {
  clear_product_type();
  if (accessory) {
    set_has_accessory();
    product_type_.accessory_ = accessory;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.accessory)
}
inline ::PBAccessory* PBStockItem::_internal_mutable_accessory() {
  if (!_internal_has_accessory()) {
    clear_product_type();
    set_has_accessory();
    product_type_.accessory_ = CreateMaybeMessage< ::PBAccessory >(GetArena());
  }
  return product_type_.accessory_;
}
inline ::PBAccessory* PBStockItem::mutable_accessory() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.accessory)
  return _internal_mutable_accessory();
}

// .PBClothing clothing = 3;
inline bool PBStockItem::_internal_has_clothing() const {
  return product_type_case() == kClothing;
}
inline bool PBStockItem::has_clothing() const {
  return _internal_has_clothing();
}
inline void PBStockItem::set_has_clothing() {
  _oneof_case_[0] = kClothing;
}
inline void PBStockItem::clear_clothing() {
  if (_internal_has_clothing()) {
    if (GetArena() == nullptr) {
      delete product_type_.clothing_;
    }
    clear_has_product_type();
  }
}
inline ::PBClothing* PBStockItem::release_clothing() {
  // @@protoc_insertion_point(field_release:PBStockItem.clothing)
  if (_internal_has_clothing()) {
    clear_has_product_type();
      ::PBClothing* temp = product_type_.clothing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.clothing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBClothing& PBStockItem::_internal_clothing() const {
  return _internal_has_clothing()
      ? *product_type_.clothing_
      : *reinterpret_cast< ::PBClothing*>(&::_PBClothing_default_instance_);
}
inline const ::PBClothing& PBStockItem::clothing() const {
  // @@protoc_insertion_point(field_get:PBStockItem.clothing)
  return _internal_clothing();
}
inline ::PBClothing* PBStockItem::unsafe_arena_release_clothing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.clothing)
  if (_internal_has_clothing()) {
    clear_has_product_type();
    ::PBClothing* temp = product_type_.clothing_;
    product_type_.clothing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_clothing(::PBClothing* clothing) {
  clear_product_type();
  if (clothing) {
    set_has_clothing();
    product_type_.clothing_ = clothing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.clothing)
}
inline ::PBClothing* PBStockItem::_internal_mutable_clothing() {
  if (!_internal_has_clothing()) {
    clear_product_type();
    set_has_clothing();
    product_type_.clothing_ = CreateMaybeMessage< ::PBClothing >(GetArena());
  }
  return product_type_.clothing_;
}
inline ::PBClothing* PBStockItem::mutable_clothing() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.clothing)
  return _internal_mutable_clothing();
}

// .PBFood food = 4;
inline bool PBStockItem::_internal_has_food() const {
  return product_type_case() == kFood;
}
inline bool PBStockItem::has_food() const {
  return _internal_has_food();
}
inline void PBStockItem::set_has_food() {
  _oneof_case_[0] = kFood;
}
inline void PBStockItem::clear_food() {
  if (_internal_has_food()) {
    if (GetArena() == nullptr) {
      delete product_type_.food_;
    }
    clear_has_product_type();
  }
}
inline ::PBFood* PBStockItem::release_food() {
  // @@protoc_insertion_point(field_release:PBStockItem.food)
  if (_internal_has_food()) {
    clear_has_product_type();
      ::PBFood* temp = product_type_.food_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.food_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBFood& PBStockItem::_internal_food() const {
  return _internal_has_food()
      ? *product_type_.food_
      : *reinterpret_cast< ::PBFood*>(&::_PBFood_default_instance_);
}
inline const ::PBFood& PBStockItem::food() const {
  // @@protoc_insertion_point(field_get:PBStockItem.food)
  return _internal_food();
}
inline ::PBFood* PBStockItem::unsafe_arena_release_food() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.food)
  if (_internal_has_food()) {
    clear_has_product_type();
    ::PBFood* temp = product_type_.food_;
    product_type_.food_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_food(::PBFood* food) {
  clear_product_type();
  if (food) {
    set_has_food();
    product_type_.food_ = food;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.food)
}
inline ::PBFood* PBStockItem::_internal_mutable_food() {
  if (!_internal_has_food()) {
    clear_product_type();
    set_has_food();
    product_type_.food_ = CreateMaybeMessage< ::PBFood >(GetArena());
  }
  return product_type_.food_;
}
inline ::PBFood* PBStockItem::mutable_food() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.food)
  return _internal_mutable_food();
}

// .PBDrink drink = 5;
inline bool PBStockItem::_internal_has_drink() const {
  return product_type_case() == kDrink;
}
inline bool PBStockItem::has_drink() const {
  return _internal_has_drink();
}
inline void PBStockItem::set_has_drink() {
  _oneof_case_[0] = kDrink;
}
inline void PBStockItem::clear_drink() {
  if (_internal_has_drink()) {
    if (GetArena() == nullptr) {
      delete product_type_.drink_;
    }
    clear_has_product_type();
  }
}
inline ::PBDrink* PBStockItem::release_drink() {
  // @@protoc_insertion_point(field_release:PBStockItem.drink)
  if (_internal_has_drink()) {
    clear_has_product_type();
      ::PBDrink* temp = product_type_.drink_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.drink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBDrink& PBStockItem::_internal_drink() const {
  return _internal_has_drink()
      ? *product_type_.drink_
      : *reinterpret_cast< ::PBDrink*>(&::_PBDrink_default_instance_);
}
inline const ::PBDrink& PBStockItem::drink() const {
  // @@protoc_insertion_point(field_get:PBStockItem.drink)
  return _internal_drink();
}
inline ::PBDrink* PBStockItem::unsafe_arena_release_drink() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.drink)
  if (_internal_has_drink()) {
    clear_has_product_type();
    ::PBDrink* temp = product_type_.drink_;
    product_type_.drink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_drink(::PBDrink* drink) {
  clear_product_type();
  if (drink) {
    set_has_drink();
    product_type_.drink_ = drink;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.drink)
}
inline ::PBDrink* PBStockItem::_internal_mutable_drink() {
  if (!_internal_has_drink()) {
    clear_product_type();
    set_has_drink();
    product_type_.drink_ = CreateMaybeMessage< ::PBDrink >(GetArena());
  }
  return product_type_.drink_;
}
inline ::PBDrink* PBStockItem::mutable_drink() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.drink)
  return _internal_mutable_drink();
}

// .PBAppliance appliance = 6;
inline bool PBStockItem::_internal_has_appliance() const {
  return product_type_case() == kAppliance;
}
inline bool PBStockItem::has_appliance() const {
  return _internal_has_appliance();
}
inline void PBStockItem::set_has_appliance() {
  _oneof_case_[0] = kAppliance;
}
inline void PBStockItem::clear_appliance() {
  if (_internal_has_appliance()) {
    if (GetArena() == nullptr) {
      delete product_type_.appliance_;
    }
    clear_has_product_type();
  }
}
inline ::PBAppliance* PBStockItem::release_appliance() {
  // @@protoc_insertion_point(field_release:PBStockItem.appliance)
  if (_internal_has_appliance()) {
    clear_has_product_type();
      ::PBAppliance* temp = product_type_.appliance_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.appliance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBAppliance& PBStockItem::_internal_appliance() const {
  return _internal_has_appliance()
      ? *product_type_.appliance_
      : *reinterpret_cast< ::PBAppliance*>(&::_PBAppliance_default_instance_);
}
inline const ::PBAppliance& PBStockItem::appliance() const {
  // @@protoc_insertion_point(field_get:PBStockItem.appliance)
  return _internal_appliance();
}
inline ::PBAppliance* PBStockItem::unsafe_arena_release_appliance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.appliance)
  if (_internal_has_appliance()) {
    clear_has_product_type();
    ::PBAppliance* temp = product_type_.appliance_;
    product_type_.appliance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_appliance(::PBAppliance* appliance) {
  clear_product_type();
  if (appliance) {
    set_has_appliance();
    product_type_.appliance_ = appliance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.appliance)
}
inline ::PBAppliance* PBStockItem::_internal_mutable_appliance() {
  if (!_internal_has_appliance()) {
    clear_product_type();
    set_has_appliance();
    product_type_.appliance_ = CreateMaybeMessage< ::PBAppliance >(GetArena());
  }
  return product_type_.appliance_;
}
inline ::PBAppliance* PBStockItem::mutable_appliance() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.appliance)
  return _internal_mutable_appliance();
}

// .PBTech tech = 7;
inline bool PBStockItem::_internal_has_tech() const {
  return product_type_case() == kTech;
}
inline bool PBStockItem::has_tech() const {
  return _internal_has_tech();
}
inline void PBStockItem::set_has_tech() {
  _oneof_case_[0] = kTech;
}
inline void PBStockItem::clear_tech() {
  if (_internal_has_tech()) {
    if (GetArena() == nullptr) {
      delete product_type_.tech_;
    }
    clear_has_product_type();
  }
}
inline ::PBTech* PBStockItem::release_tech() {
  // @@protoc_insertion_point(field_release:PBStockItem.tech)
  if (_internal_has_tech()) {
    clear_has_product_type();
      ::PBTech* temp = product_type_.tech_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.tech_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBTech& PBStockItem::_internal_tech() const {
  return _internal_has_tech()
      ? *product_type_.tech_
      : *reinterpret_cast< ::PBTech*>(&::_PBTech_default_instance_);
}
inline const ::PBTech& PBStockItem::tech() const {
  // @@protoc_insertion_point(field_get:PBStockItem.tech)
  return _internal_tech();
}
inline ::PBTech* PBStockItem::unsafe_arena_release_tech() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.tech)
  if (_internal_has_tech()) {
    clear_has_product_type();
    ::PBTech* temp = product_type_.tech_;
    product_type_.tech_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_tech(::PBTech* tech) {
  clear_product_type();
  if (tech) {
    set_has_tech();
    product_type_.tech_ = tech;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.tech)
}
inline ::PBTech* PBStockItem::_internal_mutable_tech() {
  if (!_internal_has_tech()) {
    clear_product_type();
    set_has_tech();
    product_type_.tech_ = CreateMaybeMessage< ::PBTech >(GetArena());
  }
  return product_type_.tech_;
}
inline ::PBTech* PBStockItem::mutable_tech() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.tech)
  return _internal_mutable_tech();
}

// .PBDecor decor = 8;
inline bool PBStockItem::_internal_has_decor() const {
  return product_type_case() == kDecor;
}
inline bool PBStockItem::has_decor() const {
  return _internal_has_decor();
}
inline void PBStockItem::set_has_decor() {
  _oneof_case_[0] = kDecor;
}
inline void PBStockItem::clear_decor() {
  if (_internal_has_decor()) {
    if (GetArena() == nullptr) {
      delete product_type_.decor_;
    }
    clear_has_product_type();
  }
}
inline ::PBDecor* PBStockItem::release_decor() {
  // @@protoc_insertion_point(field_release:PBStockItem.decor)
  if (_internal_has_decor()) {
    clear_has_product_type();
      ::PBDecor* temp = product_type_.decor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.decor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBDecor& PBStockItem::_internal_decor() const {
  return _internal_has_decor()
      ? *product_type_.decor_
      : *reinterpret_cast< ::PBDecor*>(&::_PBDecor_default_instance_);
}
inline const ::PBDecor& PBStockItem::decor() const {
  // @@protoc_insertion_point(field_get:PBStockItem.decor)
  return _internal_decor();
}
inline ::PBDecor* PBStockItem::unsafe_arena_release_decor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.decor)
  if (_internal_has_decor()) {
    clear_has_product_type();
    ::PBDecor* temp = product_type_.decor_;
    product_type_.decor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_decor(::PBDecor* decor) {
  clear_product_type();
  if (decor) {
    set_has_decor();
    product_type_.decor_ = decor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.decor)
}
inline ::PBDecor* PBStockItem::_internal_mutable_decor() {
  if (!_internal_has_decor()) {
    clear_product_type();
    set_has_decor();
    product_type_.decor_ = CreateMaybeMessage< ::PBDecor >(GetArena());
  }
  return product_type_.decor_;
}
inline ::PBDecor* PBStockItem::mutable_decor() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.decor)
  return _internal_mutable_decor();
}

// .PBStorage storage = 9;
inline bool PBStockItem::_internal_has_storage() const {
  return product_type_case() == kStorage;
}
inline bool PBStockItem::has_storage() const {
  return _internal_has_storage();
}
inline void PBStockItem::set_has_storage() {
  _oneof_case_[0] = kStorage;
}
inline void PBStockItem::clear_storage() {
  if (_internal_has_storage()) {
    if (GetArena() == nullptr) {
      delete product_type_.storage_;
    }
    clear_has_product_type();
  }
}
inline ::PBStorage* PBStockItem::release_storage() {
  // @@protoc_insertion_point(field_release:PBStockItem.storage)
  if (_internal_has_storage()) {
    clear_has_product_type();
      ::PBStorage* temp = product_type_.storage_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.storage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBStorage& PBStockItem::_internal_storage() const {
  return _internal_has_storage()
      ? *product_type_.storage_
      : *reinterpret_cast< ::PBStorage*>(&::_PBStorage_default_instance_);
}
inline const ::PBStorage& PBStockItem::storage() const {
  // @@protoc_insertion_point(field_get:PBStockItem.storage)
  return _internal_storage();
}
inline ::PBStorage* PBStockItem::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.storage)
  if (_internal_has_storage()) {
    clear_has_product_type();
    ::PBStorage* temp = product_type_.storage_;
    product_type_.storage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_storage(::PBStorage* storage) {
  clear_product_type();
  if (storage) {
    set_has_storage();
    product_type_.storage_ = storage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.storage)
}
inline ::PBStorage* PBStockItem::_internal_mutable_storage() {
  if (!_internal_has_storage()) {
    clear_product_type();
    set_has_storage();
    product_type_.storage_ = CreateMaybeMessage< ::PBStorage >(GetArena());
  }
  return product_type_.storage_;
}
inline ::PBStorage* PBStockItem::mutable_storage() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.storage)
  return _internal_mutable_storage();
}

// .PBDigital digital = 10;
inline bool PBStockItem::_internal_has_digital() const {
  return product_type_case() == kDigital;
}
inline bool PBStockItem::has_digital() const {
  return _internal_has_digital();
}
inline void PBStockItem::set_has_digital() {
  _oneof_case_[0] = kDigital;
}
inline void PBStockItem::clear_digital() {
  if (_internal_has_digital()) {
    if (GetArena() == nullptr) {
      delete product_type_.digital_;
    }
    clear_has_product_type();
  }
}
inline ::PBDigital* PBStockItem::release_digital() {
  // @@protoc_insertion_point(field_release:PBStockItem.digital)
  if (_internal_has_digital()) {
    clear_has_product_type();
      ::PBDigital* temp = product_type_.digital_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.digital_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBDigital& PBStockItem::_internal_digital() const {
  return _internal_has_digital()
      ? *product_type_.digital_
      : *reinterpret_cast< ::PBDigital*>(&::_PBDigital_default_instance_);
}
inline const ::PBDigital& PBStockItem::digital() const {
  // @@protoc_insertion_point(field_get:PBStockItem.digital)
  return _internal_digital();
}
inline ::PBDigital* PBStockItem::unsafe_arena_release_digital() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.digital)
  if (_internal_has_digital()) {
    clear_has_product_type();
    ::PBDigital* temp = product_type_.digital_;
    product_type_.digital_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_digital(::PBDigital* digital) {
  clear_product_type();
  if (digital) {
    set_has_digital();
    product_type_.digital_ = digital;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.digital)
}
inline ::PBDigital* PBStockItem::_internal_mutable_digital() {
  if (!_internal_has_digital()) {
    clear_product_type();
    set_has_digital();
    product_type_.digital_ = CreateMaybeMessage< ::PBDigital >(GetArena());
  }
  return product_type_.digital_;
}
inline ::PBDigital* PBStockItem::mutable_digital() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.digital)
  return _internal_mutable_digital();
}

// .PBPhysical physical = 11;
inline bool PBStockItem::_internal_has_physical() const {
  return product_type_case() == kPhysical;
}
inline bool PBStockItem::has_physical() const {
  return _internal_has_physical();
}
inline void PBStockItem::set_has_physical() {
  _oneof_case_[0] = kPhysical;
}
inline void PBStockItem::clear_physical() {
  if (_internal_has_physical()) {
    if (GetArena() == nullptr) {
      delete product_type_.physical_;
    }
    clear_has_product_type();
  }
}
inline ::PBPhysical* PBStockItem::release_physical() {
  // @@protoc_insertion_point(field_release:PBStockItem.physical)
  if (_internal_has_physical()) {
    clear_has_product_type();
      ::PBPhysical* temp = product_type_.physical_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.physical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBPhysical& PBStockItem::_internal_physical() const {
  return _internal_has_physical()
      ? *product_type_.physical_
      : *reinterpret_cast< ::PBPhysical*>(&::_PBPhysical_default_instance_);
}
inline const ::PBPhysical& PBStockItem::physical() const {
  // @@protoc_insertion_point(field_get:PBStockItem.physical)
  return _internal_physical();
}
inline ::PBPhysical* PBStockItem::unsafe_arena_release_physical() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.physical)
  if (_internal_has_physical()) {
    clear_has_product_type();
    ::PBPhysical* temp = product_type_.physical_;
    product_type_.physical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_physical(::PBPhysical* physical) {
  clear_product_type();
  if (physical) {
    set_has_physical();
    product_type_.physical_ = physical;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.physical)
}
inline ::PBPhysical* PBStockItem::_internal_mutable_physical() {
  if (!_internal_has_physical()) {
    clear_product_type();
    set_has_physical();
    product_type_.physical_ = CreateMaybeMessage< ::PBPhysical >(GetArena());
  }
  return product_type_.physical_;
}
inline ::PBPhysical* PBStockItem::mutable_physical() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.physical)
  return _internal_mutable_physical();
}

// .PBPlants plants = 12;
inline bool PBStockItem::_internal_has_plants() const {
  return product_type_case() == kPlants;
}
inline bool PBStockItem::has_plants() const {
  return _internal_has_plants();
}
inline void PBStockItem::set_has_plants() {
  _oneof_case_[0] = kPlants;
}
inline void PBStockItem::clear_plants() {
  if (_internal_has_plants()) {
    if (GetArena() == nullptr) {
      delete product_type_.plants_;
    }
    clear_has_product_type();
  }
}
inline ::PBPlants* PBStockItem::release_plants() {
  // @@protoc_insertion_point(field_release:PBStockItem.plants)
  if (_internal_has_plants()) {
    clear_has_product_type();
      ::PBPlants* temp = product_type_.plants_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.plants_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBPlants& PBStockItem::_internal_plants() const {
  return _internal_has_plants()
      ? *product_type_.plants_
      : *reinterpret_cast< ::PBPlants*>(&::_PBPlants_default_instance_);
}
inline const ::PBPlants& PBStockItem::plants() const {
  // @@protoc_insertion_point(field_get:PBStockItem.plants)
  return _internal_plants();
}
inline ::PBPlants* PBStockItem::unsafe_arena_release_plants() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.plants)
  if (_internal_has_plants()) {
    clear_has_product_type();
    ::PBPlants* temp = product_type_.plants_;
    product_type_.plants_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_plants(::PBPlants* plants) {
  clear_product_type();
  if (plants) {
    set_has_plants();
    product_type_.plants_ = plants;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.plants)
}
inline ::PBPlants* PBStockItem::_internal_mutable_plants() {
  if (!_internal_has_plants()) {
    clear_product_type();
    set_has_plants();
    product_type_.plants_ = CreateMaybeMessage< ::PBPlants >(GetArena());
  }
  return product_type_.plants_;
}
inline ::PBPlants* PBStockItem::mutable_plants() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.plants)
  return _internal_mutable_plants();
}

// .PBSeeds seeds = 13;
inline bool PBStockItem::_internal_has_seeds() const {
  return product_type_case() == kSeeds;
}
inline bool PBStockItem::has_seeds() const {
  return _internal_has_seeds();
}
inline void PBStockItem::set_has_seeds() {
  _oneof_case_[0] = kSeeds;
}
inline void PBStockItem::clear_seeds() {
  if (_internal_has_seeds()) {
    if (GetArena() == nullptr) {
      delete product_type_.seeds_;
    }
    clear_has_product_type();
  }
}
inline ::PBSeeds* PBStockItem::release_seeds() {
  // @@protoc_insertion_point(field_release:PBStockItem.seeds)
  if (_internal_has_seeds()) {
    clear_has_product_type();
      ::PBSeeds* temp = product_type_.seeds_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.seeds_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBSeeds& PBStockItem::_internal_seeds() const {
  return _internal_has_seeds()
      ? *product_type_.seeds_
      : *reinterpret_cast< ::PBSeeds*>(&::_PBSeeds_default_instance_);
}
inline const ::PBSeeds& PBStockItem::seeds() const {
  // @@protoc_insertion_point(field_get:PBStockItem.seeds)
  return _internal_seeds();
}
inline ::PBSeeds* PBStockItem::unsafe_arena_release_seeds() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBStockItem.seeds)
  if (_internal_has_seeds()) {
    clear_has_product_type();
    ::PBSeeds* temp = product_type_.seeds_;
    product_type_.seeds_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBStockItem::unsafe_arena_set_allocated_seeds(::PBSeeds* seeds) {
  clear_product_type();
  if (seeds) {
    set_has_seeds();
    product_type_.seeds_ = seeds;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBStockItem.seeds)
}
inline ::PBSeeds* PBStockItem::_internal_mutable_seeds() {
  if (!_internal_has_seeds()) {
    clear_product_type();
    set_has_seeds();
    product_type_.seeds_ = CreateMaybeMessage< ::PBSeeds >(GetArena());
  }
  return product_type_.seeds_;
}
inline ::PBSeeds* PBStockItem::mutable_seeds() {
  // @@protoc_insertion_point(field_mutable:PBStockItem.seeds)
  return _internal_mutable_seeds();
}

inline bool PBStockItem::has_product_type() const {
  return product_type_case() != PRODUCT_TYPE_NOT_SET;
}
inline void PBStockItem::clear_has_product_type() {
  _oneof_case_[0] = PRODUCT_TYPE_NOT_SET;
}
inline PBStockItem::ProductTypeCase PBStockItem::product_type_case() const {
  return PBStockItem::ProductTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PBStock

// repeated .PBStockItem stock = 1;
inline int PBStock::_internal_stock_size() const {
  return stock_.size();
}
inline int PBStock::stock_size() const {
  return _internal_stock_size();
}
inline void PBStock::clear_stock() {
  stock_.Clear();
}
inline ::PBStockItem* PBStock::mutable_stock(int index) {
  // @@protoc_insertion_point(field_mutable:PBStock.stock)
  return stock_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBStockItem >*
PBStock::mutable_stock() {
  // @@protoc_insertion_point(field_mutable_list:PBStock.stock)
  return &stock_;
}
inline const ::PBStockItem& PBStock::_internal_stock(int index) const {
  return stock_.Get(index);
}
inline const ::PBStockItem& PBStock::stock(int index) const {
  // @@protoc_insertion_point(field_get:PBStock.stock)
  return _internal_stock(index);
}
inline ::PBStockItem* PBStock::_internal_add_stock() {
  return stock_.Add();
}
inline ::PBStockItem* PBStock::add_stock() {
  // @@protoc_insertion_point(field_add:PBStock.stock)
  return _internal_add_stock();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBStockItem >&
PBStock::stock() const {
  // @@protoc_insertion_point(field_list:PBStock.stock)
  return stock_;
}

// -------------------------------------------------------------------

// PBTransport

// int32 code = 1;
inline void PBTransport::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBTransport::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBTransport::code() const {
  // @@protoc_insertion_point(field_get:PBTransport.code)
  return _internal_code();
}
inline void PBTransport::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PBTransport::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PBTransport.code)
}

// float speed = 2;
inline void PBTransport::clear_speed() {
  speed_ = 0;
}
inline float PBTransport::_internal_speed() const {
  return speed_;
}
inline float PBTransport::speed() const {
  // @@protoc_insertion_point(field_get:PBTransport.speed)
  return _internal_speed();
}
inline void PBTransport::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void PBTransport::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:PBTransport.speed)
}

// float costPerMeter = 3;
inline void PBTransport::clear_costpermeter() {
  costpermeter_ = 0;
}
inline float PBTransport::_internal_costpermeter() const {
  return costpermeter_;
}
inline float PBTransport::costpermeter() const {
  // @@protoc_insertion_point(field_get:PBTransport.costPerMeter)
  return _internal_costpermeter();
}
inline void PBTransport::_internal_set_costpermeter(float value) {
  
  costpermeter_ = value;
}
inline void PBTransport::set_costpermeter(float value) {
  _internal_set_costpermeter(value);
  // @@protoc_insertion_point(field_set:PBTransport.costPerMeter)
}

// string route = 4;
inline void PBTransport::clear_route() {
  route_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBTransport::route() const {
  // @@protoc_insertion_point(field_get:PBTransport.route)
  return _internal_route();
}
inline void PBTransport::set_route(const std::string& value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:PBTransport.route)
}
inline std::string* PBTransport::mutable_route() {
  // @@protoc_insertion_point(field_mutable:PBTransport.route)
  return _internal_mutable_route();
}
inline const std::string& PBTransport::_internal_route() const {
  return route_.Get();
}
inline void PBTransport::_internal_set_route(const std::string& value) {
  
  route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBTransport::set_route(std::string&& value) {
  
  route_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBTransport.route)
}
inline void PBTransport::set_route(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBTransport.route)
}
inline void PBTransport::set_route(const char* value,
    size_t size) {
  
  route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBTransport.route)
}
inline std::string* PBTransport::_internal_mutable_route() {
  
  return route_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBTransport::release_route() {
  // @@protoc_insertion_point(field_release:PBTransport.route)
  return route_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBTransport::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  route_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBTransport.route)
}
inline std::string* PBTransport::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBTransport.route)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return route_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBTransport::unsafe_arena_set_allocated_route(
    std::string* route) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (route != nullptr) {
    
  } else {
    
  }
  route_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      route, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBTransport.route)
}

// -------------------------------------------------------------------

// PBAirTransport

// string model = 1;
inline void PBAirTransport::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBAirTransport::model() const {
  // @@protoc_insertion_point(field_get:PBAirTransport.model)
  return _internal_model();
}
inline void PBAirTransport::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:PBAirTransport.model)
}
inline std::string* PBAirTransport::mutable_model() {
  // @@protoc_insertion_point(field_mutable:PBAirTransport.model)
  return _internal_mutable_model();
}
inline const std::string& PBAirTransport::_internal_model() const {
  return model_.Get();
}
inline void PBAirTransport::_internal_set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBAirTransport::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBAirTransport.model)
}
inline void PBAirTransport::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBAirTransport.model)
}
inline void PBAirTransport::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBAirTransport.model)
}
inline std::string* PBAirTransport::_internal_mutable_model() {
  
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBAirTransport::release_model() {
  // @@protoc_insertion_point(field_release:PBAirTransport.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBAirTransport::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBAirTransport.model)
}
inline std::string* PBAirTransport::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBAirTransport.model)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBAirTransport::unsafe_arena_set_allocated_model(
    std::string* model) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model != nullptr) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBAirTransport.model)
}

// .PBTransport transport = 2;
inline bool PBAirTransport::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool PBAirTransport::has_transport() const {
  return _internal_has_transport();
}
inline void PBAirTransport::clear_transport() {
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::PBTransport& PBAirTransport::_internal_transport() const {
  const ::PBTransport* p = transport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBTransport*>(
      &::_PBTransport_default_instance_);
}
inline const ::PBTransport& PBAirTransport::transport() const {
  // @@protoc_insertion_point(field_get:PBAirTransport.transport)
  return _internal_transport();
}
inline void PBAirTransport::unsafe_arena_set_allocated_transport(
    ::PBTransport* transport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBAirTransport.transport)
}
inline ::PBTransport* PBAirTransport::release_transport() {
  auto temp = unsafe_arena_release_transport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBTransport* PBAirTransport::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:PBAirTransport.transport)
  
  ::PBTransport* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::PBTransport* PBAirTransport::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBTransport>(GetArena());
    transport_ = p;
  }
  return transport_;
}
inline ::PBTransport* PBAirTransport::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:PBAirTransport.transport)
  return _internal_mutable_transport();
}
inline void PBAirTransport::set_allocated_transport(::PBTransport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:PBAirTransport.transport)
}

// -------------------------------------------------------------------

// PBLandTransport

// string type = 1;
inline void PBLandTransport::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBLandTransport::type() const {
  // @@protoc_insertion_point(field_get:PBLandTransport.type)
  return _internal_type();
}
inline void PBLandTransport::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PBLandTransport.type)
}
inline std::string* PBLandTransport::mutable_type() {
  // @@protoc_insertion_point(field_mutable:PBLandTransport.type)
  return _internal_mutable_type();
}
inline const std::string& PBLandTransport::_internal_type() const {
  return type_.Get();
}
inline void PBLandTransport::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBLandTransport::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBLandTransport.type)
}
inline void PBLandTransport::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBLandTransport.type)
}
inline void PBLandTransport::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBLandTransport.type)
}
inline std::string* PBLandTransport::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBLandTransport::release_type() {
  // @@protoc_insertion_point(field_release:PBLandTransport.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBLandTransport::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBLandTransport.type)
}
inline std::string* PBLandTransport::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBLandTransport.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBLandTransport::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBLandTransport.type)
}

// .PBTransport transport = 2;
inline bool PBLandTransport::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool PBLandTransport::has_transport() const {
  return _internal_has_transport();
}
inline void PBLandTransport::clear_transport() {
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::PBTransport& PBLandTransport::_internal_transport() const {
  const ::PBTransport* p = transport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBTransport*>(
      &::_PBTransport_default_instance_);
}
inline const ::PBTransport& PBLandTransport::transport() const {
  // @@protoc_insertion_point(field_get:PBLandTransport.transport)
  return _internal_transport();
}
inline void PBLandTransport::unsafe_arena_set_allocated_transport(
    ::PBTransport* transport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBLandTransport.transport)
}
inline ::PBTransport* PBLandTransport::release_transport() {
  auto temp = unsafe_arena_release_transport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBTransport* PBLandTransport::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:PBLandTransport.transport)
  
  ::PBTransport* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::PBTransport* PBLandTransport::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBTransport>(GetArena());
    transport_ = p;
  }
  return transport_;
}
inline ::PBTransport* PBLandTransport::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:PBLandTransport.transport)
  return _internal_mutable_transport();
}
inline void PBLandTransport::set_allocated_transport(::PBTransport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:PBLandTransport.transport)
}

// -------------------------------------------------------------------

// PBSeaTransport

// string shipname = 1;
inline void PBSeaTransport::clear_shipname() {
  shipname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBSeaTransport::shipname() const {
  // @@protoc_insertion_point(field_get:PBSeaTransport.shipname)
  return _internal_shipname();
}
inline void PBSeaTransport::set_shipname(const std::string& value) {
  _internal_set_shipname(value);
  // @@protoc_insertion_point(field_set:PBSeaTransport.shipname)
}
inline std::string* PBSeaTransport::mutable_shipname() {
  // @@protoc_insertion_point(field_mutable:PBSeaTransport.shipname)
  return _internal_mutable_shipname();
}
inline const std::string& PBSeaTransport::_internal_shipname() const {
  return shipname_.Get();
}
inline void PBSeaTransport::_internal_set_shipname(const std::string& value) {
  
  shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBSeaTransport::set_shipname(std::string&& value) {
  
  shipname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBSeaTransport.shipname)
}
inline void PBSeaTransport::set_shipname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBSeaTransport.shipname)
}
inline void PBSeaTransport::set_shipname(const char* value,
    size_t size) {
  
  shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBSeaTransport.shipname)
}
inline std::string* PBSeaTransport::_internal_mutable_shipname() {
  
  return shipname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBSeaTransport::release_shipname() {
  // @@protoc_insertion_point(field_release:PBSeaTransport.shipname)
  return shipname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBSeaTransport::set_allocated_shipname(std::string* shipname) {
  if (shipname != nullptr) {
    
  } else {
    
  }
  shipname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shipname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBSeaTransport.shipname)
}
inline std::string* PBSeaTransport::unsafe_arena_release_shipname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBSeaTransport.shipname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return shipname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBSeaTransport::unsafe_arena_set_allocated_shipname(
    std::string* shipname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shipname != nullptr) {
    
  } else {
    
  }
  shipname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shipname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBSeaTransport.shipname)
}

// .PBTransport transport = 2;
inline bool PBSeaTransport::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool PBSeaTransport::has_transport() const {
  return _internal_has_transport();
}
inline void PBSeaTransport::clear_transport() {
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::PBTransport& PBSeaTransport::_internal_transport() const {
  const ::PBTransport* p = transport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBTransport*>(
      &::_PBTransport_default_instance_);
}
inline const ::PBTransport& PBSeaTransport::transport() const {
  // @@protoc_insertion_point(field_get:PBSeaTransport.transport)
  return _internal_transport();
}
inline void PBSeaTransport::unsafe_arena_set_allocated_transport(
    ::PBTransport* transport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBSeaTransport.transport)
}
inline ::PBTransport* PBSeaTransport::release_transport() {
  auto temp = unsafe_arena_release_transport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBTransport* PBSeaTransport::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:PBSeaTransport.transport)
  
  ::PBTransport* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::PBTransport* PBSeaTransport::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBTransport>(GetArena());
    transport_ = p;
  }
  return transport_;
}
inline ::PBTransport* PBSeaTransport::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:PBSeaTransport.transport)
  return _internal_mutable_transport();
}
inline void PBSeaTransport::set_allocated_transport(::PBTransport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:PBSeaTransport.transport)
}

// -------------------------------------------------------------------

// PBTransportItem

// .PBAirTransport airTransport = 1;
inline bool PBTransportItem::_internal_has_airtransport() const {
  return product_type_case() == kAirTransport;
}
inline bool PBTransportItem::has_airtransport() const {
  return _internal_has_airtransport();
}
inline void PBTransportItem::set_has_airtransport() {
  _oneof_case_[0] = kAirTransport;
}
inline void PBTransportItem::clear_airtransport() {
  if (_internal_has_airtransport()) {
    if (GetArena() == nullptr) {
      delete product_type_.airtransport_;
    }
    clear_has_product_type();
  }
}
inline ::PBAirTransport* PBTransportItem::release_airtransport() {
  // @@protoc_insertion_point(field_release:PBTransportItem.airTransport)
  if (_internal_has_airtransport()) {
    clear_has_product_type();
      ::PBAirTransport* temp = product_type_.airtransport_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.airtransport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBAirTransport& PBTransportItem::_internal_airtransport() const {
  return _internal_has_airtransport()
      ? *product_type_.airtransport_
      : *reinterpret_cast< ::PBAirTransport*>(&::_PBAirTransport_default_instance_);
}
inline const ::PBAirTransport& PBTransportItem::airtransport() const {
  // @@protoc_insertion_point(field_get:PBTransportItem.airTransport)
  return _internal_airtransport();
}
inline ::PBAirTransport* PBTransportItem::unsafe_arena_release_airtransport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBTransportItem.airTransport)
  if (_internal_has_airtransport()) {
    clear_has_product_type();
    ::PBAirTransport* temp = product_type_.airtransport_;
    product_type_.airtransport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBTransportItem::unsafe_arena_set_allocated_airtransport(::PBAirTransport* airtransport) {
  clear_product_type();
  if (airtransport) {
    set_has_airtransport();
    product_type_.airtransport_ = airtransport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBTransportItem.airTransport)
}
inline ::PBAirTransport* PBTransportItem::_internal_mutable_airtransport() {
  if (!_internal_has_airtransport()) {
    clear_product_type();
    set_has_airtransport();
    product_type_.airtransport_ = CreateMaybeMessage< ::PBAirTransport >(GetArena());
  }
  return product_type_.airtransport_;
}
inline ::PBAirTransport* PBTransportItem::mutable_airtransport() {
  // @@protoc_insertion_point(field_mutable:PBTransportItem.airTransport)
  return _internal_mutable_airtransport();
}

// .PBLandTransport landTransport = 2;
inline bool PBTransportItem::_internal_has_landtransport() const {
  return product_type_case() == kLandTransport;
}
inline bool PBTransportItem::has_landtransport() const {
  return _internal_has_landtransport();
}
inline void PBTransportItem::set_has_landtransport() {
  _oneof_case_[0] = kLandTransport;
}
inline void PBTransportItem::clear_landtransport() {
  if (_internal_has_landtransport()) {
    if (GetArena() == nullptr) {
      delete product_type_.landtransport_;
    }
    clear_has_product_type();
  }
}
inline ::PBLandTransport* PBTransportItem::release_landtransport() {
  // @@protoc_insertion_point(field_release:PBTransportItem.landTransport)
  if (_internal_has_landtransport()) {
    clear_has_product_type();
      ::PBLandTransport* temp = product_type_.landtransport_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.landtransport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBLandTransport& PBTransportItem::_internal_landtransport() const {
  return _internal_has_landtransport()
      ? *product_type_.landtransport_
      : *reinterpret_cast< ::PBLandTransport*>(&::_PBLandTransport_default_instance_);
}
inline const ::PBLandTransport& PBTransportItem::landtransport() const {
  // @@protoc_insertion_point(field_get:PBTransportItem.landTransport)
  return _internal_landtransport();
}
inline ::PBLandTransport* PBTransportItem::unsafe_arena_release_landtransport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBTransportItem.landTransport)
  if (_internal_has_landtransport()) {
    clear_has_product_type();
    ::PBLandTransport* temp = product_type_.landtransport_;
    product_type_.landtransport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBTransportItem::unsafe_arena_set_allocated_landtransport(::PBLandTransport* landtransport) {
  clear_product_type();
  if (landtransport) {
    set_has_landtransport();
    product_type_.landtransport_ = landtransport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBTransportItem.landTransport)
}
inline ::PBLandTransport* PBTransportItem::_internal_mutable_landtransport() {
  if (!_internal_has_landtransport()) {
    clear_product_type();
    set_has_landtransport();
    product_type_.landtransport_ = CreateMaybeMessage< ::PBLandTransport >(GetArena());
  }
  return product_type_.landtransport_;
}
inline ::PBLandTransport* PBTransportItem::mutable_landtransport() {
  // @@protoc_insertion_point(field_mutable:PBTransportItem.landTransport)
  return _internal_mutable_landtransport();
}

// .PBSeaTransport seaTransport = 3;
inline bool PBTransportItem::_internal_has_seatransport() const {
  return product_type_case() == kSeaTransport;
}
inline bool PBTransportItem::has_seatransport() const {
  return _internal_has_seatransport();
}
inline void PBTransportItem::set_has_seatransport() {
  _oneof_case_[0] = kSeaTransport;
}
inline void PBTransportItem::clear_seatransport() {
  if (_internal_has_seatransport()) {
    if (GetArena() == nullptr) {
      delete product_type_.seatransport_;
    }
    clear_has_product_type();
  }
}
inline ::PBSeaTransport* PBTransportItem::release_seatransport() {
  // @@protoc_insertion_point(field_release:PBTransportItem.seaTransport)
  if (_internal_has_seatransport()) {
    clear_has_product_type();
      ::PBSeaTransport* temp = product_type_.seatransport_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    product_type_.seatransport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PBSeaTransport& PBTransportItem::_internal_seatransport() const {
  return _internal_has_seatransport()
      ? *product_type_.seatransport_
      : *reinterpret_cast< ::PBSeaTransport*>(&::_PBSeaTransport_default_instance_);
}
inline const ::PBSeaTransport& PBTransportItem::seatransport() const {
  // @@protoc_insertion_point(field_get:PBTransportItem.seaTransport)
  return _internal_seatransport();
}
inline ::PBSeaTransport* PBTransportItem::unsafe_arena_release_seatransport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBTransportItem.seaTransport)
  if (_internal_has_seatransport()) {
    clear_has_product_type();
    ::PBSeaTransport* temp = product_type_.seatransport_;
    product_type_.seatransport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PBTransportItem::unsafe_arena_set_allocated_seatransport(::PBSeaTransport* seatransport) {
  clear_product_type();
  if (seatransport) {
    set_has_seatransport();
    product_type_.seatransport_ = seatransport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBTransportItem.seaTransport)
}
inline ::PBSeaTransport* PBTransportItem::_internal_mutable_seatransport() {
  if (!_internal_has_seatransport()) {
    clear_product_type();
    set_has_seatransport();
    product_type_.seatransport_ = CreateMaybeMessage< ::PBSeaTransport >(GetArena());
  }
  return product_type_.seatransport_;
}
inline ::PBSeaTransport* PBTransportItem::mutable_seatransport() {
  // @@protoc_insertion_point(field_mutable:PBTransportItem.seaTransport)
  return _internal_mutable_seatransport();
}

inline bool PBTransportItem::has_product_type() const {
  return product_type_case() != PRODUCT_TYPE_NOT_SET;
}
inline void PBTransportItem::clear_has_product_type() {
  _oneof_case_[0] = PRODUCT_TYPE_NOT_SET;
}
inline PBTransportItem::ProductTypeCase PBTransportItem::product_type_case() const {
  return PBTransportItem::ProductTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PBTransportList

// repeated .PBTransportItem transportList = 1;
inline int PBTransportList::_internal_transportlist_size() const {
  return transportlist_.size();
}
inline int PBTransportList::transportlist_size() const {
  return _internal_transportlist_size();
}
inline void PBTransportList::clear_transportlist() {
  transportlist_.Clear();
}
inline ::PBTransportItem* PBTransportList::mutable_transportlist(int index) {
  // @@protoc_insertion_point(field_mutable:PBTransportList.transportList)
  return transportlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBTransportItem >*
PBTransportList::mutable_transportlist() {
  // @@protoc_insertion_point(field_mutable_list:PBTransportList.transportList)
  return &transportlist_;
}
inline const ::PBTransportItem& PBTransportList::_internal_transportlist(int index) const {
  return transportlist_.Get(index);
}
inline const ::PBTransportItem& PBTransportList::transportlist(int index) const {
  // @@protoc_insertion_point(field_get:PBTransportList.transportList)
  return _internal_transportlist(index);
}
inline ::PBTransportItem* PBTransportList::_internal_add_transportlist() {
  return transportlist_.Add();
}
inline ::PBTransportItem* PBTransportList::add_transportlist() {
  // @@protoc_insertion_point(field_add:PBTransportList.transportList)
  return _internal_add_transportlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBTransportItem >&
PBTransportList::transportlist() const {
  // @@protoc_insertion_point(field_list:PBTransportList.transportList)
  return transportlist_;
}

// -------------------------------------------------------------------

// PBShipment

// int32 ID = 1;
inline void PBShipment::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBShipment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBShipment::id() const {
  // @@protoc_insertion_point(field_get:PBShipment.ID)
  return _internal_id();
}
inline void PBShipment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PBShipment::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PBShipment.ID)
}

// string customer = 2;
inline void PBShipment::clear_customer() {
  customer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBShipment::customer() const {
  // @@protoc_insertion_point(field_get:PBShipment.customer)
  return _internal_customer();
}
inline void PBShipment::set_customer(const std::string& value) {
  _internal_set_customer(value);
  // @@protoc_insertion_point(field_set:PBShipment.customer)
}
inline std::string* PBShipment::mutable_customer() {
  // @@protoc_insertion_point(field_mutable:PBShipment.customer)
  return _internal_mutable_customer();
}
inline const std::string& PBShipment::_internal_customer() const {
  return customer_.Get();
}
inline void PBShipment::_internal_set_customer(const std::string& value) {
  
  customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBShipment::set_customer(std::string&& value) {
  
  customer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBShipment.customer)
}
inline void PBShipment::set_customer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBShipment.customer)
}
inline void PBShipment::set_customer(const char* value,
    size_t size) {
  
  customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBShipment.customer)
}
inline std::string* PBShipment::_internal_mutable_customer() {
  
  return customer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBShipment::release_customer() {
  // @@protoc_insertion_point(field_release:PBShipment.customer)
  return customer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBShipment::set_allocated_customer(std::string* customer) {
  if (customer != nullptr) {
    
  } else {
    
  }
  customer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBShipment.customer)
}
inline std::string* PBShipment::unsafe_arena_release_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBShipment.customer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return customer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBShipment::unsafe_arena_set_allocated_customer(
    std::string* customer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (customer != nullptr) {
    
  } else {
    
  }
  customer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      customer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBShipment.customer)
}

// float distance = 3;
inline void PBShipment::clear_distance() {
  distance_ = 0;
}
inline float PBShipment::_internal_distance() const {
  return distance_;
}
inline float PBShipment::distance() const {
  // @@protoc_insertion_point(field_get:PBShipment.distance)
  return _internal_distance();
}
inline void PBShipment::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void PBShipment::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:PBShipment.distance)
}

// float cost = 4;
inline void PBShipment::clear_cost() {
  cost_ = 0;
}
inline float PBShipment::_internal_cost() const {
  return cost_;
}
inline float PBShipment::cost() const {
  // @@protoc_insertion_point(field_get:PBShipment.cost)
  return _internal_cost();
}
inline void PBShipment::_internal_set_cost(float value) {
  
  cost_ = value;
}
inline void PBShipment::set_cost(float value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PBShipment.cost)
}

// bool dispatched = 5;
inline void PBShipment::clear_dispatched() {
  dispatched_ = false;
}
inline bool PBShipment::_internal_dispatched() const {
  return dispatched_;
}
inline bool PBShipment::dispatched() const {
  // @@protoc_insertion_point(field_get:PBShipment.dispatched)
  return _internal_dispatched();
}
inline void PBShipment::_internal_set_dispatched(bool value) {
  
  dispatched_ = value;
}
inline void PBShipment::set_dispatched(bool value) {
  _internal_set_dispatched(value);
  // @@protoc_insertion_point(field_set:PBShipment.dispatched)
}

// .PBStock productlist = 6;
inline bool PBShipment::_internal_has_productlist() const {
  return this != internal_default_instance() && productlist_ != nullptr;
}
inline bool PBShipment::has_productlist() const {
  return _internal_has_productlist();
}
inline void PBShipment::clear_productlist() {
  if (GetArena() == nullptr && productlist_ != nullptr) {
    delete productlist_;
  }
  productlist_ = nullptr;
}
inline const ::PBStock& PBShipment::_internal_productlist() const {
  const ::PBStock* p = productlist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBStock*>(
      &::_PBStock_default_instance_);
}
inline const ::PBStock& PBShipment::productlist() const {
  // @@protoc_insertion_point(field_get:PBShipment.productlist)
  return _internal_productlist();
}
inline void PBShipment::unsafe_arena_set_allocated_productlist(
    ::PBStock* productlist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(productlist_);
  }
  productlist_ = productlist;
  if (productlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBShipment.productlist)
}
inline ::PBStock* PBShipment::release_productlist() {
  auto temp = unsafe_arena_release_productlist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBStock* PBShipment::unsafe_arena_release_productlist() {
  // @@protoc_insertion_point(field_release:PBShipment.productlist)
  
  ::PBStock* temp = productlist_;
  productlist_ = nullptr;
  return temp;
}
inline ::PBStock* PBShipment::_internal_mutable_productlist() {
  
  if (productlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBStock>(GetArena());
    productlist_ = p;
  }
  return productlist_;
}
inline ::PBStock* PBShipment::mutable_productlist() {
  // @@protoc_insertion_point(field_mutable:PBShipment.productlist)
  return _internal_mutable_productlist();
}
inline void PBShipment::set_allocated_productlist(::PBStock* productlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete productlist_;
  }
  if (productlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(productlist);
    if (message_arena != submessage_arena) {
      productlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, productlist, submessage_arena);
    }
    
  } else {
    
  }
  productlist_ = productlist;
  // @@protoc_insertion_point(field_set_allocated:PBShipment.productlist)
}

// .PBTransportItem transport = 7;
inline bool PBShipment::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool PBShipment::has_transport() const {
  return _internal_has_transport();
}
inline void PBShipment::clear_transport() {
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::PBTransportItem& PBShipment::_internal_transport() const {
  const ::PBTransportItem* p = transport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBTransportItem*>(
      &::_PBTransportItem_default_instance_);
}
inline const ::PBTransportItem& PBShipment::transport() const {
  // @@protoc_insertion_point(field_get:PBShipment.transport)
  return _internal_transport();
}
inline void PBShipment::unsafe_arena_set_allocated_transport(
    ::PBTransportItem* transport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBShipment.transport)
}
inline ::PBTransportItem* PBShipment::release_transport() {
  auto temp = unsafe_arena_release_transport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBTransportItem* PBShipment::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:PBShipment.transport)
  
  ::PBTransportItem* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::PBTransportItem* PBShipment::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBTransportItem>(GetArena());
    transport_ = p;
  }
  return transport_;
}
inline ::PBTransportItem* PBShipment::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:PBShipment.transport)
  return _internal_mutable_transport();
}
inline void PBShipment::set_allocated_transport(::PBTransportItem* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:PBShipment.transport)
}

// -------------------------------------------------------------------

// PBShipmentList

// repeated .PBShipment shipmentList = 1;
inline int PBShipmentList::_internal_shipmentlist_size() const {
  return shipmentlist_.size();
}
inline int PBShipmentList::shipmentlist_size() const {
  return _internal_shipmentlist_size();
}
inline void PBShipmentList::clear_shipmentlist() {
  shipmentlist_.Clear();
}
inline ::PBShipment* PBShipmentList::mutable_shipmentlist(int index) {
  // @@protoc_insertion_point(field_mutable:PBShipmentList.shipmentList)
  return shipmentlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBShipment >*
PBShipmentList::mutable_shipmentlist() {
  // @@protoc_insertion_point(field_mutable_list:PBShipmentList.shipmentList)
  return &shipmentlist_;
}
inline const ::PBShipment& PBShipmentList::_internal_shipmentlist(int index) const {
  return shipmentlist_.Get(index);
}
inline const ::PBShipment& PBShipmentList::shipmentlist(int index) const {
  // @@protoc_insertion_point(field_get:PBShipmentList.shipmentList)
  return _internal_shipmentlist(index);
}
inline ::PBShipment* PBShipmentList::_internal_add_shipmentlist() {
  return shipmentlist_.Add();
}
inline ::PBShipment* PBShipmentList::add_shipmentlist() {
  // @@protoc_insertion_point(field_add:PBShipmentList.shipmentList)
  return _internal_add_shipmentlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBShipment >&
PBShipmentList::shipmentlist() const {
  // @@protoc_insertion_point(field_list:PBShipmentList.shipmentList)
  return shipmentlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PBLogistics_2eproto
